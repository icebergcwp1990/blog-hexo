[{"title":"Objective-C Runtime 解析","url":"http://yoursite.com/2016/10/13/objective-c_runtime_解析/","content":"<p>这是一篇译文，作为一个英语水平处于半吊子的理科男，因此一定存在不尽原意的地方，翻译此文纯属个人喜好，希望能得到大家的指点和反馈，读者如有兴趣的话可以<a href=\"http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html\" target=\"_blank\" rel=\"external\">查看原文</a>。</p>\n<p>以下是正文：</p>\n<p>一般而言，当人们刚接触Coacoa/Objective-C的时候，运行时（Objective-C Runtime）是最容易被忽视的特征之一。究其原因在于Objective-C是一门简单的语言，花费几个小时便能入门，此后，新手们通常会将大部分的时间和精力用于研究Cocoa Framework以及如何使用它。然而，每一个人至少应该清楚运行时是如何运转的，而不仅仅停留在编译方式的认知层面，如：[target doMethodWith:var];编译之后变成object_msgSend(target,@selector(doMethodWith:),var1)。了解Runtime的工作原理可以帮助你进一步理解Objective-C这门语言以及你编写的App的运转流程。我相信各个水平层次的Mac/iPhone开发者都会在研究Runtime的过程中有所收获。</p>\n<p><strong>Objective-C Runtime是开源的</strong></p>\n<p>Runtime是开源的，你随时可以在<a href=\"http://opensource.apple.com\" target=\"_blank\" rel=\"external\">源代码</a>上查阅。事实上，查阅源代码是弄清楚Objective-C原理的首选途径之一，胜过阅读苹果开发文档。下载最新版本的源代码<a href=\"http://opensource.apple.com/source/objc4/objc4-680/\" target=\"_blank\" rel=\"external\">点击我</a>。</p>\n<p><strong>动态 &amp; 静态 语言</strong></p>\n<p>Objective-C是基于运行时的语言，意味着它会尽可能地将决定代码执行逻辑的操作从编译&amp;链接阶段延迟到代码被执行的阶段。这将给你带来很大的灵活性，因此如果有必要的话你可以将消息重定向到合适的对象，或者你甚至可以交换两个方法实现，等等。实现上述功能需要运行时具备审查对象可以响应哪些请求和不能响应哪些请求然后准确地派发消息的能力。如果我们将Objective-C这一特性对比C语言。C语言程序运行始于main()函数，基于至上而下的设计执行你的逻辑和调用你实现的函数。C结构体不能通过发送请求到其他的结构体来执行某个函数。很可能你会编写一段C语言代码，如下所示：</p>\n<pre><code>#include &lt; stdio.h &gt;\n\nint main(int argc, const char **argv[])\n{\n    printf(&quot;Hello World!&quot;);\n    return 0;\n} \n</code></pre><p>上述代码经过编译器编译、优化，然后将优化后的代码转化成汇编语言：</p>\n<pre><code>.text\n .align 4,0x90\n .globl _main\n_main:\nLeh_func_begin1:\n pushq %rbp\nLlabel1:\n movq %rsp, %rbp\nLlabel2:\n subq $16, %rsp\nLlabel3:\n movq %rsi, %rax\n movl %edi, %ecx\n movl %ecx, -8(%rbp)\n movq %rax, -16(%rbp)\n xorb %al, %al\n leaq LC(%rip), %rcx\n movq %rcx, %rdi\n call _printf\n movl $0, -4(%rbp)\n movl -4(%rbp), %eax\n addq $16, %rsp\n popq %rbp\n ret\nLeh_func_end1:\n .cstring\nLC:\n .asciz &quot;Hello World!&quot;\n</code></pre><p>随后链接相关的库生成一个可执行文件。对比于Objective-C，虽然代码处理过程很相似，但是编译后的代码取决于Objective-C Runtime库。当我们最初学习Objective-C时被告知中括号里面的代码是如何被处理的，如下</p>\n<pre><code>[self doSomethingWithVar:var1];\n</code></pre><p>被转变成</p>\n<pre><code>objc_msgSend(self,@selector(doSomethingWithVar:),var1);\n</code></pre><p>除此之外我们并不真的知道Runtime是如何工作的，也许很久以后会知道。</p>\n<p><strong>何为Runtime(运行时)</strong></p>\n<p>Objective-C Runtime是一个Runtime库，主要有C语言&amp;汇编语言编写而成，在C语言的基础上加上面向对象的功能之后就成为了Objective-C语言。这意味着Runtime负责加载类，方法派发，方法传达等操作。本质上而言，Runtime提供了所有的需要的结构用以支持Objective-C的面向对象编程。</p>\n<p><strong>Objective-C 运行时术语</strong></p>\n<p>在进一步深入之前，让我们扫清一些术语的障碍，这样使我们处于同一立场。就MacOS X App &amp; iPhone OS App开发者所关心而言，这里有两种Runtime: Modern Runtime和Legacy Runtime。Modern Runtime适用于所有64位MacOS应用和所有iPhone应用，Legacy Runtime适用于所有的32位MacOS应用。Runtime中有两种类型的函数：实例函数（以‘-’符号开头如-(void)doFoo）;类函数（以‘+’开头如+(id)alloc）。两种函数都与C函数很像，包含一组实现某个任务的代码，如下所示</p>\n<pre><code>-(NSString *)movieTitle\n{\n    return @&quot;Futurama: Into the Wild Green Yonder&quot;;\n}\n</code></pre><p>选择器：在Objective-C中，选择器本质上是一个C数据结构体用以标识一个对象将要执行的函数。在Runtime中的定义如下</p>\n<pre><code>typedef struct objc_selector  *SEL; \n</code></pre><p>使用方式</p>\n<pre><code>SEL aSel = @selector(movieTitle); \n</code></pre><p>消息调用：</p>\n<pre><code>[target getMovieTitleForObject:obj];\n</code></pre><p>Objective-C消息就是中括号[]里面的所有东西，包括消息的接受者target，调用的函数getMovieTileForObject以及所有发送的参数obj。消息调用虽然样式上类似于c函数调用但是实现却不同。实际上，当你发送一个消息给一个对象并意味着函数会被执行。对象可能会检测谁是消息的发送者，基于此再决定执行一个不同的函数或者转送消息给其他不同的目标对象。如果你查看Runtime里的类定义，你将会看到如下所示的内容：</p>\n<pre><code>typedef struct objc_class *Class;\ntypedef struct objc_object {\n    Class isa;\n} *id; \n</code></pre><p>这里有几个要点。首先是类Class和对象Object都有一个对应的结构体。所有的objc_object结构体都有一个类指针isa，这就是我们所说的“isa指针”。Runtime需要通过检测一个对象的isa指针去查看对象的类别，然后查看该对象是否能响应你当前发送过来的消息。接下来是id指针，id指针默认不属于任何类别只表明指向的是一个Objective-C对象。对于id指针指向的对象，你可以获知对象的类别，查看对象是否能响应某个函数等等，然后当你具体了解了id指针指向的对象之后便可以更好的使用该对象。你同样可以查看LLVM/Clang文档中Blocks的定义：</p>\n<pre><code>struct Block_literal_1 {\n    void *isa; // initialized to &amp;_NSConcreteStackBlock or &amp;_NSConcreteGlobalBlock\n    int flags;\n    int reserved; \n    void (*invoke)(void *, ...);\n    struct Block_descriptor_1 {\n unsigned long int reserved; // NULL\n     unsigned long int size;  // sizeof(struct Block_literal_1)\n // optional helper functions\n     void (*copy_helper)(void *dst, void *src);\n     void (*dispose_helper)(void *src); \n    } *descriptor;\n    // imported variables\n}; \n</code></pre><p>Block结构的设计兼容于Runtime。因此Block被视为一个Objective-C对象，所有也就可以响应消息如-retain,-release,-copy等等。</p>\n<p>IMP:Method Implementations</p>\n<pre><code>typedef id (*IMP)(id self,SEL _cmd,...); \n</code></pre><p>IMP是一个函数指针，由编译器生成且指向函数的实现内容。如果你目前是一个Objective-C新手则浅尝辄止，但是我们随后会了解Runtime是如何调用你的函数的。</p>\n<p>Objective-C类：类里面是什么？在Objective-C中，类实现基本上类似于：</p>\n<pre><code>@interface MyClass : NSObject {\n//vars\nNSInteger counter;\n}\n//methods\n-(void)doFoo;\n@end\n</code></pre><p>但是类在Runtime中定义远不如此，如下</p>\n<pre><code>#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif \n</code></pre><p>我们可以看到一个类中声明了一个父类的引用，类名，实例变量列表，方法列表，缓存以及协议列表。当响应发送给类或对象的消息时，Runtime需要用到这些信息。</p>\n"},{"title":"Hello,Hexo","url":"http://yoursite.com/2016/09/28/Hello-Hexo/","content":"<h3 id=\"hello-Hexo\"><a href=\"#hello-Hexo\" class=\"headerlink\" title=\"hello , Hexo\"></a>hello , Hexo</h3><blockquote>\n<p>Where there is a will , there is a way.<br>-— for my self</p>\n</blockquote>\n<p>Wow, I think hexo is a amazing stuff! I like it really! Let’s start !</p>\n"},{"title":"Hello World","url":"http://yoursite.com/2016/09/28/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"category","url":"http://yoursite.com/category/index.html","content":""},{"title":"about","url":"http://yoursite.com/about/index.html","content":""},{"title":"link","url":"http://yoursite.com/link/index.html","content":""},{"title":"project","url":"http://yoursite.com/project/index.html","content":""},{"title":"search","url":"http://yoursite.com/search/index.html","content":""},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":""},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"\n@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\nhtml.page-home {\n\n\tbackground: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n\tbackground-blend-mode: screen;\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n\n}\n"}]