[{"title":"爱情与金钱-第一章","url":"http://yoursite.com/2016/12/01/爱情与金钱-第一章/","content":"<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>克拉克森一家居住在靠近剑桥的乡村，距离最近的村庄有半英里，距离康桥河有一英里。他们有一栋大面积的老房子，屋后是一个漂亮的花园，里面有很多花和大树。</p>\n<p>正值七月，在某个周四的早上，杰基从花园进入屋内。她是一个高个子的胖女人，今年三十岁。虽然现在是一年中最热的时候，但是她却穿了一条棕色的保暖裙和黄色衬衣。她刚要去厨房喝点水，这时候电话响了。</p>\n<p>“剑桥1379号”，杰基回应道。</p>\n<p>“你好，我是戴安娜，我想和老妈聊一句。”</p>\n<p>“老妈不在家”，杰基答复道，“她看医生去了。”</p>\n<p>“为什么去看医生？老妈怎么了？”</p>\n<p>“没什么大碍”，杰基说，“你为什么打电话回家？周末准备回来吗？老妈希望你们都回家。”</p>\n<p>“恩，我想回去，”迪恩说，“我打电话是因为我没有钱买回家的火车票了。”</p>\n<p>“没钱！老妈一直给你寄钱！”</p>\n<p>“不多说了，电话费很贵，”迪恩冷淡地辩解道，“告诉老妈，我需要钱买票。”</p>\n<p>杰基放下电话，从包里拿出一根烟然后抽了起来。她妹妹一直向家里要钱让她很生气。戴安娜今年二十岁，是家里最小的孩子，现在在伦敦生活，住在一个大房子的单间里。</p>\n<p>她想成为一名歌手。她歌唱得很好但是从不愿意找工作。</p>\n<p>杰基回到厨房准备做些三明治。这时候后门开了，她妈妈回来了。</p>\n<p>“真热！”茉莉说道。她脱下她的帽子放在桌上。她是一个高个子的黑人妇女，有一双美丽的眼睛。<br>两条大黑狗跟随茉莉来到厨房，径直跑到她身边围着她转。她坐了下来，摸着它们的头。</p>\n<p>杰基把做好的三明治放桌上。“老妈，”她说道，“戴安娜打了电话回来，她想要一些钱用了买火车票。”</p>\n<p>茉莉闭着眼睛沉思了一会，然后站了起来。“我希望你下午整理一下房子为周末的家庭聚会做准备，”她说道，“哦，还有麻烦你晚点去趟镇上帮我把药拿回来。”</p>\n<p>“好的，妈妈，”杰基答复道。</p>\n<p>茉莉走向厨房门口。</p>\n<p>“妈，稍等一下，”杰基喊道，“彼得.霍布斯早上来了一趟，他对你的那封信很生气，你知道的，他为此丢了工作。你为什么写信给他的上司？他想找你问清楚这个问题。”</p>\n<p>“好啦，我不想和他讨论这个。”茉莉说道，然后打开厨房门准备离开。</p>\n<p>“但是，老妈，你有所不知，他才17岁，那是它的第一份工作。他真的很生气，还说…要杀了你。”</p>\n<p>茉莉没有做声。她离开了这个房间并关上了门。</p>\n<p><strong>翻译要点</strong></p>\n<ol>\n<li>warm + 颜色 ：暖色调</li>\n<li>dark woman ：指肤色暗沉的女人，不是黑肤色的女人</li>\n</ol>\n<h4 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h4><p>1 Chapter</p>\n<p>The Clarkson family lived in the country near Cambridge，about half a mile from the nearest village and about a mile from the river．They had a big，old house with a beautiful garden，a lot of flowers and many old．trees．</p>\n<p>One Thursday morning in July，Jackie came in from the garden．She was a tall，fat woman，thirty years old．It was the hottest day of the year，but she wore a warm brown skirt and yellow shirt．She went into the kitchen to get a drink of water．Just then the phone rang．</p>\n<p>‘Cambridge 1379，’Jackie said．</p>\n<p>‘Hello．This is Diane．I want to talk to Mother．’</p>\n<p>‘Mother isn’t here，’Jackie said．’She’s at the doctor’s．’</p>\n<p>‘Why？What’s Wrong？’</p>\n<p>‘Nothing’s wrong，’Jackie said．’Why are you telephoning？ You are going to come this weekend？ Mother wants everyone to be here．’</p>\n<p>‘Yes，I want to come，’Diane said．’I’m phoning because I have no money for the train ticket．’</p>\n<p>‘No money！Mother is always giving you money！’</p>\n<p>‘This phone call is very expensive，’Diane said coldly．’Tell Mother please．I need the money．’</p>\n<p>Jackie put the phone down．She took a cigarette from her bag and began to smoke．“her sister al-ways asked for money．Diane was twenty years old， the youngest in the family．She lived in London，in one room of a big house．</p>\n<p>She wanted to be a singer．She sang very well but she could never get work．</p>\n<p>Jackie went back into the kitchen and began to make some sandwiches．Just then the back door opened，and her mother came in．</p>\n<p>‘It’s very hot！’Molly said．She took off her hat and put it down on the table．She was a tall，dark woman with beautiful eyes．</p>\n<p>Two big，black dogs came into the kitchen after her and ran across to her．She sat down and put her hands on their heads．</p>\n<p>Jackie put the sandwiches on the table．’Mother，’she said，’Diane phoned．She wants money for her train ticket．’</p>\n<p>Molly closed her eyes for a minute．Then she stood up．’This afternoon I want you to get the house ready for the weekend，’she said．’Oh，and please go to the village later and get my tablets．’</p>\n<p>‘Yes，Mother，’Jackie said．</p>\n<p>Molly went to the door．</p>\n<p>‘Mother，please wait a minute，’Jackie said．’Peter Hobbs came here this morning．He’s very angry with you about that letter．He lost his job，you know．Why did you write to his office？He wants to talk to you about it．’</p>\n<p>‘Well，I don’t want to talk to him，’Molly said．She opened the door．</p>\n<p>‘But Mother，you don’t understand．He’s seventeen，and it was his first job．He’s very，very angry．He says… he says he’s going to kill you！’</p>\n<p>Molly did not answer．She went out of the room and closed the door．</p>\n"},{"title":"书虫系列-翻译序言","url":"http://yoursite.com/2016/11/30/书虫-牛津英汉双语读物-翻译序/","content":"<p>记得在莫提默·艾德勒&amp;查尔斯·范多伦的著作《如何阅读一本书》一书中，除了四种由浅入深的阅读模式之外，里面引用了弗兰西斯•培根的一句话让我影响深刻，即：“有些书可以浅尝即止，有些书是要生吞活剥，只有少数的书是要咀嚼与消化的。”</p>\n<p>我选书的步骤是：</p>\n<ol>\n<li>豆瓣&amp;评书：先去豆瓣读书看评论，如果上面评论很少或者评论不错，说明这本书或是暂时没有太多拥趸，尚未被挖掘；或是得到多少人的认可。因此也就有了继续探索的可行性。</li>\n<li>网上搜索：基于豆瓣评分，在网上.mobi或者.epub格式的电子书，如果实在没有上述两种格式才选择.pdf格式。</li>\n<li>浅尝&amp;阅读：拿到电子档的书籍，看完序言和目录，如果是叙事性或者连贯性强的书籍则初看几篇前面几个章节，否则就随意翻阅几个章节，如果觉得不错就继续读完，采用快速阅读的方式。</li>\n<li>收藏&amp;购买：读完了之后再对整本书做一个简短的总结，以确定是否有再次阅读和收藏的必要。如果有，则会买回纸质档书籍用于后续的分析阅读。</li>\n</ol>\n<p>之前在知乎上在“有哪些适合初学者的英语原著？”提问的答案中与《书虫系列》不期而遇。看完答题者的初步介绍之后，按照上述步骤进行筛选，目前处于第3步。在初步阅读之后，觉得这套书值得继续关注。</p>\n<p>这本由英语母语编著且面向的也是英语母语读者的读物，内容虽浅显易读，但涉及大量的英语日常用语和省略句式，觉得很有学习意义。民国时期的通才王云五现实曾在《我怎样读书：王云五对青年谈求学与生活》一书中回顾了他青年时期自学英语的经历，里面提及了一种学习英语的方法，大致步骤是：“阅读英文原著，再翻译成中文与现有译文做比较并改善，然后根据中文再反译成英文并与原文比较并改善。”对于这种学习方式，我深以为然，于是决定试试。</p>\n<p>由于学习英语是一件长周期低回报的事情，如何保持主观能动性和维持一定的兴趣决定着学习效率和连续性。关于非母语且成年人士如何学习英语这个话题在国内外的研究文献和争执观点已经有很多。个人觉得伍君仪&amp;恶魔的奶爸所编著的《把你的英语用起来》一书中的分析和总结比较客观和中肯，并且提供了一套可行性很强的方案，值得一读。</p>\n<p>以上废话这么多，无非就是想说明一件事情：我找了一套适合我目前水平的英语教材《书虫-牛津英汉双语读物》，并决定按照一天一篇的节奏辅以“阅读-翻译-反翻译”的方式学完这套教材。</p>\n<p>此文为序，多么“无耻”的一句话！</p>\n"},{"title":"StartFucks Coffee - 操蛋的咖啡","url":"http://yoursite.com/2016/11/23/StartFucks Coffee - 操蛋的咖啡/","content":"<blockquote>\n<p>写了一天的代码，看着桌上冒着热气的白开水，想到第一次去星巴克的情景：傻傻地在柜台面子，看着各种咖啡名词，踌躇许久，最终点了一份中杯柠檬茶。那位服务员小胖妞无语中掺杂点鄙视的眼神，至今记忆犹新…</p>\n</blockquote>\n<p>身边的朋友喝咖啡的不少，咖啡这个词汇也经常萦绕耳旁：美剧中，喝咖啡已是日常；朋友聚会，问及他（她）们最爱的饮料，也是拿铁和卡布奇诺居多；特别的大学期间的坐我对面的师姐，感觉她对于喝咖啡跟喝水已经没多大区别，每一次浓浓的咖啡香从她的书桌散发出来，很难说我没有一丝要来一杯的冲动，不过，最终还是忍住了。</p>\n<p>究其原因，一是我个人对咖啡的印象并不好，普遍观点认为长期喝咖啡对于身体健康和健身有不良影响，这种观点是否属实尚不能下定论。在此之前，我选择敬而远之。二是我狭隘的以为咖啡只有一种：苦咖啡，殊不知咖啡也是大有学问。其实我早该想到西方的咖啡应该和东方的茶一样，种类繁多，口味各异。只是先入为主的观念让我对咖啡已经失去了进一步了解的兴趣。</p>\n<p>如今，终究是因为自尊心受到了伤害，决定整理一下关于咖啡的基本知识。更何况即便是不喝咖啡，也至少对它有一个基本的认识，这样才算得上公平。</p>\n<p>网上已经有很多接受咖啡种类的文章，我只是顺手牵羊，秉着拿来主义，自己总结一下，加深印象。</p>\n<p>咖啡大体上可以分为12种，其中浓缩咖啡（Espresso）最为根本，其他11种都是在Espresso的基础上添加其他的配料演变而成的花式咖啡。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-0.jpg\" alt=\"12种咖啡的恩怨情仇\"></p>\n<p>通过上图，可以比较直观地感受这12种咖啡直接的关联。以下分别介绍：</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-1.jpg\" alt=\"浓缩咖啡-玛奇朵-美式咖啡\"></p>\n<h3 id=\"浓缩咖啡（Espresso）\"><a href=\"#浓缩咖啡（Espresso）\" class=\"headerlink\" title=\"浓缩咖啡（Espresso）\"></a>浓缩咖啡（Espresso）</h3><p>浓缩咖啡，英文名为Espresso，Espresso是一个意大利单词，所以也叫意式浓缩咖啡，指的是一种用咖啡机在短时间内急速萃取的浓烈咖啡，几乎称得上是所有花式咖啡的基础，也是全世界咖啡馆的必备。Espresso很小杯，通常只有30毫升左右，味道很苦，表面浮着一层厚厚的油脂，会与一杯清水同上，可以选择加糖。这款是真正的咖啡爱好者和急需提神者的首选。</p>\n<h3 id=\"玛奇朵（Espresso-Macchiato）\"><a href=\"#玛奇朵（Espresso-Macchiato）\" class=\"headerlink\" title=\"玛奇朵（Espresso Macchiato）\"></a>玛奇朵（Espresso Macchiato）</h3><p>Macchiato原文为意大利语，代表“印记、烙印”的意思，发音为“玛奇雅朵”，习惯称呼为玛奇朵。玛奇朵是在浓咖啡上加上薄薄一层热奶泡以保持咖啡温度，细腻香甜的奶泡能缓冲浓缩咖啡带来的苦涩冲击，想喝咖啡但又无法舍弃甜味的你，可以选择玛奇朵。经常会听到“焦糖玛奇朵”，据说这是星巴克的独创，其做法是在牛奶中加入香草糖浆，与Espresso咖啡混合，再于奶泡上覆盖一层焦糖，口味层次很丰富。</p>\n<h3 id=\"美式咖啡（Americano）\"><a href=\"#美式咖啡（Americano）\" class=\"headerlink\" title=\"美式咖啡（Americano）\"></a>美式咖啡（Americano）</h3><p>很多咖啡馆的“当日咖啡”其实就是美式咖啡，这通常也是咖啡馆菜单上最便宜的一种。美式咖啡说白了，就是小半杯Esprssso兑上大半杯白开水，也有咖啡馆会使用滴滤式咖啡壶冲泡。美式咖啡味道淡、颜色浅，微酸微苦，但因为萃取时间长，所以咖啡因含量高。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-2.jpg\" alt=\"拿铁-白咖啡-康宝蓝\"></p>\n<h3 id=\"拿铁（Caffe-Latte）\"><a href=\"#拿铁（Caffe-Latte）\" class=\"headerlink\" title=\"拿铁（Caffè Latte）\"></a>拿铁（Caffè Latte）</h3><p>拿铁是Espresso与牛奶的经典混合，杯底先倒入少量Espresso，然后加入大量牛奶，顶端是浓密的一层泡沫，可以在奶泡上拉出各种各样的图案。经典的拿铁是70%牛奶+20%奶沫+10%咖啡，受法国人喜爱的欧蕾咖啡，是将牛奶和咖啡同时倒入杯中，两者在第一时间碰撞、混合，上加两勺打成泡沫的奶油，这在法国人的早餐中十分常见，几乎是国民饮料。</p>\n<h3 id=\"白咖啡（Flat-White）\"><a href=\"#白咖啡（Flat-White）\" class=\"headerlink\" title=\"白咖啡（Flat White）\"></a>白咖啡（Flat White）</h3><p>关于白咖啡网上有两种说法：</p>\n<ol>\n<li><p>白咖啡并不是马来西亚的那个特产，而是没有奶泡的拿铁。</p>\n</li>\n<li><p>马来西亚土特产，约有100多年的历史。白咖啡并不是指咖啡的颜色是白色的，而是采用特等咖啡豆及特级脱脂奶精原料，经特殊工艺加工后得到的咖啡，甘醇芳香不伤肠胃，保留了咖啡原有的色泽和香味，颜色比普通咖啡更清淡柔和，故得名为白咖啡。</p>\n</li>\n</ol>\n<h3 id=\"康宝蓝（Espresso-Con-Panna）\"><a href=\"#康宝蓝（Espresso-Con-Panna）\" class=\"headerlink\" title=\"康宝蓝（Espresso Con Panna）\"></a>康宝蓝（Espresso Con Panna）</h3><p>意大利语中，Con是搅拌，Panna是生奶油，康宝蓝即意式浓缩咖啡加上鲜奶油。有一种说法是，正宗的康宝蓝要配一颗巧克力或太妃糖，先将巧克力或太妃糖含在嘴里，再喝咖啡，让美味一起在口中绽放。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-3.jpg\" alt=\"布雷维-卡布奇诺-摩卡\"></p>\n<h3 id=\"布雷维-半拿铁（Cafe-Breve）\"><a href=\"#布雷维-半拿铁（Cafe-Breve）\" class=\"headerlink\" title=\"布雷维/半拿铁（Cafe Breve）\"></a>布雷维/半拿铁（Cafe Breve）</h3><p>很像拿铁，不同是加入了的不是牛奶，而是半牛奶、半奶油的混合物，有时会再加少许奶泡。公认的配方是：1份浓缩咖啡+0.75份热牛奶+0.75份鲜奶油+0.5份奶泡。</p>\n<h3 id=\"卡布奇诺（Cappuccino）\"><a href=\"#卡布奇诺（Cappuccino）\" class=\"headerlink\" title=\"卡布奇诺（Cappuccino）\"></a>卡布奇诺（Cappuccino）</h3><p>卡布奇诺和拿铁咖啡的成分一样，都是Espresso+牛奶+奶泡，不同之处仅在于卡布奇诺奶泡比牛奶多，拿铁则是牛奶比奶泡多。传统的卡布奇诺咖啡是三分之一浓缩咖啡，三分之一蒸汽牛奶和三分之一泡沫牛奶。同等价位的卡布奇诺，通常比拿铁要小杯，但咖啡味更浓郁。<br>卡布奇诺是意大利咖啡与牛奶的经典之作，咖啡的颜色就像卡布奇诺教会修士深褐色外衣上覆的头巾一样，咖啡因此得名。可根据自己口味调整牛奶与咖啡的比例，牛奶味重称为湿卡布奇诺，咖啡味重称为干卡布奇诺。</p>\n<h3 id=\"摩卡（Caffe-Mocha）\"><a href=\"#摩卡（Caffe-Mocha）\" class=\"headerlink\" title=\"摩卡（Caffè Mocha）\"></a>摩卡（Caffè Mocha）</h3><p>一种最古老的咖啡，得名于著名的摩卡港。摩卡的配方成分就相对比较复杂，在Espresso和牛奶的基础上，还有巧克力酱，顶端不是奶泡，而是打发的鲜奶油，还往往会挤上巧克力酱，或者撒上可可粉、肉桂粉，别有一番风味。由于“内容丰富”，通常售价较高，也比较大杯。巧克力和奶油都有甜味，因此摩卡咖啡是苦甜结合的典范。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-4.jpg\" alt=\"焦糖玛奇朵-爱尔兰咖啡-维也纳咖啡\"></p>\n<h3 id=\"焦糖玛奇朵（Caramel-Macchiato）\"><a href=\"#焦糖玛奇朵（Caramel-Macchiato）\" class=\"headerlink\" title=\"焦糖玛奇朵（Caramel Macchiato）\"></a>焦糖玛奇朵（Caramel Macchiato）</h3><p>即加了焦糖的玛奇朵，是在香浓热牛奶上加入浓缩咖啡、香草，最后淋上纯正焦糖而制成的饮品，特点是在一杯饮品里可以喝到三种不同的口味。</p>\n<h3 id=\"爱尔兰咖啡（Irish-Coffee）\"><a href=\"#爱尔兰咖啡（Irish-Coffee）\" class=\"headerlink\" title=\"爱尔兰咖啡（Irish Coffee）\"></a>爱尔兰咖啡（Irish Coffee）</h3><p>爱尔兰咖啡（Irish Coffee）是一款鸡尾酒，是以爱尔兰威士忌为基酒，配以咖啡为辅料，调制而成的一款鸡尾酒。据说爱尔兰咖啡背后还有一段浪漫的爱情故事，不过我觉得就像卡农背后的爱情故事一样，不必较真。</p>\n<h3 id=\"维也纳咖啡（Viennese-Coffee）\"><a href=\"#维也纳咖啡（Viennese-Coffee）\" class=\"headerlink\" title=\"维也纳咖啡（Viennese Coffee）\"></a>维也纳咖啡（Viennese Coffee）</h3><p>奥地利最著名的咖啡，是一个名叫爱因·舒伯纳的马车夫发明的，也许是由于这个原因，今天，人们偶尔也会称维也纳咖啡为“单头马车”。在温热的咖啡杯底部撒上薄薄一层砂糖或细冰糖，接着向杯中倒入滚烫而且偏浓的黑咖啡，最后在咖啡表面装饰两勺冷的新鲜奶油，一杯维也纳咖啡就做好了。</p>\n<p>综上，发现除了浓缩咖啡和美式咖啡之外，其他咖啡的含糖量都不低。公司附近就有一家星巴克，实践是检验真理的唯一标准。一个星期上一种咖啡，也够我玩三个月了。</p>\n"},{"title":"副词能否修辞名词？","url":"http://yoursite.com/2016/09/24/副词能否修辞名词/","content":"<blockquote>\n<p>之前知乎上看到一提问，大意是：The Lamb Astray中的Astray是形容词还是副词？副词是否能修辞名词？最近恰好在旋元佑先生的《文法俱乐部》一书中找到了合理的解释，借此机会梳理一下这个知识点。</p>\n</blockquote>\n<p>结合上述问题：The Lamb Astray中的Astray是形容词还是副词？副词是否能修辞名词？，可以从两个方面进行解答：</p>\n<ol>\n<li><p>The Lamb Astray中的Astray是形容词词性，属于形容词后置的情况</p>\n</li>\n<li><p>副词可以修辞名词</p>\n</li>\n</ol>\n<h3 id=\"形容词后置\"><a href=\"#形容词后置\" class=\"headerlink\" title=\"形容词后置\"></a>形容词后置</h3><p>形容词常见的所处位置包括名词片语、表语、主【宾】语补语，此外还有一个位置：名词后面，属于形容词后置的情况。</p>\n<p>在以下三种情况，形容词需要后置：</p>\n<ol>\n<li><p>复合名词后面：</p>\n<p> 类似someone这样的符合名词，因为限定词 some 和 名词 one 组合成一个词，原本名词片语中在限定词和名词之间存放形容的位置被挤压掉了，因此只能把形容词置于名词之后。</p>\n<p> 比如：</p>\n<ul>\n<li>someone else //其他人</li>\n<li>someone important //某些重要的人</li>\n</ul>\n</li>\n<li><p>一部分a-开头的形容词：</p>\n<p> 有一部分a-开头的形容词通常放在补语或者表语的位置，也可以放在名词片语后面。</p>\n<p> 比如：</p>\n<ul>\n<li>Jane and her mother alike are teather. //珍和她妈妈一样是老师</li>\n<li>Tom alone is coming. //只有汤姆要来</li>\n<li>wood adrift //漂流的木头</li>\n</ul>\n</li>\n<li><p>外来词或者惯用法：</p>\n<p> 英语中习惯把形容词放在名词前面，但是有些语言中例如法文，形容词是放在名词后面的。因此一些外来语或者惯用语，都要把形容词放在名词后面。</p>\n<p> 比如：</p>\n<ul>\n<li>Secretary General //秘书长</li>\n<li>Poet Laureate //桂冠诗人</li>\n<li>Aisa Minor //小亚细亚</li>\n<li>heir apparent //合法继承人</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"副词修辞名词\"><a href=\"#副词修辞名词\" class=\"headerlink\" title=\"副词修辞名词\"></a>副词修辞名词</h3><p>正如一般文法书上所说，一般情况下形容词修辞名词而副词则用于修辞除了名词以外的其他词类，包括形容词、动词和副词。这种说法基本上成立，但是也有特殊情况。</p>\n<p>存在一类表示强调功能的副词，可以修辞名词、动词、形容词和副词，修辞范围很广。也正因为如此，所以这类副词只能放在修饰词前面，确保修辞对象在其后面，以免出现歧义。</p>\n<p>这一类副词又可以细分为三种：</p>\n<ol>\n<li><p>强调范围的副词</p>\n<p> 典型代表：only, merely, also, especially, particularly, even等</p>\n<p> 以Only举例：</p>\n<ul>\n<li>I heard about the accident yesterday.  //我昨天听说了这件意外</li>\n<li>Only I heard about the accident yesterday. //只有我听说了…</li>\n<li>I only herad about the accident yesterday. //只是听说，并没有看到</li>\n<li>I heard about only the accident yesterday. //昨天全在听人在谈论这件意外</li>\n<li><p>I heard about the accident only yesterday. //直到昨天才听说</p>\n<p>这几个句子里only分别修饰了代名词I、动词heard、名词the accident和时间副词yesterday，都是当副词使用。</p>\n</li>\n</ul>\n</li>\n<li><p>强调语气的副词</p>\n<p> 这是最典型的副词，同样也可以修饰名词在内的四种主要词类。</p>\n<p> 举例如下：</p>\n<ul>\n<li>He is very much his father’s son.  //他和他爸爸一个调调</li>\n<li>You’re utterly insane! //你是完完全全疯了</li>\n<li>I badly need a drink.  //我急需来一杯</li>\n</ul>\n</li>\n<li><p>程度副词</p>\n<p> 这一类副词和加强语气的副词很像，但是程度副词是用来做有几成的表示，而非加强语气。所以，如果把加强语气的副词，只是语气变弱，意思不会变。但是如果拿掉程度副词，意思就可能发生改变。</p>\n<p> 举例：</p>\n<ul>\n<li>The project is almost finished. //项目已经完成的差不多了。<br>ps:上面的句子如果去掉almost，这句话的意思完全变了</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>旋元佑先生的《文法俱乐部》是一本不可多得的文法书，它区别于传统文法书的教条式+填鸭式的讲解方式，而是追本溯源，从理解本质和语言使用的角度为读者拨开文法的迷雾。    </p>\n"},{"title":"揭开ARC的神秘面纱系列一","url":"http://yoursite.com/2015/02/20/揭开ARC的神秘面纱系列一/","content":"<p>这个系列一共有三篇博客，是Matt Galloway大神关于ARC的内部实现的一些探索，看完之后觉得收获不少。因此尝试着翻译出来和大家分享，一定会翻译不当之处，希望大家及时指正。<br><a href=\"http://www.galloway.me.uk/2012/01/a-look-under-arcs-hood-episode-1/\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>以下是正文：</p>\n<p>在Twitter上和<a href=\"https://twitter.com/jacobrelkin\" target=\"_blank\" rel=\"external\">@jacobrelkin</a>进行了一次<a href=\"https://twitter.com/mattjgalloway/status/154478264537194496\" target=\"_blank\" rel=\"external\">交流</a>之后，我决定写几篇博客关于ARC在神秘的面纱之下是如何运转和如何窥视其内部机制的方法。这篇博客我将解释ARC如何处理retain、release和autorelease这三个关键字对应的内部实现。</p>\n<p>我们通过定义一个类作为开始，如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ClassA</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSNumber</span> *foo;</div><div class=\"line\">\t<span class=\"keyword\">@end</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ClassA</span></span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">@synthesize</span> foo;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"keyword\">void</span>)changeFooDirect:(<span class=\"built_in\">NSNumber</span>*)inFoo &#123;</div><div class=\"line\">\t    foo = inFoo;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"keyword\">void</span>)changeFooSetter:(<span class=\"built_in\">NSNumber</span>*)inFoo &#123;</div><div class=\"line\">\t    <span class=\"keyword\">self</span>.foo = inFoo;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"built_in\">NSNumber</span>*)newNumber &#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSNumber</span> alloc] initWithInt:<span class=\"number\">10</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"built_in\">NSNumber</span>*)getNumber &#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSNumber</span> alloc] initWithInt:<span class=\"number\">10</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">@end</span>\t</div><div class=\"line\">\t\t</div><div class=\"line\">```</div></pre></td></tr></table></figure>\n<p>上述代码覆盖了ARC的几个重要的方面，包括直接访问成员变量与通过setter访问这两种方式的比较，以及当不同的函数名的函数返回某个对象时ARC将会如何添加autorelease属性。</p>\n<p>让我们首先关注直接访问成员变量与通过setter访问这两种方式的比较。如果我们编译上述代码并查看其汇编代码将会洞悉其中的奥秘。我决定使用ARMv7指令集而非x86指令集是因为前者更容易理解（纯属个人见解！）。我们可以使用编译参数-fobjc-arc和-fno-objc-arc来开启或关闭ARC。在这些实例中我使用的是优化等级是第3级，也就意味着编译器将会移除多余的代码，这些代码我们既不感兴趣同时还会阻碍我们理解核心代码（读者做一个练习，在不设置优化等级的前提下编译上述代码，看看结果是怎样的）。</p>\n<p>在非ARC的模式下采用如下指令进行编译上述代码：</p>\n<pre><code>$ /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/clang -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk -arch armv7 -fno-objc-arc -O3 -S -o - test-arc.m\n</code></pre><p>然后，查看changeFooDirect:和changeFooDirect:这个两个函数的汇编码：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooDirect:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooDirect:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">str </span>    <span class=\"built_in\">r2</span>, [<span class=\"built_in\">r0</span>, <span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">bx </span>     <span class=\"built_in\">lr</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooSetter:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooSetter:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>继续向前，看看在ARC模式下又是怎样的一副景象。采用如下所示的指令进行编译：</p>\n<pre><code>$ /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/clang -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk -arch armv7 -fobjc-arc -O3 -S -o - test-arc.m\n</code></pre><p>同样，此刻我们只关注changeFooDirect:和changeFooDirect:这两个函数：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooDirect:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooDirect:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r1</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r2</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_storeStrong</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooSetter:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooSetter:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>我们可以一目了然地看到两段汇编代码的不同之处。函数changeFooSetter:完全一样，而函数changeFooDirect:已经发生了变化：调用了一次objc_storeStrong函数。有意思的地方就是这里。如果我们查阅<a href=\"http://clang.llvm.org/docs/AutomaticReferenceCounting.html#runtime.objc_storeStrong\" target=\"_blank\" rel=\"external\">LLVM文档中objc_storeStrong函数的说明</a>将会看到objc_storeStrong函数里完成一个典型的变量交换，释放旧变量然后持有新变量。然而在非ARC模式下，这个变量仅仅是赋值，并没有任何释放或者持有操作。这就是我们期望的结果，感谢ARC！</p>\n<p>接下来是更有趣的地方，newNumber函数对比getNumber函数。这两个函数在非ARC模式下都返回一个引用计数为1的NSNumber对象，也就是说函数调用者持有返回对象。根据Cocoa的命名约定，这个结果似乎符合函数newNumber而不符合函数getNumber。我们期望看到函数getNumber中有调用autorelease。因此，让我们查看非ARC模式下的代码是怎样的：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA newNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA newNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC2_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA getNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA getNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC3_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>然后是ARC模式下：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA newNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA newNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC2_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA getNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA getNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC3_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autorelease</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>查看上述两段代码唯一不同点：ARC模式下getNumber:函数中调用了objc_autorelease。这也是我们所期望的，因为ARC模式能自动觉察到函数名是以关键字new还是关键字copy开头的，并为不属于这两种的情况的Get类函数的返回对象自动添加一次autorelease调用。棒极了！</p>\n<p>这里仅仅只展示了关于ARC在两种模式下如何工作的一小部分奥秘，与此同时，我希望这能激励读者能自己去探索ARC的内部实现而不是理所当然的接受现有的知识点。作为一个程序员，理解自己使用的工具的内部实现是很重要的。</p>\n"},{"title":"Cocoa RunLoop 系列之Configure Custom InputSource","url":"http://yoursite.com/2015/01/10/Cocoa RunLoop系列之配置自定义输入源/","content":"<p>在上一篇博客<a href=\"http://icebergcwp.com/2015/01/05/Cocoa%20RunLoop%20%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/\" target=\"_blank\" rel=\"external\">Cocoa RunLoop 系列之基础知识</a>介绍了RunLoop的InpuSource有两种：一种是基于Mach端口且由内核触发的source1，另外一种就是自定义且需要手动触发的source0。</p>\n<p>其中source0包括两种自定义形式：一种是Apple实现的自定义InputSource，提供了一系列接口，直接调用即可；另外一种就是由用户根据开发需要完全自定义实现。本文要介绍的就是后者。</p>\n<p>自定义InputSource在实际开发过程的中，可用于在子线程实现周期性且长时间的任务，通过自定义InputSource控制任务的执行。</p>\n<p>然而，实际开发中，大部分需要处理的InputSource都属于source1,少数需要自定义InputSource的情况也可以借助Apple的自定义InputSource函数接口来满足需求。因此，实际开发中几乎不需要用户配置自定义InputSource。既然如此，是否还有探索配置自定义InputSource的必要？我个人的答案是肯定的。通过配置自定InputSource可以窥探RunLoop的整个Routine的具体流程，而不是只停留在理论层面，有助于更深刻地理解RunLoop运行机制。</p>\n<p>下面进入正文，结合理论和源代码阐述配置自定义InputSource的全过程。</p>\n<h3 id=\"理论概述\"><a href=\"#理论概述\" class=\"headerlink\" title=\"理论概述\"></a>理论概述</h3><p>下图是Apple开发文档中介绍自定义InputSource运行流程图：</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Art/custominputsource.jpg\" alt=\"自定义InputSource流程图\"></p>\n<p>结合上图，总结一下几点：</p>\n<ol>\n<li>在工作线程创建一个自定义InputSource并部署到RunLoop中</li>\n<li>主线程中对线程的InputSource和RunLoop进行引用，用于后续操作</li>\n<li>主线程与工作线程共享一个指令集合，以保证指令同步</li>\n<li>通过主线程向InputSource中添加指令和数据</li>\n<li>指令添加结束后，主线程发送一个通知给InputSource，随后唤醒工作线程中的RunLoop</li>\n<li>工作线程的InputSource在接受到通知后，传送指令到RunLoop中等待处理</li>\n<li>RunLoop处理完成，进入休眠，等待下一次唤醒</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>以上述理论为基础，结合Apple文档提供的代码片段，实现了一个配置自定义InputSource的Demo,完整实例可以查看<a href=\"https://github.com/icebergcwp1990/CustomRunLoopInputSourceDemo\" target=\"_blank\" rel=\"external\">GitHub源码</a>。</p>\n<h4 id=\"创建并配置InputSource对象\"><a href=\"#创建并配置InputSource对象\" class=\"headerlink\" title=\"创建并配置InputSource对象\"></a>创建并配置InputSource对象</h4><p>IBRunLoopInputSource类用于管理和配置CFRunLoopSourceRef对象，以及包含一个指令集合。</p>\n<p>以下是初始化函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">IBRunLoopInputSource</span> ()</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">//InputSource对象</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopSourceRef</span> _runLoopSource;</div><div class=\"line\">    <span class=\"comment\">//当前指令</span></div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> _currCommand;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//指令集合</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span> , <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span> * commandInfo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">IBRunLoopInputSource</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - Init</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> <span class=\"keyword\">self</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//InputSource上下文 ，共有8个回调函数，目前只实现3个</span></div><div class=\"line\">        <span class=\"built_in\">CFRunLoopSourceContext</span> context = &#123;<span class=\"number\">0</span>, (__bridge <span class=\"keyword\">void</span> *)(<span class=\"keyword\">self</span>), <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>,</div><div class=\"line\">            &amp;RunLoopSourceScheduleRoutine,</div><div class=\"line\">            &amp;RunLoopSourceCancelRoutine,</div><div class=\"line\">            &amp;RunLoopSourcePerformRoutine&#125;;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//初始化自定义InputSource</span></div><div class=\"line\">        _runLoopSource = <span class=\"built_in\">CFRunLoopSourceCreate</span>(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, &amp;context);</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中可看的一共有8个与InputSource相关的回调函数，此处只配置了3个，分别是RunLoopSourceScheduleRoutine、RunLoopSourceCancelRoutine和RunLoopSourcePerformRoutine。这3个回调函数的实现会在后面进行介绍。</p>\n<p>对InputSource的基本操作：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//添加自定义InputSource到当前RunLoop</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addToCurrentRunLoop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CFRunLoopRef</span> runLoop = <span class=\"built_in\">CFRunLoopGetCurrent</span>();</div><div class=\"line\">    <span class=\"comment\">//添加到当前RunLoop的kCFRunLoopDefaultMode模式下</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopAddSource</span>(runLoop, _runLoopSource, kCFRunLoopDefaultMode);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//从指定RunLoop移除自定义InputSource</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)invalidateFromRunLoop:(<span class=\"built_in\">CFRunLoopRef</span> )runLoop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CFRunLoopRemoveSource</span>(runLoop, _runLoopSource, kCFRunLoopDefaultMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对指令集合的基本操作：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//添加指令到InputSource</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addCommand:(<span class=\"built_in\">NSInteger</span>)command withData:(<span class=\"keyword\">id</span>)data</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (data)</div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.commandInfo setObject:data forKey:@(command)];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//触发InputSource指令</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)fireCommand:(<span class=\"built_in\">NSInteger</span>)command onRunLoop:(<span class=\"built_in\">CFRunLoopRef</span>)runloop</div><div class=\"line\">&#123;</div><div class=\"line\">    _currCommand = command;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//通知InputSource准备触发指令</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopSourceSignal</span>(_runLoopSource);</div><div class=\"line\">    <span class=\"comment\">//唤醒InputSource所在的RunLoop，该RunLoop必须有的InputSource所在的RunLoop</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopWakeUp</span>(runloop);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的代码可看的，正如之前理论概述总讲的顺序：发出指令之后，先通知InputSource，再唤醒其所在的RunLoop。</p>\n<p>指令通过RunLoop循环，触发相关的回调函数，最终派发给IBRunLoopInputSource对象，然后再处理。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//执行InputSource指令</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSourceCommands</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//根据指令获得对应的数据</span></div><div class=\"line\">    <span class=\"keyword\">id</span> data = [<span class=\"keyword\">self</span>.commandInfo objectForKey:@(_currCommand)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!data) &#123;</div><div class=\"line\">        data = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"Empty data for command : %ld\"</span> , _currCommand ];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//通过代理进行指令数据处理</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.delegate &amp;&amp; [<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(inputSourceForTest:)]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.delegate inputSourceForTest:data];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里，也许有同学感到困惑：为什么绕了一大圈，最终指令执行的代码还是由IBRunLoopInputSource对象来处理，不如直接把指令处理的函数接口公开，直接调用好了？我之前也有类似的困惑，后面仔细一想才想通。可以从两个角度来解答这个困惑：</p>\n<ol>\n<li>自定义InputSource的一个主要目的在于在子线程中进行周期性的任务</li>\n<li>假设在主线程中直接调用，那么执行的代码也是在主线程，背离了初衷。而通过子线程的RunLoop派发之后，指令对应的处理执行是在子线程</li>\n<li>RunLoop的智能休眠配合自定义InputSource能将子线程长时间执行的情况下的资源开销降到最低</li>\n</ol>\n<p>上述3点恰恰的自定义InputSource的精华所在。</p>\n<h4 id=\"创建并配置InputSourceContext对象\"><a href=\"#创建并配置InputSourceContext对象\" class=\"headerlink\" title=\"创建并配置InputSourceContext对象\"></a>创建并配置InputSourceContext对象</h4><p>IBRunLoopContext类是一个容器类，用于管理InputSource与RunLoop之间的关系。Demo中的代码实现的最简单的一对一的关系，也可以实现一对多的关系，即一个InputSource关联多个RunLoop。</p>\n<p>初始化如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithSource:(IBRunLoopInputSource *)runLoopSource andLoop:(<span class=\"built_in\">CFRunLoopRef</span> )runLoop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//强引用InputSource和InputSource所在的RunLoop</span></div><div class=\"line\">        _runLoopInputSource = runLoopSource;</div><div class=\"line\">        </div><div class=\"line\">        _runLoop = runLoop;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当InputSource加入RunLoop中之后，会触发相关的回调函数。在前文中提到，在创建InputSource的时候Demo中配置了3个与InputSource相关的回调函数，具体实现如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//inputsource部署回调</span></div><div class=\"line\"><span class=\"keyword\">void</span> RunLoopSourceScheduleRoutine (<span class=\"keyword\">void</span> *info, <span class=\"built_in\">CFRunLoopRef</span> rl, <span class=\"built_in\">CFStringRef</span> mode)</div><div class=\"line\">&#123;</div><div class=\"line\">    IBRunLoopInputSource* inputSource = (__bridge IBRunLoopInputSource*)info;</div><div class=\"line\">    <span class=\"comment\">//创建一个context，包含当前输入源和RunLoop</span></div><div class=\"line\">    IBRunLoopContext * theContext = [[IBRunLoopContext alloc] initWithSource:inputSource andLoop:rl];</div><div class=\"line\">    <span class=\"comment\">//将context传入主线程建立强引用，用于后续操作</span></div><div class=\"line\">    [(AppDelegate *)[<span class=\"built_in\">NSApp</span> delegate] performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(registerSource:)</div><div class=\"line\">                          withObject:theContext waitUntilDone:<span class=\"literal\">NO</span>];</div><div class=\"line\">    <span class=\"comment\">//InputSource弱引用context，因为context已经强引用InputSource，避免循环引用，用于后续移除操作</span></div><div class=\"line\">    inputSource.context = theContext;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//inputsource执行任务回调</span></div><div class=\"line\"><span class=\"keyword\">void</span> RunLoopSourcePerformRoutine (<span class=\"keyword\">void</span> *info)</div><div class=\"line\">&#123;</div><div class=\"line\">    IBRunLoopInputSource*  inputSource = (__bridge IBRunLoopInputSource*)info;</div><div class=\"line\">    <span class=\"comment\">//执行InputSource相关的处理</span></div><div class=\"line\">    [inputSource performSourceCommands];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//inputsource移除回调</span></div><div class=\"line\"><span class=\"keyword\">void</span> RunLoopSourceCancelRoutine (<span class=\"keyword\">void</span> *info, <span class=\"built_in\">CFRunLoopRef</span> rl, <span class=\"built_in\">CFStringRef</span> mode)</div><div class=\"line\">&#123;</div><div class=\"line\">    IBRunLoopInputSource* inputSource = (__bridge IBRunLoopInputSource*)info;</div><div class=\"line\">    <span class=\"comment\">//移除主线程中InputSource对应的Context引用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (inputSource.context)</div><div class=\"line\">    &#123;</div><div class=\"line\">        [(AppDelegate *)[<span class=\"built_in\">NSApp</span> delegate] performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(removeSource:)</div><div class=\"line\">                                                          withObject:inputSource.context waitUntilDone:<span class=\"literal\">YES</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码分别是InputSource部署、执行和移除相关的回调函数：</p>\n<ol>\n<li>部署：在InputSource部署到RunLoop之后，触发回调函数RunLoopSourceScheduleRoutine，将inputSource对象和RunLoop打包成一个context，通过Apple实现的自定义InputSource函数，发送给主线程，用于发送指令</li>\n<li>执行：执行对应的指令</li>\n<li>移除：在主线程中的context引用</li>\n</ol>\n<h4 id=\"创建并配置工作线程\"><a href=\"#创建并配置工作线程\" class=\"headerlink\" title=\"创建并配置工作线程\"></a>创建并配置工作线程</h4><p>IBRunLoopInputSourceThread类用于配置RunLoop和InputSource。</p>\n<p>线程入口函数实现如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)main</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">      </div><div class=\"line\">        <span class=\"comment\">//创建InputSource</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.inputSource = [[IBRunLoopInputSource alloc] init];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.inputSource setDelegate:<span class=\"keyword\">self</span>];</div><div class=\"line\">        <span class=\"comment\">//添加InputSource到当前线程RunLoop</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.inputSource addToCurrentRunLoop];</div><div class=\"line\">        <span class=\"comment\">//配置RunLoop监听器</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> configureRunLoopObserver];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"keyword\">self</span>.cancelled) &#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">//作为对照，执行线程其他非InputSource任务</span></div><div class=\"line\">            [<span class=\"keyword\">self</span> doOtherTask];</div><div class=\"line\">            <span class=\"comment\">//切入指定模式RunLoop，且只执行一次</span></div><div class=\"line\">            [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] runMode:<span class=\"built_in\">NSDefaultRunLoopMode</span> beforeDate:[<span class=\"built_in\">NSDate</span> distantFuture]];</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在子线程中的入口函数中，创建InputSource并加入RunLoop，随后启动RunLoop。这里一定要在while循环中切换RunLoop，否则RunLoop只会执行一次便退出。原因在于[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]函数只会执行一次RunLoop，如果InputSource未添加或者已处理完或者超时会立即退出RunLoop。</p>\n<h4 id=\"完善主线程配置\"><a href=\"#完善主线程配置\" class=\"headerlink\" title=\"完善主线程配置\"></a>完善主线程配置</h4><p>主线程的配置在AppDelegate类中实现，包括创建工作线程、管理InputSource引用以及添加指令和发送通知。</p>\n<p>管理InputSource引用：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册子线程中InputSource对应的context,用于后续通信</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)registerSource:(IBRunLoopContext*)sourceInfo</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.sourcesToPing addObject:sourceInfo];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//移除子线程中InputSource对应的context</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)removeSource:(IBRunLoopContext*)sourceInfo</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.sourcesToPing enumerateObjectsUsingBlock:^(<span class=\"keyword\">id</span> obj, <span class=\"built_in\">NSUInteger</span> idx, <span class=\"built_in\">BOOL</span> *stop) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> ([obj isEqual:sourceInfo])</div><div class=\"line\">        &#123;</div><div class=\"line\">           [<span class=\"keyword\">self</span>.sourcesToPing removeObject:obj];</div><div class=\"line\">            *stop = <span class=\"literal\">YES</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加指令和发送通知</p>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> - (<span class=\"keyword\">void</span>)addCommand:(<span class=\"built_in\">NSInteger</span>)command withData:(<span class=\"keyword\">id</span>)data</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSAssert</span>([<span class=\"keyword\">self</span>.sourcesToPing count] !=  <span class=\"number\">0</span>, <span class=\"string\">@\"Empty Input Source...\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.sourcesToPing.count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//此处默认取第一个用于测试，可优化</span></div><div class=\"line\">        IBRunLoopContext *runLoopContext = [<span class=\"keyword\">self</span>.sourcesToPing objectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">        IBRunLoopInputSource *inputSource = runLoopContext.runLoopInputSource;</div><div class=\"line\">        <span class=\"comment\">//向数据源添加指令</span></div><div class=\"line\">        [inputSource addCommand:command withData:data];</div><div class=\"line\">        <span class=\"comment\">//添加后并非要立刻触发，此处仅用于测试</span></div><div class=\"line\">        [inputSource fireCommand:command onRunLoop:runLoopContext.runLoop];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在写上一篇博客的时候，对与配置自定义InputSource还尚不了解。利用碎片时间和工作间隙仔细阅读了Apple开发文档的相关资料，并且在网上查阅了同行的一些博客之后，决定自己动手写了一个Demo。写Demo的过程的遇到一些新的困惑，随着Demo的完成，大部分困惑也随之而解。</p>\n"},{"title":"Cocoa RunLoop 系列之基础知识","url":"http://yoursite.com/2015/01/05/Cocoa RunLoop 系列之基础知识/","content":"<p>这篇博客主要结合Apple开发者文档和个人的理解，写的一篇关于Cocoa RunLoop基本知识点的文章。在文档的基础上，概况和梳理了RunLoop相关的知识点。</p>\n<h3 id=\"一、Event-Loop-amp-Cocoa-RunLoop\"><a href=\"#一、Event-Loop-amp-Cocoa-RunLoop\" class=\"headerlink\" title=\"一、Event Loop &amp; Cocoa RunLoop\"></a>一、Event Loop &amp; Cocoa RunLoop</h3><h4 id=\"宏观上：Event-Loop\"><a href=\"#宏观上：Event-Loop\" class=\"headerlink\" title=\"宏观上：Event Loop\"></a>宏观上：Event Loop</h4><ol>\n<li>RunLoop是一个用于循环监听和处理事件或者消息的模型，接收请求，然后派发给相关的处理模块，wikipedia上有更为全面的介绍：<a href=\"https://en.wikipedia.org/wiki/Event_loop\" target=\"_blank\" rel=\"external\">Event_loop</a></li>\n<li>Cocoa RunLoop属于Event Loop模型在Mac平台的具体实现</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Event_loop#Implementations\" target=\"_blank\" rel=\"external\">其他平台的类似实现</a>：X Window程序，Windows程序 ，Glib库等</li>\n</ol>\n<h4 id=\"微观上-Cocoa-RunLoop\"><a href=\"#微观上-Cocoa-RunLoop\" class=\"headerlink\" title=\"微观上: Cocoa RunLoop\"></a>微观上: Cocoa RunLoop</h4><ol>\n<li>Cocoa RunLoop本质上就是一个对象，提供一个入口函数启动事件循环，在满足特点条件后才会退出。</li>\n<li>Cocoa RunLoop与普通while/for循环不同的是它能监听处理事件和消息，能智能休眠和被唤醒，这些功能的其实现依赖于Mac Port。</li>\n</ol>\n<h3 id=\"二、-Cocoa-RunLoop的内部结构\"><a href=\"#二、-Cocoa-RunLoop的内部结构\" class=\"headerlink\" title=\"二、 Cocoa RunLoop的内部结构\"></a>二、 Cocoa RunLoop的内部结构</h3><p>但凡说到Cocoa RunLoop内部结构，都离不开下面这张图，来源于Apple开发者文档</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Art/runloop.jpg\" alt=\"图1-1 RunLoop结构图\"></p>\n<p>结合上图，可将RunLoop架构划分为四个部分：</p>\n<ol>\n<li>事件源</li>\n<li>运行模式</li>\n<li>循环机制</li>\n<li>执行反馈</li>\n</ol>\n<h4 id=\"1-事件源\"><a href=\"#1-事件源\" class=\"headerlink\" title=\"1. 事件源\"></a>1. 事件源</h4><p>Cocoa RunLoop接受的事件源分为两种类型：Input Sources 和 Timer Sources</p>\n<h5 id=\"1-1-Input-Sources\"><a href=\"#1-1-Input-Sources\" class=\"headerlink\" title=\"1.1. Input Sources\"></a>1.1. Input Sources</h5><p>Input Sources通过异步派发的方式将事件转送到目标线程，事件类别分为两大块：</p>\n<ul>\n<li><p>Port-Based Sources ：</p>\n<p>  基于Mach端口的事件源，Cocoa和Core Foundation这两个框架已经提供了内部支持，只需要调用端口相关的对象或者函数就能提供端口进行通信。比如：将NSPort对象部署到RunLoop中，实现两个线程的循环通信。</p>\n</li>\n<li><p>Custom Input Sources ：</p>\n<ul>\n<li>用户自定义的输入源：使用Core Foundation框架中CFRunLoopSourceRef对象的相关函数实现。具体实现可以查看另外一篇博客：<a href=\"http://icebergcwp.com/2015/01/10/Cocoa%20RunLoop%E7%B3%BB%E5%88%97%E4%B9%8B%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%BA%90/\" target=\"_blank\" rel=\"external\">Cocoa RunLoop 系列之Configure Custom InputSource</a></li>\n<li><p>Cocoa Perform Selector Sources：Cocoa框架内部实现的自定义输入源，可以跨线程调用，实现线程见通信，有点类似于Port-Based事件源，不同的是这种事件源只在RunLoop上部署一次，执行结束后便会自动移除。如果目标线程中没有启动RunLoop也就意味着无法部署这类事件源，因此不会得到预期的结果。</p>\n<p>  使用Cocoa自定义事件源的函数接口，如下：</p>\n</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//部署在主线程</span></div><div class=\"line\">\t<span class=\"comment\">//参数列表：Selector:事件源处理函数,Selector参数,是否阻塞当前线程,指定RunLoop模式</span></div><div class=\"line\">\tperformSelectorOnMainThread:withObject:waitUntilDone:</div><div class=\"line\">performSelectorOnMainThread:withObject:waitUntilDone:modes:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//部署在指定线程</span></div><div class=\"line\"><span class=\"comment\">//参数列表：Selector:事件源处理函数,指定线程,Selector参数,是否阻塞当前线程,指定RunLoop模式</span></div><div class=\"line\">permSelector:onThread:withObject:waitUntilDone:</div><div class=\"line\">performSelector:onThread:withObject:waitUntilDone:modes:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//部署在当前线程</span></div><div class=\"line\"><span class=\"comment\">//参数列表：Selector:事件源处理函数,Selector参数,延时执行时间,指定RunLoop模式</span></div><div class=\"line\">performSelector:withObject:afterDelay:</div><div class=\"line\">performSelector:withObject:afterDelay:inModes:</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//撤销某个对象通过函数performSelector:withObject:afterDelay:部署在当前线程的全部或者指定事件源</span></div><div class=\"line\">cancelPreviousPerformRequestsWithTarget:</div><div class=\"line\">cancelPreviousPerformRequestsWithTarget:selector:object:</div></pre></td></tr></table></figure>\n<p>综上，Input Sources包括基于Mach端口的事件源和自定义的事件源，二者的唯一区别在于被触发的方式：前者是由内核自动触发，后者则需要在其他线程中手动触发。</p>\n</li>\n</ul>\n<h5 id=\"1-2-Timer-Sources\"><a href=\"#1-2-Timer-Sources\" class=\"headerlink\" title=\"1.2. Timer Sources\"></a>1.2. Timer Sources</h5><p> 不同于Input Sources的异步派发，Timer Source是通过同步派发的方式，在预设时间到达时将事件转送到目标线程。这种事件源可用于线程的自我提醒功能，实现周期性的任务。</p>\n<ul>\n<li>如果RunLoop当前运行模式没有添加Time Sources，则在RunLoop中部署的定时器不会被执行。</li>\n<li>设定的间隔时间与真实的触发时间之间没有必然联系，定时器会根据设定的间隔时间周期性的派发消息到RunLoop，但是真实的触发时间由RunLoop决定，假设RunLoop当前正在处理其一个长时间的任务，则触发时间会被延迟，如果在最终触发之前Timer已经派发了N个消息，RunLoop也只会当做一次派发对待，触发一次对应的处理函数。</li>\n</ul>\n<h4 id=\"2-运行模式\"><a href=\"#2-运行模式\" class=\"headerlink\" title=\"2. 运行模式\"></a>2. 运行模式</h4><p>运行模式类似于一个过滤器，用于屏蔽那些不关心的事件源，让RunLoop专注于监听和处理指定的事件源和RunLoop Observer。</p>\n<p>CFRunLoopMode 和 CFRunLoop 的数据结构大致如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> __CFRunLoop &#123;</div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _commonModes;     <span class=\"comment\">// Set</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _commonModeItems; <span class=\"comment\">// Set&lt;Source/Observer/Timer&gt;</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopModeRef</span> _currentMode;    <span class=\"comment\">// Current Runloop Mode</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _modes;           <span class=\"comment\">// Set</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> __CFRunLoopMode &#123;</div><div class=\"line\">    <span class=\"built_in\">CFStringRef</span> _name;            <span class=\"comment\">// Mode Name, 例如 @\"kCFRunLoopDefaultMode\"</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _sources0;    <span class=\"comment\">// Set</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _sources1;    <span class=\"comment\">// Set</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableArrayRef</span> _observers; <span class=\"comment\">// Array</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableArrayRef</span> _timers;    <span class=\"comment\">// Array</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结合以上源码，总结以下几点：</p>\n<ul>\n<li>每种模式通过name属性作为标识。</li>\n<li>一种运行模式（Run Loop Mode）就是一个集合，包含需要监听的事件源Input Sources和Timer Soueces以及需要触发的RunLoop observers。</li>\n<li>Cocoa RunLoop包含若干个Mode，调用RunLoop是指定的Mode称之为CurrentMode。RunLoop可以在不同的Mode下切换，切换时退出CurrentMode,并保存相关上下文，再进入新的Mode。</li>\n<li>在启动Cocoa RunLoop是必须指定一种的运行模式，且如果指定的运行模式没有包含事件源或者observers，RunLoop会立刻退出。</li>\n<li>CFRunLoop结构中的commonModes是Mode集合,将某个Mode的name添加到commonModes集合中，表示这个Mode具有“common”属性。</li>\n<li>CFRunLoop结构中的commonModeItems则是共用源的集合，包括事件源和执行反馈。这些共用源会被自动添加到具有“common”属性的Mode中。</li>\n</ul>\n<p><strong> Note </strong> : 不同的运行模式区别在于事件源的不同，比如来源于不同端口的事件和端口事件与Timer事件。不能用于区分不同的事件类型，比如鼠标消息事件和键盘消息事件，因为这两种事件都属于基于端口的事件源。</p>\n<p>以下是苹果预定义好的一些运行模式：</p>\n<ul>\n<li>NSDefaultRunLoopMode //默认的运行模式，适用于大部分情况</li>\n<li>NSConnectionReplyMode //Cocoa库用于监听NSConnection对象响应，开发者很少使用</li>\n<li>NSModalPanelRunLoopMode //模态窗口相关事件源</li>\n<li>NSEventTrackingRunLoopMode  //鼠标拖拽或者屏幕滚动时的事件源</li>\n<li>NSRunLoopCommonModes //用于操作RunLoop结构中commonModes和commonModeItems两个属性</li>\n</ul>\n<h4 id=\"3-循环机制\"><a href=\"#3-循环机制\" class=\"headerlink\" title=\"3. 循环机制\"></a>3. 循环机制</h4><p>循环机制涉及两方面：</p>\n<h5 id=\"3-1-RunLoop与线程之间的关系\"><a href=\"#3-1-RunLoop与线程之间的关系\" class=\"headerlink\" title=\"3.1. RunLoop与线程之间的关系\"></a>3.1. RunLoop与线程之间的关系</h5><p>Apple文档中提到:开发者不需要手动创建RunLoop对象，每个线程包括主线程都关联了一个RunLoop对象。除了主线程的RunLoop在程序启动时被开启，其他线程的RunLoop都需要手动开启。</p>\n<p>待解决的疑问：</p>\n<ul>\n<li>线程中的RunLoop是一直存在还是需要时再创建？</li>\n<li>线程与RunLoop的是如何建立联系的？</li>\n<li>线程与RunLoop对象是否是一一对应的关系？</li>\n</ul>\n<h5 id=\"3-2-RunLoop事件处理流程\"><a href=\"#3-2-RunLoop事件处理流程\" class=\"headerlink\" title=\"3.2. RunLoop事件处理流程\"></a>3.2. RunLoop事件处理流程</h5><p>弄清楚RunLoop内部处理逻辑是理解RunLoop的关键，将单独写一篇博客进行分析。</p>\n<p>待解决的疑问：</p>\n<ul>\n<li>RunLoop如何处理不同事件源？</li>\n<li>RunLoop不同模式切换是如何实现的？</li>\n</ul>\n<p>以上两方面，将在下一篇博客<a href=\"\">Cocoa RunLoop 系列之源码解析</a>中结合源代码来找到答案。</p>\n<h4 id=\"4-执行反馈\"><a href=\"#4-执行反馈\" class=\"headerlink\" title=\"4. 执行反馈\"></a>4. 执行反馈</h4><p>RunLoop Observers机制属于RunLoop一个反馈机制，将RunLoop一次循环划分成若干个节点，当执行到对应的节点调用相应的回调函数，将RunLoop当前的执行状态反馈给用户。</p>\n<ul>\n<li>用户可以通过Core Foundation框架中的CFRunLoopObserverRef注册 observers。</li>\n<li><p>监听节点：</p>\n<ul>\n<li>The entrance to the run loop. //RunLoop启动</li>\n<li>When the run loop is about to process a timer. //即将处理Timer事件源</li>\n<li>When the run loop is about to process an input source. //即将处理Input事件源</li>\n<li>When the run loop is about to go to sleep. //即将进入休眠</li>\n<li>When the run loop has woken up, but before it has processed the event that woke it up. //重新被唤醒，且在处理唤醒事件之前</li>\n<li>The exit from the run loop. //退出RunLoop</li>\n</ul>\n</li>\n<li><p>监听类别分为两种：一次性和重复监听。</p>\n</li>\n</ul>\n<h3 id=\"三、何时使用RunLoop\"><a href=\"#三、何时使用RunLoop\" class=\"headerlink\" title=\"三、何时使用RunLoop\"></a>三、何时使用RunLoop</h3><p>由于主线程的RunLoop在程序启动时被自动创建并执行，因此只有在其他线程中才需要手动启动RunLoop。很多情况下，对于RunLoop的使用多数情况是在主线程中，包括进行RunLoop模式切换，设置RunLoop Observer等。</p>\n<p>在非主线程中，以下几种情况适用于RunLoop:</p>\n<ul>\n<li>使用基于端口或者自定义的事件源与其他线程进行通信。</li>\n<li>需要在当前线程中使用Timer，必须部署才RunLoop中才有效。</li>\n<li>在目标线程中调用performSelector… 函数，因为本质上使用了Cocoa自定义的事件源，依赖于RunLoop才能被触发。</li>\n<li>线程需要进行周期性的任务，需要长时间存在，而非执行一次。</li>\n</ul>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>一直以来，RunLoop对我来说都属于一个比较模糊的概念，在实际编程中也有用到RunLoop的一些功能，确实感觉到很强大，但是仅仅停留在应用层面，并不是很理解具体含义。因此，为了更好的使用RunLoop，有必要研究和梳理RunLoop相关的知识点。</p>\n"},{"title":"Objective-C Runtime 解析","url":"http://yoursite.com/2015/01/01/objective-c_runtime_解析/","content":"<p>这是一篇译文，作为一个英语水平处于半吊子的理科男，因此一定存在不尽原意的地方，翻译此文纯属个人喜好，希望能得到大家的指点和反馈，读者如有兴趣的话可以<a href=\"http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html\" target=\"_blank\" rel=\"external\">查看原文</a>。</p>\n<p><strong>以下是正文：</strong></p>\n<p>一般而言，当人们刚接触Cocoa/Objective-C的时候，运行时机制（Objective-C Runtime）是最容易被忽视的特征之一。究其原因在于Objective-C是一门简单的语言，花费几个小时便能入门，此后，新手们通常会将大部分的时间和精力用于研究Cocoa Framework以及如何使用它。然而，每一个人至少应该清楚运行时是如何运转的，而不仅仅停留在编译方式的认知层面，如：[target doMethodWith:var];编译之后变成object_msgSend(target,@selector(doMethodWith:),var1)。了解运行时机制的工作原理可以帮助你进一步理解Objective-C这门语言以及你编写的App的运转流程。我相信各个水平层次的Mac/iPhone开发者都会在研究运行时机制的过程中有所收获。</p>\n<h3 id=\"Objective-C-Runtime库是开源的\"><a href=\"#Objective-C-Runtime库是开源的\" class=\"headerlink\" title=\"Objective-C Runtime库是开源的\"></a>Objective-C Runtime库是开源的</h3><p>Objective-C Runtime库是开源的，你随时可以在<a href=\"http://opensource.apple.com\" target=\"_blank\" rel=\"external\">源代码</a>上查阅。事实上，查阅源代码是弄清楚Objective-C原理的首选途径之一，胜过阅读苹果开发文档。下载最新版本的源代码<a href=\"http://opensource.apple.com/source/objc4/objc4-680/\" target=\"_blank\" rel=\"external\">点击我</a>。</p>\n<h3 id=\"动态-amp-静态-语言\"><a href=\"#动态-amp-静态-语言\" class=\"headerlink\" title=\"动态 &amp; 静态 语言\"></a>动态 &amp; 静态 语言</h3><p>Objective-C是基于运行时的语言，意味着它会尽可能地将决定代码执行逻辑的操作从编译&amp;链接阶段延迟到代码被执行的阶段。这将给你带来很大的灵活性，因此如果有必要的话你可以将消息重定向到合适的对象，或者你甚至可以交换两个方法实现，等等。实现上述功能需要运行时具备审查对象可以响应哪些请求和不能响应哪些请求然后准确地派发消息的能力。如果我们将Objective-C这一特性对比C语言。C语言程序运行始于main()函数，基于至上而下的设计执行你的逻辑和调用你实现的函数。C结构体不能通过发送请求到其他的结构体来执行某个函数。很可能你会编写一段C语言代码，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt; stdio.h &gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码经过编译器编译、优化，然后将优化后的代码转化成汇编语言：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">.text</span></div><div class=\"line\"> <span class=\"meta\">.align</span> <span class=\"number\">4</span>,<span class=\"number\">0x90</span></div><div class=\"line\"> .globl _main</div><div class=\"line\"><span class=\"symbol\">_main</span>:</div><div class=\"line\"><span class=\"symbol\">Leh_func_begin1</span>:</div><div class=\"line\">\t<span class=\"keyword\">pushq </span>%rbp</div><div class=\"line\"><span class=\"symbol\">Llabel1</span>:</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rsp, %rbp</div><div class=\"line\"><span class=\"symbol\">Llabel2</span>:</div><div class=\"line\"> <span class=\"keyword\">subq </span><span class=\"number\">$16</span>, %rsp</div><div class=\"line\"><span class=\"symbol\">Llabel3</span>:</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rsi, %rax</div><div class=\"line\"> <span class=\"keyword\">movl </span>%edi, %ecx</div><div class=\"line\"> <span class=\"keyword\">movl </span>%ecx, -<span class=\"number\">8</span>(%rbp)</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rax, -<span class=\"number\">16</span>(%rbp)</div><div class=\"line\"> xorb %al, %al</div><div class=\"line\"> leaq LC(%rip), %rcx</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rcx, %rdi</div><div class=\"line\"> call _printf</div><div class=\"line\"> <span class=\"keyword\">movl </span><span class=\"number\">$0</span>, -<span class=\"number\">4</span>(%rbp)</div><div class=\"line\"> <span class=\"keyword\">movl </span>-<span class=\"number\">4</span>(%rbp), %eax</div><div class=\"line\"> <span class=\"keyword\">addq </span><span class=\"number\">$16</span>, %rsp</div><div class=\"line\"> <span class=\"keyword\">popq </span>%rbp</div><div class=\"line\"> ret</div><div class=\"line\"><span class=\"symbol\">Leh_func_end1</span>:</div><div class=\"line\"> .cstring</div><div class=\"line\"><span class=\"symbol\">LC</span>:</div><div class=\"line\"> <span class=\"meta\">.asciz</span> <span class=\"string\">\"Hello World!\"</span></div></pre></td></tr></table></figure>\n<p>随后链接相关的库生成一个可执行文件。对比于Objective-C，虽然代码处理过程很相似，但是编译后的代码取决于Objective-C Runtime库。当我们最初学习Objective-C时被告知中括号里面的代码是如何被处理的，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> doSomethingWithVar:var1];</div></pre></td></tr></table></figure>\n<p>被转变成</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(doSomethingWithVar:),var1);</div></pre></td></tr></table></figure>\n<p>除此之外我们并不真的知道运行时机制是如何工作的，也许很久以后会知道。</p>\n<h3 id=\"何为Runtime-运行时\"><a href=\"#何为Runtime-运行时\" class=\"headerlink\" title=\"何为Runtime(运行时)\"></a>何为Runtime(运行时)</h3><p>Objective-C Runtime就是一个Runtime库，主要有C语言&amp;汇编语言编写而成，在C语言的基础上加上面向对象的功能之后就成为了Objective-C语言。这意味着运行时机制负责加载类，方法派发，方法传达等操作。本质上而言，运行时机制提供了所有的需要的结构用以支持Objective-C的面向对象编程。</p>\n<h3 id=\"Objective-C-运行时术语\"><a href=\"#Objective-C-运行时术语\" class=\"headerlink\" title=\"Objective-C 运行时术语\"></a>Objective-C 运行时术语</h3><p>在进一步深入之前，让我们扫清一些术语的障碍，这样使我们处于同一立场。就MacOS X App &amp; iPhone OS App开发者所关心而言，这里有两种运行时机制: Modern Runtime和Legacy Runtime。Modern Runtime适用于所有64位MacOS应用和所有iPhone应用，Legacy Runtime适用于所有的32位MacOS应用。运行时机制中有两种类型的函数：实例函数（以‘-’符号开头如-(void)doFoo）;类函数（以‘+’开头如+(id)alloc）。两种函数都与C函数很像，包含一组实现某个任务的代码，如下所示</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">NSString</span> *)movieTitle</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@\"Futurama: Into the Wild Green Yonder\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>选择器：在Objective-C中，选择器本质上是一个C数据结构体用以标识一个对象将要执行的函数。在运行时机制中的定义如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_selector  *SEL;</div></pre></td></tr></table></figure>\n<p>使用方式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEL aSel = <span class=\"keyword\">@selector</span>(movieTitle);</div></pre></td></tr></table></figure>\n<p>消息调用：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[target getMovieTitleForObject:obj];</div></pre></td></tr></table></figure>\n<p>Objective-C消息就是中括号[]里面的所有东西，包括消息的接受者target，调用的函数getMovieTileForObject以及所有发送的参数obj。消息调用虽然样式上类似于c函数调用但是实现却不同。实际上，当你发送一个消息给一个对象并意味着函数会被执行。对象可能会检测谁是消息的发送者，基于此再决定执行一个不同的函数或者转送消息给其他不同的目标对象。如果你查看运行时机制里的类定义，你将会看到如下所示的内容：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object &#123;</div><div class=\"line\">    Class isa;</div><div class=\"line\">&#125; *<span class=\"keyword\">id</span>;</div></pre></td></tr></table></figure>\n<p>这里有几个要点。首先是类Class和对象Object都有一个对应的结构体。所有的objc_object结构体都有一个类指针isa，这就是我们所说的“<strong>isa指针</strong>”。运行时机制需要通过检测一个对象的isa指针去查看对象的类别，然后查看该对象是否能响应你当前发送过来的消息。接下来是id指针，id指针默认不属于任何类别只表明指向的是一个Objective-C对象。对于id指针指向的对象，你可以获知对象的类别，查看对象是否能响应某个函数等等，然后当你具体了解了id指针指向的对象之后便可以更好的使用该对象。你同样可以查看LLVM/Clang文档中Blocks的定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Block_literal_1 &#123;</div><div class=\"line\">    <span class=\"keyword\">void</span> *isa; <span class=\"comment\">// initialized to &amp;_NSConcreteStackBlock or &amp;_NSConcreteGlobalBlock</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flags;</div><div class=\"line\">    <span class=\"keyword\">int</span> reserved; </div><div class=\"line\">    <span class=\"keyword\">void</span> (*invoke)(<span class=\"keyword\">void</span> *, ...);</div><div class=\"line\">    <span class=\"keyword\">struct</span> Block_descriptor_1 &#123;</div><div class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> reserved; <span class=\"comment\">// NULL</span></div><div class=\"line\">     <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">// sizeof(struct Block_literal_1)</span></div><div class=\"line\"> <span class=\"comment\">// optional helper functions</span></div><div class=\"line\">     <span class=\"keyword\">void</span> (*copy_helper)(<span class=\"keyword\">void</span> *dst, <span class=\"keyword\">void</span> *src);</div><div class=\"line\">     <span class=\"keyword\">void</span> (*dispose_helper)(<span class=\"keyword\">void</span> *src); </div><div class=\"line\">    &#125; *descriptor;</div><div class=\"line\">    <span class=\"comment\">// imported variables</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Block结构的设计兼容于运行时机制。因此Block被视为一个Objective-C对象，所有也就可以响应消息如-retain,-release,-copy等等。</p>\n<p>IMP:Method Implementations</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">id</span> (*IMP)(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>,SEL _cmd,...);</div></pre></td></tr></table></figure>\n<p>IMP是一个函数指针，由编译器生成且指向函数的实现内容。如果你目前是一个Objective-C新手则浅尝辄止，但是我们随后会了解运行时机制是如何调用你的函数的。</p>\n<p>Objective-C类：类里面是什么？在Objective-C中，类实现基本上类似于：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//vars</span></div><div class=\"line\"><span class=\"built_in\">NSInteger</span> counter;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//methods</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)doFoo;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>但是类在运行时机制中定义远不如此，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n<p>我们可以看到一个类中声明了一个父类的引用，类名，实例变量列表，方法列表，缓存以及协议列表。当响应发送给类或对象的消息时，运行时机制需要用到这些信息。</p>\n<h3 id=\"类定义对象同时类本身也是对象？何解？\"><a href=\"#类定义对象同时类本身也是对象？何解？\" class=\"headerlink\" title=\"类定义对象同时类本身也是对象？何解？\"></a>类定义对象同时类本身也是对象？何解？</h3><p>之前我提到过在Objective-C中类本身也是对象，运行时机制通过引入元类（Meta Class）来处理类对象。当你发送一个类似于[NSObject alloc]消息的时候，实际上是发送一个消息给类对象，此时将类对象视为元类的实例对待，而元类本身也是一个根元类（Root Meta Class）的实例。While if you say subclass from NSObject, your class points to NSObject as it’s superclass. However all meta classes point to the root metaclass as their superclass. (原文似乎表达观点有误，暂不翻译)。所有的元类仅有一个类函数列表（不同于类处理实例函数列表，还有变量列表和协议列表等等）。因此，当你发送一个消息给类对象时，如[NSObject alloc]，objc_megSend()实际上是搜索元类的函数列表查看是否有响应的函数，如果存在则在该类对象上执行该函数。</p>\n<h3 id=\"为什么继承Apple的原生类？\"><a href=\"#为什么继承Apple的原生类？\" class=\"headerlink\" title=\"为什么继承Apple的原生类？\"></a>为什么继承Apple的原生类？</h3><p>在你刚开始Cocoa编程时，相关教程都是说创建一个类继承于NSObject然后开始编写自己的代码，简单地继承Apple的原生类会让你获益匪浅。其中一个你甚至意识不到的好处就是让你创建的类运行于运行时机制之上。当我们新建一个实例对象，如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyObject *object = [[MyObject alloc] init];</div></pre></td></tr></table></figure>\n<p>最先被执行的消息是+alloc。如果你<a href=\"https://developer.apple.com/library/content/#documentation/cocoa/reference/Foundation/Classes/NSObject_Class/Reference/Reference.html\" target=\"_blank\" rel=\"external\">查阅这个文档</a>会发现：“isa这一实例变量被初始化指向一个描述对于类的数据结构体，其他所有的实例变量都被初始化为0”。所以，通过继承Apple原始类不仅仅继承一些不错的属性，而且还能让我们轻易地创建符合于运行时机制要求的对象（包含一个指向类的isa指针）。</p>\n<h3 id=\"类缓存机制\"><a href=\"#类缓存机制\" class=\"headerlink\" title=\"类缓存机制\"></a>类缓存机制</h3><p>当OC的运行时机制机制通过检视一个对象的isa指针指向的类时会发现该对象实现了很多函数。然而，你可能仅仅调用其中的一小部分也就意味没必要每一次查找某个函数时都去搜索一遍类中的函数列表。因此，类创建了缓存，将你每次搜索函数列表后找到的相应函数存入缓存中。所以，当objc_msgSend()在类中搜寻某个函数是首先会遍历缓存列表。这样做的理论依据在于如果你发送过某个消息给一个对象，你很可能回再次发送同样的消息。因此如果我们将该理论考虑在内意味着如果你有一个NSObject的子类MyObject,并运行以下代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">MyObject *obj = [[MyObject alloc] init];</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyObject</span></span></div><div class=\"line\">-(<span class=\"keyword\">id</span>)init &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> setVarA:@”blah”];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>接下来发生：</p>\n<ol>\n<li>[MyObject alloc]最先被执行。因为MyObject类没有实现alloc函数所以在该类自然找不到对应的函数，随后进入父类指针指向的NSObject类。</li>\n<li>询问NSObject类是否响应+alloc，发现其实现了alloc函数。+alloc检测到接收类是MyObject然后分配一块响应大小的内存并在其中初始化一个isa指针指向MyObject类。现在，我们获得了一个实例对象，随后运行时机制将NSObject类的+alloc函数指针存入NSObject对象对应的类中的缓存列表中。</li>\n<li>截至目前，我们发送了一个类消息，现在我们发送一个实例消息：调用-init函数或者自定义的初始化函数。显然，MyObject的实例对象能响应这个消息，因此-(id)init会被存入缓存列表中。</li>\n<li>随后self=[super init]被调用。super作为一个魔法关键字指向父类对象，因此转向NSObjct类中，调用init函数。这样做是为了确保面向对象继承体系（OOP inheritance）正常运转，因为所以的父类都将会正确地初始化它们的变量，然后作为子类对象可以正确地初始化自身的变量和必要时重载父类。</li>\n</ol>\n<p>在这个NSObject类的例子中，没有特别的要点出现。但是事实并不总是如此，有时候初始化很重要，如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt; Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyObject</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *aString;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">retain</span>) <span class=\"built_in\">NSString</span> *aString;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyObject</span></span></div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">  [<span class=\"keyword\">self</span> setAString:<span class=\"literal\">nil</span>];</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@synthesize</span> aString;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> main (<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSAutoreleasePool</span> * pool = [[<span class=\"built_in\">NSAutoreleasePool</span> alloc] init];</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">id</span> obj1 = [<span class=\"built_in\">NSMutableArray</span> alloc];</div><div class=\"line\"> <span class=\"keyword\">id</span> obj2 = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"keyword\">id</span> obj3 = [<span class=\"built_in\">NSArray</span> alloc];</div><div class=\"line\"> <span class=\"keyword\">id</span> obj4 = [[<span class=\"built_in\">NSArray</span> alloc] initWithObjects:<span class=\"string\">@\"Hello\"</span>,<span class=\"literal\">nil</span>];</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj1 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj1 <span class=\"keyword\">class</span>]));</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj2 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj2 <span class=\"keyword\">class</span>]));</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj3 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj3 <span class=\"keyword\">class</span>]));</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj4 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj4 <span class=\"keyword\">class</span>]));</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"keyword\">id</span> obj5 = [MyObject alloc];</div><div class=\"line\"> <span class=\"keyword\">id</span> obj6 = [[MyObject alloc] init];</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj5 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj5 <span class=\"keyword\">class</span>]));</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj6 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj6 <span class=\"keyword\">class</span>]));</div><div class=\"line\">  </div><div class=\"line\"> [pool drain];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你是Cocoa初学者，然后我问你上述代码的打印结果，你的回答可能如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSMutableArray</span></div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span> </div><div class=\"line\"><span class=\"built_in\">NSArray</span></div><div class=\"line\"><span class=\"built_in\">NSArray</span></div><div class=\"line\">MyObject</div><div class=\"line\">MyObject</div></pre></td></tr></table></figure>\n<p>但是运行结果却是：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj1 <span class=\"keyword\">class</span> is __NSPlaceholderArray</div><div class=\"line\">obj2 <span class=\"keyword\">class</span> is <span class=\"built_in\">NSCFArray</span></div><div class=\"line\">obj3 <span class=\"keyword\">class</span> is __NSPlaceholderArray</div><div class=\"line\">obj4 <span class=\"keyword\">class</span> is <span class=\"built_in\">NSCFArray</span></div><div class=\"line\">obj5 <span class=\"keyword\">class</span> is MyObject</div><div class=\"line\">obj6 <span class=\"keyword\">class</span> is MyObject</div></pre></td></tr></table></figure>\n<p>这是因为在Objective-C中，调用+alloc会隐性地返回一个类的实例对象而调用-init会返回另外一个类的实例对象。</p>\n<h3 id=\"objc-msgSend的工作流程是什么？\"><a href=\"#objc-msgSend的工作流程是什么？\" class=\"headerlink\" title=\"objc_msgSend的工作流程是什么？\"></a>objc_msgSend的工作流程是什么？</h3><p>objc_msgSend函数实现比较复杂。比如我们写了如下代码…</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> printMessageWithString:<span class=\"string\">@\"Hello World!\"</span>];</div></pre></td></tr></table></figure>\n<p>上述代码实际上会被编译器转化成：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(printMessageWithString:),<span class=\"string\">@\"Hello World!\"</span>);</div></pre></td></tr></table></figure>\n<p>随后，objc_msgSend函数根据目标对象的isa指针去查询对应的类（或者任一父类）看是否响应选择器@selector(printMessageWithString:)。假设在类的函数派发列表或者缓存中找到了对应的函数实现，那么执行该函数。如此看来，objc_msgSend函数没有返回值，它开始执行然后找到对应的目标函数并执行，因此目标函数的返回值被视为objc_msgSend函数的返回值。</p>\n<p>Bill Bumgarner对于objc_msgSend的研究比我要表达的更为深入（<a href=\"http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html\" target=\"_blank\" rel=\"external\">part 1</a>,<a href=\"http://www.friday.com/bbum/2009/12/18/objc_msgsend-tour-part-2-setting-the-stage/\" target=\"_blank\" rel=\"external\">part 2</a>,<a href=\"http://www.friday.com/bbum/2009/12/18/objc_msgsend-tour-part-3-the-fast-path/\" target=\"_blank\" rel=\"external\">part 3</a>）。总结一下他所要表达的以及你在查阅运行时机制源代码时可能发现的内容：</p>\n<ol>\n<li>检测屏蔽的函数和死循环，很显然如果代码运行在垃圾回收的环境下，我们可以忽略-retain,-release的调用，诸如此类。</li>\n<li>检测空对象。 不同于其他编程语言，在Objective-C中发送一个消息给空对象是完全合法的。[there are some valid reasons you’d want to. Assuming we have a non nil target we go on… ]</li>\n<li>然后在一个类中查找函数指针，首先是搜索缓存列表，如果找到了对应的函数指针就跳转对其实现代码段，即执行函数。</li>\n<li>如果在缓存列表中没有找到对应的函数指针，便搜索类中的函数派发列表。如果找到了对应的函数指针即跳转到其实现代码段。</li>\n<li>如果在缓存列表和函数列表都没有找到对应的函数，随即跳转到消息转发机制，意味着代码会被编译成c语言代码。所以一个函数如下所示：</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">int</span>)doComputeWithNum:(<span class=\"keyword\">int</span>)aNum</div></pre></td></tr></table></figure>\n<p>将会被编译成：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> aClass_doComputeWithNum(aClass *<span class=\"keyword\">self</span>,SEL _cmd,<span class=\"keyword\">int</span> aNum)</div></pre></td></tr></table></figure>\n<p>此时，运行时机制通过这些函数的指针来调用这些转化后的函数，现在你已经不能直接调用这些函数，但是Cocoa库提供了一个方法来获得这些函数的函数指针。。。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//declare C function pointer</span></div><div class=\"line\"><span class=\"keyword\">int</span> (computeNum *)(<span class=\"keyword\">id</span>,SEL,<span class=\"keyword\">int</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//methodForSelector is COCOA &amp; not ObjC Runtime</span></div><div class=\"line\"><span class=\"comment\">//gets the same function pointer objc_msgSend gets</span></div><div class=\"line\">computeNum = (<span class=\"keyword\">int</span> (*)(<span class=\"keyword\">id</span>,SEL,<span class=\"keyword\">int</span>))[target methodForSelector:<span class=\"keyword\">@selector</span>(doComputeWithNum:)];</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//execute the C function pointer returned by the runtime</span></div><div class=\"line\">computeNum(obj,<span class=\"keyword\">@selector</span>(doComputeWithNum:),aNum);</div></pre></td></tr></table></figure>\n<p>这样，你可以知道访问这些函数并在运行时中直接调用，甚至利用这种方法来绕开运行时的动态调用来确保一个指定的函数被执行。运行时机制同样可以调用你的函数，只不过是通过objc_msgSend()。</p>\n<h3 id=\"Objective-C消息传送\"><a href=\"#Objective-C消息传送\" class=\"headerlink\" title=\"Objective-C消息传送\"></a>Objective-C消息传送</h3><p>在Objective-C中，发送一个消息给一个不会做出响应的对象是合法的，甚至可能是有意这样设计的。苹果在其开发文档中给出的原因之一是为了模拟Objective-C不支持的多继承，或者你只是想抽象化你的设计，隐藏能处理这些消息的实例对象或类。这是运行时机制必要的功能之一。<br>消息传送工作流程：</p>\n<ol>\n<li>运行时机制搜寻了对象的类和它所有父类中的缓存列表和函数列表，但是并没有找到指定的方法。</li>\n<li>随后运行时机制将会调用你类中的 +(BOOL)resolveInstanceMethod:(SEL)aSEL方法给你一次机会为指定的函数提供函数实现，并告诉运行时机制你已经实现了这个方法。如果运行时机制再次搜索这个函数就能找到对应的函数实现。你可以如下所示，实现这个功能：</li>\n</ol>\n<p>定义一个函数</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> fooMethod(<span class=\"keyword\">id</span> obj, SEL _cmd)</div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Doing Foo\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如下所示，使用class_addMethod()来实现</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">+(<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)aSEL</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(aSEL == <span class=\"keyword\">@selector</span>(doFoo:))&#123;</div><div class=\"line\">        class_addMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],aSEL,(IMP)fooMethod,<span class=\"string\">\"v@:\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> resolveInstanceMethod];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>class_addMethod()最后一个参数“v@:”表示函数fooMethod的返回值和参数，你可以在运行时机制指南中类型编码<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html\" target=\"_blank\" rel=\"external\">Type Encodings</a>了解你可以具体的规则。</p>\n<ol>\n<li>运行时机制随后会调用- (id)forwardingTargetForSelector:(SEL)aSelector函数，给你一次机会将运行时指向另外一个能响应目标函数的对象。这样做比触发消耗更大的函数：-(void)forwardInvocation:(NSInvocation *)anInvocation更划算。你的具体实现可能如下所示：</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(aSelector == <span class=\"keyword\">@selector</span>(mysteriousMethod:))&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> alternateObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> forwardingTargetForSelector:aSelector];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>很显然你不想返回self指针，否则可能导致死循环。</p>\n<ol>\n<li>此时，运行时机制尝试最后一次去获取消息的预期目标，并调用- (void)forwardInvocation:(NSInvocation *)anInvocation。如果你未曾了解NSInvocation<a href=\"https://developer.apple.com/reference/foundation/nsinvocation\" target=\"_blank\" rel=\"external\">点击查看</a>,这是Objective-C消息中很重要的构成部分。一旦你持有一个NSInvocation对象，你基本上可以更改消息的任何内容，包括目标对象，选择器和函数参数。你可能操作如下：</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)invocation</div><div class=\"line\">&#123;</div><div class=\"line\">    SEL invSEL = invocation.selector;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span>([altObject respondsToSelector:invSEL]) &#123;</div><div class=\"line\">        [invocation invokeWithTarget:altObject];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doesNotRecognizeSelector:invSEL];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果类是继承自NSObjct，- (void)forwardInvocation:(NSInvocation *)anInvocation函数的默认实现是调用-doesNotRecognizeSelector函数，如果你还想做点什么来响应这次消息转送，重载这个函数将是最后一次机会。</p>\n<h3 id=\"实例变量的无碎片化（Modern-Runtime）\"><a href=\"#实例变量的无碎片化（Modern-Runtime）\" class=\"headerlink\" title=\"实例变量的无碎片化（Modern Runtime）\"></a>实例变量的无碎片化（Modern Runtime）</h3><p>目前我们所了解到关于Modern Runtime的概念之一是实例变量无碎片化（Non Fragile ivars）。编译器在编译类的时候确定了实例变量的布局，决定了某个实例变量的访问位置。这属于底层细节，关乎于获得一个对象的指针，查找某个实例变量相对于对象起始位置的偏移，根据实例变量的类型读取相应数量的字节。因此，实例变量的布局可能如下所示，左侧的数字表示实例变量的字节偏移量</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/translation/runtime-f-1.png\" alt=\"\"></p>\n<p>如上所示，NSObject对象的实例变量布局以及继承NSObject后添加了自己的变量之后的布局。这样的布局在苹果发布更新之前都能正常运行，但是苹果发布了Mac OS X 10.6之后，布局就会变成如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/translation/runtime-f-2.png\" alt=\"\"></p>\n<p>因为与父类的实例变量重叠，自定义的对象的实例变量被抹掉。防止这样的情况发生唯一的可能是苹果能保持更新之前的布局。但是如果苹果这样做的话，那么苹果的框架将不可能得到改进，因为这些框架的实例变量布局已经写死了。处于实例变量碎片化的情况下只能通过重新编译所有继承于苹果类的类来保证兼容新的框架。那么实例变量无碎片化的情况下会是如何处理？</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/translation/runtime-f-3.png\" alt=\"\"></p>\n<p>实例变量无碎片化的前提下，编译器创建同实例变量碎片化情况下一样的实例变量布局。但是当运行时检测到一个重叠的父类时会调整自定义变量的偏移量，因此子类中自定义的变量得以保留。</p>\n<h3 id=\"Objective-C-关联对象\"><a href=\"#Objective-C-关联对象\" class=\"headerlink\" title=\"Objective-C 关联对象\"></a>Objective-C 关联对象</h3><p>最近Mac OS X 10.6 Snow Leopard推出了一个新特性，称之为关联引用。不同于其他一些语言，Objective-C不支持动态添加实例变量到某个对象的类中。所以在此之前你不得不耗尽脑力去构建一个特定的基础架构，营造一个可以给某个对象动态添加变量的假象。现在在Mac OS X 10.6中，运行时已经支持这一功能。如果想添加一个变量到任一个已经存在的苹果原生类中，比如NSView，我们可以做如下操作：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt; Cocoa/Cocoa.h&gt;</span> //Cocoa</span></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt; objc/runtime.h&gt;</span> //objc runtime api’s</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSView</span> (<span class=\"title\">CustomAdditions</span>)</span></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">retain</span>) <span class=\"built_in\">NSImage</span> *customImage;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSView</span> (<span class=\"title\">CustomAdditions</span>)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> img_key; <span class=\"comment\">//has a unique address (identifier)</span></div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"built_in\">NSImage</span> *)customImage</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>,&amp;img_key);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">void</span>)setCustomImage:(<span class=\"built_in\">NSImage</span> *)image</div><div class=\"line\">&#123;</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>,&amp;img_key,image,</div><div class=\"line\">                             OBJC_ASSOCIATION_RETAIN);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>在runtime.h头文件中可以看到存储关联对象方式的可选项，作为objc_setAssociatedObject()函数的参数传入。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* Associated Object support. */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* objc_setAssociatedObject() options */</span></div><div class=\"line\"><span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    OBJC_ASSOCIATION_ASSIGN = <span class=\"number\">0</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class=\"number\">1</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class=\"number\">3</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_RETAIN = <span class=\"number\">01401</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_COPY = <span class=\"number\">01403</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这些可选值与@property语法的可选值相匹配。</p>\n<h3 id=\"混合虚函数表派发（Hybrid-vTable-Dispatch）\"><a href=\"#混合虚函数表派发（Hybrid-vTable-Dispatch）\" class=\"headerlink\" title=\"混合虚函数表派发（Hybrid vTable Dispatch）\"></a>混合虚函数表派发（Hybrid vTable Dispatch）</h3><p>如果你查阅现代版运行时的源代码，你会看到以下内容（<a href=\"http://opensource.apple.com/source/objc4/objc4-437/runtime/objc-runtime-new.m\" target=\"_blank\" rel=\"external\">位于objc-runtime-new.m</a>）:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************</span></div><div class=\"line\">* vtable dispatch</div><div class=\"line\">* </div><div class=\"line\">* Every class gets a vtable pointer. The vtable is an array of IMPs.</div><div class=\"line\">* The selectors represented in the vtable are the same for all classes</div><div class=\"line\">*   (i.e. no class has a bigger or smaller vtable).</div><div class=\"line\">* Each vtable index has an associated trampoline which dispatches to </div><div class=\"line\">*   the IMP at that index for the receiver class's vtable (after </div><div class=\"line\">*   checking for NULL). Dispatch fixup uses these trampolines instead </div><div class=\"line\">*   of objc_msgSend.</div><div class=\"line\">* Fragility: The vtable size and list of selectors is chosen at launch </div><div class=\"line\">*   time. No compiler-generated code depends on any particular vtable </div><div class=\"line\">*   configuration, or even the use of vtable dispatch at all.</div><div class=\"line\">* Memory size: If a class's vtable is identical to its superclass's </div><div class=\"line\">*   (i.e. the class overrides none of the vtable selectors), then </div><div class=\"line\">*   the class points directly to its superclass's vtable. This means </div><div class=\"line\">*   selectors to be included in the vtable should be chosen so they are </div><div class=\"line\">*   (1) frequently called, but (2) not too frequently overridden. In </div><div class=\"line\">*   particular, -dealloc is a bad choice.</div><div class=\"line\">* Forwarding: If a class doesn't implement some vtable selector, that </div><div class=\"line\">*   selector's IMP is set to objc_msgSend in that class's vtable.</div><div class=\"line\">* +initialize: Each class keeps the default vtable (which always </div><div class=\"line\">*   redirects to objc_msgSend) until its +initialize is completed.</div><div class=\"line\">*   Otherwise, the first message to a class could be a vtable dispatch, </div><div class=\"line\">*   and the vtable trampoline doesn't include +initialize checking.</div><div class=\"line\">* Changes: Categories, addMethod, and setImplementation all force vtable </div><div class=\"line\">*   reconstruction for the class and all of its subclasses, if the </div><div class=\"line\">*   vtable selectors are affected.</div><div class=\"line\">**********************************************************************/</div></pre></td></tr></table></figure>\n<p>上述内容阐述的要点就是运行时会尽量存储调用最频繁的函数以达到提高软件运行速度的目的，因为通过虚函数表查找比调用objc_msgSend函数使用的指令更少。虚函数表中的16个函数调用次数远多于其他所有函数。实际上，进一步深入研究代码你会发现垃圾回收机制和无垃圾回收机制下虚函数表中默认的函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> defaultVtable[] = &#123;</div><div class=\"line\">    <span class=\"string\">\"allocWithZone:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"alloc\"</span>, </div><div class=\"line\">    <span class=\"string\">\"class\"</span>, </div><div class=\"line\">    <span class=\"string\">\"self\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isKindOfClass:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"respondsToSelector:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isFlipped\"</span>, </div><div class=\"line\">    <span class=\"string\">\"length\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectForKey:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"count\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectAtIndex:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqualToString:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqual:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"retain\"</span>, </div><div class=\"line\">    <span class=\"string\">\"release\"</span>, </div><div class=\"line\">    <span class=\"string\">\"autorelease\"</span>, </div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> defaultVtableGC[] = &#123;</div><div class=\"line\">    <span class=\"string\">\"allocWithZone:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"alloc\"</span>, </div><div class=\"line\">    <span class=\"string\">\"class\"</span>, </div><div class=\"line\">    <span class=\"string\">\"self\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isKindOfClass:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"respondsToSelector:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isFlipped\"</span>, </div><div class=\"line\">    <span class=\"string\">\"length\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectForKey:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"count\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectAtIndex:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqualToString:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqual:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"hash\"</span>, </div><div class=\"line\">    <span class=\"string\">\"addObject:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"countByEnumeratingWithState:objects:count:\"</span>, </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>那么你如何知道是否调用了这些函数？调试模式下，你将会在栈中看到以下函数中的某一个被调用，出于调试的目的，所有的这些方法都可以视为通过objc_msgSend函数调用的。</p>\n<ol>\n<li>objc_msgSend_fixup：是当运行时正在派发一个位于虚函数表的函数时触发，即用于派发虚函数表中的函数。</li>\n<li>objc_msgSend_fixedup：是当调用一个本应存在于虚函数表的函数但是现在已经不存在的函数时触发（个人觉得应该是调用在objc_msgSend_fixup函数之后，并且由前者触发的）。</li>\n<li>objc_msgSend_vtable[0-15]：调试模式下，也许会看到某个函数调用类似于objc_msgSend_vtable5意味着正在调用虚函数表中对应序号的某个函数。</li>\n</ol>\n<p>运行时可以决定是否派发这些函数，所以不要指望以下这种情况存在：objc_msgSend_vtable10在运行时的一次循环中对应的函数是-length,意味着后面任一次循环中也是同样情况。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>我希望你能喜欢这些内容，这篇文章基本上覆盖了我在<a href=\"http://cocoaheads.org/us/DesMoinesIowa/index.html\" target=\"_blank\" rel=\"external\">Des Moines Cocoaheads </a>上谈及的内容。Objective-C运行时是一个了不起的杰作，它为我们的Cocoa/Objective-C应用提供了一个强大的平台，让很多我们正在受用的功能都成为可能。如果你还没有查阅关于如何使用Objective-C运行时的Apple开发文档，我希望你马上行动，谢谢。附上：<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html\" target=\"_blank\" rel=\"external\">运行时开发文档</a>，<a href=\"https://developer.apple.com/reference/objectivec/1657527-objective_c_runtime\" target=\"_blank\" rel=\"external\">运行时介绍文档</a></p>\n"},{"title":"Hello,World","url":"http://yoursite.com/2014/09/24/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"about","url":"http://yoursite.com/about/index.html","content":""},{"title":"category","url":"http://yoursite.com/category/index.html","content":""},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"\n@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\nhtml.page-home {\n\n\tbackground: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n\tbackground-blend-mode: screen;\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n\n}\n"},{"title":"link","url":"http://yoursite.com/link/index.html","content":""},{"title":"project","url":"http://yoursite.com/project/index.html","content":""},{"title":"search","url":"http://yoursite.com/search/index.html","content":""},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":""}]