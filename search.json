[{"title":"原生JS代码模拟鼠标点击消息","url":"http://yoursite.com/2017/02/23/JS-模拟鼠标点击消息/","content":"<p>近两天都忙于更新之前做的一个关于国外某知名音乐网站项目，因为自己一直做iOS开发并没有系统的学习过JS，所以属于半吊子水平。</p>\n<p>由于该音乐网站对网页进行了全新的改版，导致之前注入的JS代码全部失效，且原网站中使用的第三方JQuery库也被去掉了。意味着只能使用原生JS重写注入代码。</p>\n<p>期间遇到了一个“棘手”的问题：使用原生JS代码模拟鼠标点击消息来改变音量，不同于普通的鼠标点击的是消息里面需要附带鼠标坐标。在各种尝试之后，耗费了大半天时间才得以解决，个人觉得有点价值，记录下解决思路以供参考。</p>\n<p>以下是解决思路流程：</p>\n<p>ps：以下调试和代码均在Chrome浏览器的控制台执行。</p>\n<h4 id=\"分析DOM元素结构\"><a href=\"#分析DOM元素结构\" class=\"headerlink\" title=\"分析DOM元素结构\"></a>分析DOM元素结构</h4><p>页面样式</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/originality/js-simulate-mouse-click-1.png\" alt=\"页面样式\"></p>\n<p>DOM结构</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/originality/js-simulate-mouse-click-2.png\" alt=\"DOM结构\"></p>\n<p>由上图可知，DIV元素VolumeSlider作为父元素，其下有四个子元素，分,包括显示音量的slider和控制音量的handle元素。</p>\n<p>对音量相关的DOM结构有一个大致了解，便于后面消息派发时选择触发的目标元素。如果说网站将响应鼠标消息的js绑定在父元素，那么选择任意一个子元素或者父元素本身作为触发对象都可以，因为消息会自动传递，最终会作用于父元素VolumeSlider。但是如果响应鼠标消息的js是绑定在四个子元素中的其中一个，则需要一一尝试。这个例子中只有4个子元素，所以很快就能有结果，但是如果需要测试的元素很多，那就效率太低下了。文章后面会介绍一种方法，快速定位响应鼠标消息的元素。</p>\n<h4 id=\"模拟鼠标点击消息\"><a href=\"#模拟鼠标点击消息\" class=\"headerlink\" title=\"模拟鼠标点击消息\"></a>模拟鼠标点击消息</h4><p>该音乐网站改版之前，因为支持jQuery，借助于jQuery库提供的API很方便获取元素坐标和模拟鼠标点击消息。而新的版本只能用原生js编写相关代码。</p>\n<p>第一步：获取元素的坐标位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//递归获取元素的纵坐标</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTop</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> offset=e.offsetTop;</div><div class=\"line\">    ／／累加父元素的坐标值</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.offsetParent!=<span class=\"literal\">null</span>) </div><div class=\"line\">    \t／／递归</div><div class=\"line\">    \toffset+=getTop(e.offsetParent);</div><div class=\"line\">    <span class=\"keyword\">return</span> offset;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//递归获取元素的横坐标</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLeft</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> offset=e.offsetLeft;</div><div class=\"line\">    ／／累加父元素的坐标值</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.offsetParent!=<span class=\"literal\">null</span>) </div><div class=\"line\">    \t／／递归</div><div class=\"line\">    \toffset+=getLeft(e.offsetParent);</div><div class=\"line\">    <span class=\"keyword\">return</span> offset; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第二步：模拟鼠标消息</p>\n<p>原生js的Event对象有很多属性，但是创建Event的时并不是每一个属性都需要赋值。在网上找到了一篇博客<a href=\"http://marcgrabanski.com/simulating-mouse-click-events-in-javascript/\" target=\"_blank\" rel=\"external\">Simulating Mouse Events in JavaScript</a>讲的比较详细。以下是我使用的示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">／／offset是通过音量值转换过来的：音量level（<span class=\"number\">0</span><span class=\"number\">-1</span>）* targetElement的长度</div><div class=\"line\"><span class=\"keyword\">var</span> clientX = getLeft(targetElement) + offset;</div><div class=\"line\">            </div><div class=\"line\"><span class=\"keyword\">var</span> clientY = getTop(targetElement);</div><div class=\"line\">            </div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> MouseEvent(<span class=\"string\">'click'</span>, &#123;</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">'view'</span>: <span class=\"built_in\">window</span>,</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">'bubbles'</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">'cancelable'</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">'clientX'</span>:clientX,</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">'clientY'</span>:clientY</div><div class=\"line\">                                       &#125;);</div><div class=\"line\">            </div><div class=\"line\">targetElement.dispatchEvent(event);</div></pre></td></tr></table></figure>\n<p>第三步：获取响应鼠标消息的元素</p>\n<p>如果是普通的鼠标消息，比如点击按钮消息或者不带坐标值的消息，一般很容易触发成功。但是如果是带来坐标位置的鼠标消息则很可能触发成功之后但是达不到预期效果。在这个问题上我困惑了蛮久，明明代码执行之后，返回触发消息成功，但是音量值并没有改变。</p>\n<p>我在想有没有办法将真实的鼠标点击消息内容输出到终端，这样通过对比真实的鼠标消息就能找到模拟的鼠标消息的差异所在。</p>\n<p>于是，在控制台输入了以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//全局变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> windowClickEvent = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> oEvent = ev||event;</div><div class=\"line\">\t／／获取当前鼠标消息对象</div><div class=\"line\">\twindowClickEvent = oEvent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码能获得当前鼠标消息对象。使用鼠标点击音量条，在控制台获得如下结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/originality/js-simulate-mouse-click-3.png\" alt=\"DOM结构\"></p>\n<p>对比真实的鼠标消息，确定模拟的鼠标消息中的坐标值是吻合的。但是二者的target元素不同，这也正是原因所在。修改了target元素之后，代码执行结果达到了预期的结果。通过这个方法可以快速定位响应鼠标消息的目标元素。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>在刚开始要使用原生js模拟鼠标消息的时候，感觉一片茫然。在网上查了很多资料，没有找到满足需求的代码。最后只能硬着头皮自己写，期间各种不确定性都需要一一测试，折腾了大半天，好在最终达到预期的结果。与此同时，对模拟鼠标消息也有了新的体会，至少以后能够比较轻松的完成类似的功能。</p>\n"},{"title":"承认自己无能是有多难？","url":"http://yoursite.com/2017/01/16/承认自己无能是有多难/","content":"<blockquote>\n<p>人的一切痛苦,本质上都是对自己的无能的愤怒。— 王小波</p>\n</blockquote>\n<p>承认自己无能是有多难？</p>\n<p>换做以前，我会直接避开与其直接交锋，因为我所面对的是客观事实，客观存在的事物是不会随着个人意愿转移的。我不敢承认是很大程度上是因为自尊心和虚荣心，即使是一个人独处的时候也是如此。有时候，我能找到一些借口，以此为自己开脱，暂时麻痹自我；但是有时候，实在是绕不过自己心里的坎：一方面是心里明明知道自己现在存在很多缺陷，与自己的目标相去甚远；另一方面却没有勇气去面对，具体地说是没有信心去战胜自我。于是内心的愤怒油然而生，最终痛苦的也是自己。</p>\n<p>现在，我已经能以一种相对坦然的心态看待自己的无能。因为我渐渐意识到目前的无能是暂时的，且属于过去的自己。人是有主观能动性，是可以改变的，每每想到这一点，我内心会感到一丝欣慰，因为我是一个愿意改变，愿意反省，且能够付诸于行动的人。</p>\n<p>然而，我还是继续为自己的无能而感到痛苦。</p>\n<p>我发现“改变”这件事是长周期低回报的，需要长周期且持续的努力，才可能得到些许改变。如何维持这个长周期且持续的努力，这本身就是一种能力。我不得不承认，我的这种能力很弱，我的原定计划很容易因为外界的干扰而搁置或中断。</p>\n<p>面对外界的诱惑，我试图与之对抗，有时候也会取胜，但是大多数都是惨败。我深知推迟满足感对于锻炼成熟心智的重要性，却仍然抵抗不了及时行乐的诱惑。为什么会频频败下阵来？这是一个急需要解决的困惑。</p>\n<p>问题是要辩证地看待和分析的，内因一般来说是主因但也不能忽略外在因素的影响。记得很久之前看到一句话，现在深以为然：“决定你目标是否成功实现的关键因素不是坚持，而是科学的计划”。初次看到这句话的时候，并没有太多体会和感想。现在却如同看到救命稻草一般，想紧紧抓住。</p>\n<p>自从有意锻炼心智以来，也成功完成过一些计划，包括100天跑步计划，一年跑步计划，每天健身计划，美语学习计划，每天早上一杯水，每天睡前看半个小书，早餐两个鸡蛋一杯五谷燕麦粉。这些计划都有一个共同点就是执行时间不长，通常利用碎片时间就能完成。然而，我在最近的每周一篇博客计划上却显得步履维艰，究其原因之一就是写一篇博客通常需要整块连续的时间，少则两三小时，多则七八个小时。由于执行时间长，所以过程中很容易被外界干扰。除了上述的客观原因之外，剩下的就是自身的自控力不够，短时间内难以做出对长远目标有益的决定，容易因为贪图眼前的享乐而中止原计划。很典型的例子就是每到周末的时候，本计划利用一天的时间好好梳理知识，写一篇博客。如果这时候，好朋友电话过来约我打篮球，这种诱惑简直就是致命的。与朋友一起打篮球和聚餐本就是我内心渴望做的事情，是我一周高强度工作之后的一丝安慰，而写博客是我应该做的事情，但欲望一定是没有前者那么强烈。可想而知，我几乎每次遇到这两件事情的抉择时，都会选择前者，然后怀着愧疚又欣喜的心情踏上去篮球场的公交车。很多时候，我们都想实现双赢，但是现实却总是给单选题，鱼和熊掌不可兼得，选择做利于长期目标的事情还是及时行乐，对现阶段的我来说是一个很大的挑战，有时候即便是我强迫自己选择不去打篮球，留下了写博客，但是我的内心却很难平静下来，导致效率低下，得不偿失。</p>\n<p>王小波说过：“一个人活在世上就是为了忍受一切摧残，想通了这点，任何事情都能泰然处之。” 可惜现阶段我还没达到这个层次，因此每当自己的心智受到摧残的时候，我都会多少有点茫然失措，甚至怨恨自己。目前来说，改善这种困境的根本方法在于加强自我的心智和自控力，以及长远目标的思维方式。不过在此之前，我首先需要坦然地接受现在这个“无能”的自己，这样才能先做减法再做加法。</p>\n"},{"title":"关于爱的一点想法","url":"http://yoursite.com/2017/01/08/什么是爱/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前不久又翻读了《少有人走得路》这本书，并将其置于枕边，每天晚上睡觉之前或是蹲马桶的时候看上几个章节，那种感觉妙不可言。这本书从来没有让我失望过，每看一次都收获不少，确实是一本值得读一辈子的好书。</p>\n<h3 id=\"爱的定义\"><a href=\"#爱的定义\" class=\"headerlink\" title=\"爱的定义\"></a>爱的定义</h3><p>这次的阅读有一个论点让我深以为然，就是关于爱的定义。作者斯科特·派克是这样定义的：“爱，是为了促进自我和他人心智成熟，而具有的一种自我完善的意愿。“ 爱，是一种神秘的现象，我个人觉得很难言明爱是什么，如何定义。如果有人问我：”你觉得爱是什么？“ 我很可能回答：”它是一个很奇妙的东西。“ 然而，当我在书中看到作者给出的定义时，觉得他完整的表达了我对于爱的理解。</p>\n<p>爱是长期的和渐进的过程。爱是自我完善，意味着心智不断成熟。当我在付出爱的努力，不仅能让他人的心智成熟，自己也同样获益。真正意义上的爱，既是爱自己，也是爱他人。我始终坚信一个不爱自己的人是不可能爱别人的。一个缺乏自律的父母，不可能让孩子懂得什么是自我完善；一个自私的伴侣，不可能察觉另一半情绪细微变化和顾忌另一半的心理感受。显然，自私和缺乏自律就是一种心智不成熟的表现，换言之就是不自爱的结果。这也许和大多数人理解的爱不太一样，以为爱就只是给予和付出。殊不知，真正的爱是自我完善，也是帮助他人完善。它意味着持续地努力，超越自我界限。</p>\n<p>对于爱最大的误解，莫过于将男女恋爱理解为爱。我以前也是这样理解，其实我错了。</p>\n<h3 id=\"坠入情网\"><a href=\"#坠入情网\" class=\"headerlink\" title=\"坠入情网\"></a>坠入情网</h3><p>提及爱这个字眼，相信很多人都会想到男女恋爱，尤其是把坠入情网当成爱。坠入情网的人，时常会把”我爱你“这样的句子挂在嘴边，以此表达爱意。然而，这只是一种主观愿望罢了。要了解坠入情网的本质，首先理解心理学上的”自我界限“。</p>\n<p>何为”自我界限“？在新生婴儿的眼里，一切移动或静止的事物之间，他和周围的人之间，在单个个体和整个世界之间，没有任何界限和区别。随之年龄和认识的增长，他会发现他和世界不是一回事。他感觉饥饿，母亲不见得立刻出现；他想玩耍的时候，母亲未必能及时配合。他渐渐地意识到自己的意愿和母亲的行为完全是截然不同的两回事，这也就是自我意识的形成。通常，婴儿的自我意识能否健康发展，取决于同母亲的关系是否融洽。当婴儿意识到自己是一厢情愿的，不能主宰其他人的意愿，于是开始在自己和周围世界之间做出区分。慢慢地我们能区分出自己和外在世界更多的不同，认识到自己的局限性。这样的认知就是”自我界限“。</p>\n<p>永远活在”自我界限“中，只会给人带来孤寂。对他们而已，世界充满险恶，自我界限是保护伞，孤独和寂寞反而能带来安全感。但是大部分人还是渴望摆脱寂寞，冲出自我界限的牢笼。坠入情网，就是表现之一，暂时性地摆脱寂寞。坠入情网意味着”自我界限“的某部分崩溃，使我们的自我与他人的自我合二为一。情感就像决堤的洪流，声势浩大地涌向所爱的人，于是寂寞消失了，取而代之的是难以言喻的狂喜。</p>\n<p>显然，坠入情网是情感和心灵退化现象。与心爱的人在一起，跟童年时和父母相伴的记忆彼此呼应，让我们体会到幼年时无所不能的快感，似乎没有什么能够阻止我们实现愿望。然而，残酷的现实会像击溃两岁小孩的幻想一样击溃我们的爱情之梦。日常琐事和难题，容易让双方产生矛盾和冲突，对这种”爱“造成威胁甚至击溃。我们必须面对现实，学会真正的相知和相爱，以此来避免上述这种虚幻的爱。</p>\n<p>坠入情网是自我界限暂时性崩溃的现象，只要客观条件允许，就会发生。而真正的爱是需要彼此付出努力的，是一种主观意愿。坠入情网的经历终结，自我界限会恢复原样。而真正的爱是对自我界限的扩充，而不是使其恢复原状。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>真正的爱不是过度依赖，也不是自我牺牲，更不是一种感觉，而是实际行动，是心智上地成长。在爱一个人之前，首先成为一个自爱的人，一个有趣的人，再和另外一半一起有趣下去。</p>\n<p>如何成为一个有趣的人？还在努力中…</p>\n"},{"title":"书虫系列：爱情与金钱-第五章","url":"http://yoursite.com/2016/12/19/书虫系列：爱情与金钱-第五章/","content":"<p>After the coffee and sandwiches，Inspector Walsh called Roger Clarkson to the office．Roger came in and sat down．The Inspector began at once．</p>\n<p>用完咖啡和三明治后，华莱士探长叫卡拉克森·罗格来办公室。罗格进来刚坐下，探长立刻开始询问。</p>\n<p>‘Now，Mr Clarkson．Why was your mother angry with you last night？’</p>\n<p>“跟我说说，克拉克森先生，昨晚你妈妈为什么会对你生气？”</p>\n<p>‘This house is very big，’Roger said．’It was a lot of work for Mother．I wanted her to move．But no，she loved this house and garden．She didn’t want to move．’</p>\n<p>“这栋房子很大，”罗格解释道，“妈妈需要做很多家务。我希望她搬走。但是如今，她喜欢这房子和花园。她不想搬走。”</p>\n<p>‘Tell me about your job，Mr Clarkson．Your mother is dead and now you’re rich．Do you need money？’</p>\n<p>“谈谈你的工作，克拉克森先生。你妈妈去世了，现在你富有了。你需要钱吗？”</p>\n<p>Roger’s face was suddenly afraid．’What are you saying？I didn’t kill my mother．I need money，that’s true．A friend and I want to build ten houses here，in this garden．We can get a lot of money for them．So．I wanted Mother to sell this house．It’s true．But Mr Briggs wanted half the garden，too，you know，for his farm．’</p>\n<p>罗格的脸色突然变得惊慌。“你说什么？我没有杀我妈妈。我需要钱，那没错。我和一个朋友想在这里的花园建十栋房子。因此我们能赚很多钱。所以，我希望妈妈卖掉这栋房子。”</p>\n<p>Inspector Walsh moved a pencil on the table．’Tell me，what happened upstairs？You went to your mother’s room？’</p>\n<p>华莱士警探摆弄着桌上的一支铅笔。说道：“告诉我，楼上发生了什么？你去了你妈妈的房间？”</p>\n<p>‘Yes，I did．I wanted to say goodnight to my mother．’</p>\n<p>“是的，我去过。我想和我妈妈说声晚安。”</p>\n<p>‘Did you talk about the house again？’<br>“你又提及了关于房子的事情？”</p>\n<p>‘Yes，I did．Again，she said no．She loved the house and didn’t want to sell it．’</p>\n<p>“是的，我提了。她再次拒绝了。她喜欢这栋房子，不想出售。”</p>\n<p>Inspector Walsh watched Roger for a minute．’I see．We found the empty bottle of sleeping tablets，Mr Clarkson，in Diane’s room．’</p>\n<p>华莱士探长注视了罗格片刻。“我知道了。克拉克森先生，我们在戴安娜的房间发现了这个安眠药的空瓶子。”</p>\n<p>Roger’s face did not change．’Oh？Someone put them there．Diane did not kill my mother，I know that．She found the body．’</p>\n<p>罗格的面不改色地说道：“哦？有人把它们放那里的。戴安娜没有谋杀我妈妈，我知道。她发现的尸体。”</p>\n<p>‘Very well．I would like to see Diane next．’</p>\n<p>“很好，我打算接下来见见戴安娜。”</p>\n<p>Roger got up and left the room．</p>\n<p>“罗格起身离开了房间。”</p>\n<p>Inspector Walsh stood up and put his hands in his pockets．He went to the window and looked out at the trees．Why was Roger Clarkson afraid？Was it important？He looked at Sergeant Foster．</p>\n<p>华莱士探长站了起来，把双手放进口袋。他走向窗户，看着外面的树林。为什么克拉克森·罗格会惊慌？这个细节重要吗？他的目光转向佛斯特探员。</p>\n<p>‘Tomorrow morning，go to Mr Clarkson’s office-you have the name，’he said．’Ask some questions about him，about his job，friends，money．’</p>\n<p>“明天早上，去克拉克森先生的办公室-名字你知道的，”他说。“询问一些问题，关于他的工作，朋友，资产。”</p>\n<p>Sergeant Foster wrote it down．’Yes，Inspector．’</p>\n<p>佛斯特探员记录下来，说道：“好的，探长。”</p>\n<p>‘A good day for tennis，Sergeant？’</p>\n<p>“适合打网球的好天气啊，探员？”</p>\n<p>Sergeant Foster laughed．’Don’t say that．It’s not easy，you know．I don’t like sitting here looking at the sun．’</p>\n<p>佛斯特探员笑道。“别提了。难受，你知道的。我不喜欢坐在这里看着太阳。”</p>\n<p>Diane came into the room and sat down．She looked at Sergeant Foster and smiled．’I saw you at the Tennis Club last month，I think．You play very well．’</p>\n<p>戴安娜来到房间坐下。她看着佛斯特探员，然后微微一笑。“我想我上个月在网球俱乐部见过你，你球技很棒。”</p>\n<p>Sergeant Foster’s face went red．Inspector Walsh looked at him．’Oh yes．A fast and exciting player is Sergeant Foster．’</p>\n<p>佛斯特探员脸红了。华莱士探长看着他，说道：“噢，是的。佛斯特探员是一个敏捷且充满激情的球手。”</p>\n<p>Diane smiled again at Sergeant Foster and his face went redder．</p>\n<p>戴安娜再次冲着佛斯特探员微笑，他的脸变得更红了。</p>\n<p>‘Well，Miss Clarkson，’Inspector Walsh said，’I want you to talk about last night．’</p>\n<p>“好了，克拉克森小姐，”华莱士探长说道，“我想要你聊聊昨天晚上的事情。”</p>\n<p>Diane stopped smiling．’Oh，I can talk about last night．I can’t stop talking about it．We were all angry．Mother went to bed early and I made hot milk for her．We were all in the kitchen，and Peter Hobbs came in He nearly broke the back door down．’Diane stopped．</p>\n<p>戴安娜止住了笑声。“噢，我可以聊聊昨晚的事情。我忍不住谈论它。我们都在生气。妈妈早早地去睡觉了，我热了一杯牛奶给她。我们都在厨房，然后皮特·霍布斯进来了，他几乎要把后门踢破了。”戴安娜停住了。</p>\n<p>‘Yes？’</p>\n<p>“是吗？”</p>\n<p>‘He was very angry about a letter．He wanted to kill Mother．Are you going to talk to him？’</p>\n<p>“他对那封信很恼火。他想谋杀我妈妈。你们会找他谈话吗？”</p>\n<p>‘We’re going to talk to everyone．’</p>\n<p>“我们会和每个人谈话。”</p>\n<p>‘Good．Tom Briggs came into the kitchen，too．Are you going to talk to him？’</p>\n<p>“那就好。汤姆·布雷格斯也来过厨房。你们会找他谈话吗？”</p>\n<p>‘I’m asking the questions，Miss Clarkson．When did you take the milk upstairs？’</p>\n<p>“我正在问你问题，克拉克森小姐。你是什么时候端牛奶上楼的？”</p>\n<p>‘I went up after Roger．’She stopped for a minute．Then she began again．’I didn’t like my mother，Inspector．She killed my father，you know．Last winter，after Christmas，she drove the car into a tree and killed my father．’</p>\n<p>“我在罗格后面。”她停顿片刻。然后又继续说道。“我不喜欢我妈妈，探长。她害死我爸爸，你知道的。去年冬天，圣诞节后，她开车撞上了一颗树，害死了我爸爸。”</p>\n<p>Inspector Walsh watched Diane’s face carefully．’I see．So you wanted to kill your mother？’</p>\n<p>华莱士探长仔细地注视着戴安娜的表情。“我了解了。所以你想谋杀你妈妈？”</p>\n<p>Diane laughed．’I wanted to kill her，but I didn’t．I can tell you a lot of things about this family，Inspector．Everyone wanted Mother to die．Uncle Albert wanted her money for his wife，Annie．And then my brother．He needs a lot of money．He has an expensive house and an expensive car．And think of Jackie．Do you know that Jackie didn’t like Mother？A long time age，a nice boy worked here．He was the gardener．Jackie loved him very much，but Mother said no．A gardener was not a good husband for a Clarkson girl！’</p>\n<p>戴安娜笑道：“我想杀了她，但是我没有。我可以告诉你关于这个家族的许多事情。每个人都想要我妈妈死掉。阿尔伯特姑父想要她的钱为他的妻子安妮治病。然后是我哥哥，他需要很多钱。他拥有一栋昂贵的房子和车子。还有想想杰基。你知道杰基不喜欢我妈妈吗？很久以前，一个不错的小伙子在这里工作。他是一个园丁。杰基很爱他，但是我妈妈不允许。一个园丁对克拉克森家的女儿来说不是一个好的丈夫人选！”</p>\n<p>Inspector Walsh listened quietly．All this was very interesting but was it important？Perhaps．What a happy family the Clarksons were！</p>\n<p>华莱士探长听得很仔细。所有的这些都很有趣但是这些重要吗？也许吧。克拉克森是一个多么快乐的家族啊！</p>\n<p>‘We found the empty bottle of sleeping tablets in your room，’Inspector Walsh said quietly． He watched her face carefully．</p>\n<p>“我们在你的房间发现了安眠药的空瓶子，”华莱士探长轻声说道。他仔细地注视着她的表情。</p>\n<p>Diane stood up suddenly，her face angry．’What？I didn’t put it there！I’m not going to listen to this！’She ran out of the room．</p>\n<p>戴安娜突然站了起来，一脸愤怒。“什么？我没有把它们放那里！我不想听这些！”说完她跑出了房间。</p>\n<p>‘Well，well，well，’Inspector Walsh said．’She likes you，Sergeant．You need to be careful．’</p>\n<p>“好吧，好吧，好吧，”华莱士探长说道。“她喜欢你，探员。你得当心点。”</p>\n<p>Sergeant Foster laughed but his face went red again．<br>佛斯特探员笑了，但是他的脸又红了。</p>\n<p>‘Someone put sleeping tablets in Molly’s hot milk，’the In-spector said．’All the family were in the kitchen last night．Peter Hobbs and Tom Briggs were there，too．One of them killed Molly．’<br>“有人把安眠药放进了莫莉的热牛奶里，”探长说道。“所有的家庭成员昨晚都在厨房。皮特·霍布斯和汤姆·布雷格斯也那。他们其中的一个人杀了莫莉。”</p>\n<p>Inspector Walsh got his hat and coat．’Come on．We need to talk to Peter Hobbs and Tom Briggs．Let’s get some more coffee first．I’d like a sandwich，too．I’m hungry again！’</p>\n<p>华莱士探长拿起他的帽子和外套。说道：“走吧，我们需要和皮特·霍布斯和汤姆·布雷格斯聊聊。我们先再来点咖啡。我想来一块三明治。我又饿了！”</p>\n<p><strong>翻译要点</strong></p>\n<p>无</p>\n"},{"title":"一颗雕琢的心","url":"http://yoursite.com/2016/12/14/2016-12-14-小记/","content":"<blockquote>\n<p>故天将降大任于是(斯)人也,必先苦其心志,劳其筋骨,饿其体肤,空乏其身,行拂乱其所为,所以动心忍性,曾益其所不能。</p>\n</blockquote>\n<p>进入十月份以来，公司进入新的一批产品线开发周期，需要在短期的几个月开发出一项包括前端+服务器+音频+投送的综合产品线，且这些都是我不曾涉及的领域。因此这个项目的难度和广度对我而言是前所未有的，充满挑战与未知。</p>\n<p>尽管如此，主观上，我很乐意接受挑战。</p>\n<p>现在这个项目进入关键阶段，之前预研阶段已经让我有点身心疲惫，最近几天也是频频失眠。与此同时，我发觉自己最近变得有点浮躁，急于求成的心态时不时的穿插在工作过程中，在我不觉察间主宰了我的意识形态，而不自知。我算不上完美主义者，但是如果项目的某个部分没有达到预期结果，我会感到情绪低落，甚至影响我对于整个项目的感觉。这种思维和心态太可怕，简直就是目光短浅与内心浮夸的完美体现，这不是我想要的。</p>\n<p>遇到问题就需要解决，我意识到自己现在最大的矛盾就是：“工作上日益增加的强度和压力与个人内心不断被消磨的耐心和理智之间矛盾。” </p>\n<p>急于求成，终将得不偿失。在追求项目整体尽量完美的前提下，学习匠人心态，多一份耐心与理智，坦然接受前期的简陋与粗糙，先把整个项目搭建起来，然后再悉心打磨细节，日趋完善它，以一种全局和长远的目光看待事物，不局限部分与短期效果。</p>\n<p>这个道理不难领悟，但是要付诸于实践，并将其养成一种行事风格却非易事，难！加上以往与之相对的思维模式与行为习惯会不时地阻挠，更是难上加难。因此在未来的生活与工作中需要时时自我监督与反省，不断的自我提醒，这也是这篇小记的目的所在。</p>\n<p>保持一颗雕琢的心，雕琢产品，也雕琢内心。</p>\n<p>— 2016-12-14</p>\n"},{"title":"书虫系列：爱情与金钱-第四章","url":"http://yoursite.com/2016/12/12/书虫系列：爱情与金钱-第四章/","content":"<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>警察很快就到了。他们来了很多人。一些警察带着相机去楼上莫莉的房间。两个侦探在厨房与帕瑞特医生谈话。这个家族成员在会客厅等候。今天又是一个大热天，窗户都是开着的。狗狗们安静在依偎在戴安娜脚下。房间里一片沉默。杰基抽着烟。他们等了很长时间。突然门开了，两位侦探走了进来。</p>\n<p>“早上好，我是华莱士探长，这是佛斯特探员。”探长面无笑容。他是一个大块头，穿着一条老旧的黑裤，戴着一顶黑帽子和披着外套。他穿外套是因为他总觉得冷。“昨天晚上有人在克拉克森女士的热牛奶里面放了安眠药。我们将要询问每一个人，麻烦安排一间房间。”</p>\n<p>罗格站了起来。“我是罗格·克拉克森。你们可以用我父亲的旧办公室。跟我来，就在这里。”</p>\n<p>办公室不是很大，但是有一张桌子和3、4张椅子。罗格打开了房间的窗户。</p>\n<p>“我想首先和你阿尔伯特姨夫谈谈，”华莱士探长说道。他摘下帽子和脱下外套，然后坐在办公桌后面。</p>\n<p>“当然可以，”罗格回答道，然后离开了房间。</p>\n<p>佛斯特探员在门口守着。他是一位个子很高的小伙子，一头黑发，笑起来很好看。他早上不是很高兴，因为他通常会在周末的早晨打网球。他是剑桥网球俱乐部最好的球员之一。</p>\n<p>阿尔伯特走了进来，然后坐下。</p>\n<p>“我打算问你一些问题，金先生，”探长说道，佛斯特探员正准备做笔录。</p>\n<p>阿尔伯特看着他的脚。“是，是，这是你们的职责，我知道。”</p>\n<p>“跟我讲述一下关于昨天晚上的事情。”华莱士探长平静地说。</p>\n<p>“你对克拉克女士很生气。”</p>\n<p>阿尔伯特这才目视华莱士探长。“是的，我很生气。每个人都很生气。罗格很生气。戴安娜想要钱去美国。然后，有个叫汤姆·布雷格的男人。。。他想要花园的一半作为他的农场。莫莉是一个富有的女人。我需要钱，因为我的妻子-莫莉的姐姐-病的很严重。我和莫莉说过。”</p>\n<p>“接下来发生什么？”</p>\n<p>“接着，莫莉对每个人都很生气，然后上楼去了。我们其他人去了厨房喝咖啡。杰基想要我们都去楼上和莫莉道晚安。她和莫莉住这里，所有她想让莫莉开心点。罗格第一个不愿意，他很生气，不想见他妈妈。”<br>“然后你去莫莉的房间见她了吗？”</p>\n<p>“是的，我有点疲倦然后第一个上楼的。我去莫莉的房间，再一次向她要钱。但是被拒绝了-莫莉不会给姐姐钱。”阿尔伯特停了下来，用手捂着眼睛。</p>\n<p>华莱士探长注视了阿尔伯特一会。“在你睡觉之后有听到动静吗？”</p>\n<p>“我想所有人都去了莫莉的房间道晚安。后来，我听到有人。。。他或她下楼。那是午夜的事情了。”</p>\n<p>“很好，金先生，谢谢你，你可以走了。”阿尔伯特离开了房间。</p>\n<p>华莱士探长双手抱头。“几点了？我饿了。我们了解了很多，但是我需要喝点咖啡。”</p>\n<p>“那我去厨房吧？”佛斯特探员问道。</p>\n<p>“欧，先不用。接下来我们见见杰基·克拉克森。”</p>\n<p>杰基走了进来然后坐下。她低下头看着自己的手，一言不语。</p>\n<p>“说说，你妈妈去过村里的药店拿药吗？”</p>\n<p>“是的，我妈妈通常晚上都会吃一片安眠药，所有她需要很多药。有时候她去药店取，有时候我去。这周四，我让皮特·霍布斯去取得药。他住在马路对面的房子，经常骑自行车去村里。”</p>\n<p>“我知道了。你妈妈想留着这间房子。你呢？你想搬离吗？”</p>\n<p>杰基抬头片刻然后又低于看着她的手，说道。“这是妈妈的房子。我爱我妈妈。她对我很好。”</p>\n<p>“昨晚你去你妈妈的房间看她了？”</p>\n<p>“是的，大家都去了。戴安娜给妈妈热了一杯牛奶，妈妈通常会在睡觉前喝一杯热牛奶。”</p>\n<p>华莱士探长双手枕在脑后。杰基显得很平静。“你妈妈说了什么？”</p>\n<p>杰基打开她的背包找香烟。问道：“我能抽烟吗？”</p>\n<p>“当然可以，这是你家，”华莱士探长回答道。他看着杰基。“你妈妈说了什么？”他又问了一遍。</p>\n<p>“她想下楼去，她想起狗狗们-她想给它们弄点晚饭。我回到了自己的房间，然后她下楼去了。”</p>\n<p>“大概什么时候？”</p>\n<p>“我不记得了。差不多午夜。”</p>\n<p>“那杯热牛奶在吗？”</p>\n<p>“它放在她床边的桌子上。”</p>\n<p>“你需要你妈妈的钱吗？”</p>\n<p>“不，探长。钱对我来说不重要。还有比钱更重要的东西。”杰基平静地回答道。</p>\n<p>“好吧，你阿尔伯特姨父想要钱，汤姆·布雷格想要花园。你一无所求？”</p>\n<p>杰基把烟熄灭，抬头看着探长。她的眼神突然变得愤怒。说道：“别忘了皮特·霍布斯。他因为我妈妈丢了工作。他想要杀了她，你知道的。至于戴安娜？你在她的包里发现了空药瓶。”</p>\n<p>华莱士探长听得很仔细。回答道：“我们会找每个人问话，卡拉克森小姐。”</p>\n<p>杰基沉默了片刻。问道：“你们需要来点三明治和咖啡吗？”</p>\n<p>“啊哈，好，麻烦了！”华莱士探长温和地回答道。“我很喜欢三明治和咖啡。”</p>\n<p>杰基离开了房间。华莱士探长思索着她为什么突然生气了?房子一片安静。</p>\n<p><strong>翻译要点</strong></p>\n<p>无</p>\n<h4 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h4><p>The police arrived very quickly．There were a lot of them．Some of them with cameras went upstairs to Molly’s room．Two detectives talked to Dr Pratt in the kitchen．The family waited in the sitting room．It was a hot day again and the windows were open．The dogs sat quietly at Diane’s feet．Nobody talked．Jackie smoked．They waited for a long time．Suddenly the door opened and the two detectives came in．</p>\n<p>‘Good morning．I am Detective Inspector Walsh and this is Sergeant Foster．’The Inspector did not smile．He was a big man in an old black suit and a black hat and coat．</p>\n<p>He wore a coat because he always felt cold．’Last night someone put sleeping tablets in Mrs Clarkson’s hot milk．We are going to question everybody，and we need a room，please．’</p>\n<p>Roger stood up．’I’m Roger Clarkson．You can have my father’s old office．Come with me，it’s along here，’</p>\n<p>The office was not a very big room，but there was a table and three or four chairs．Roger opened the window．</p>\n<p>‘I would like to talk first to your uncle，Albert King，’In-spector Walsh said．He took off his hat and coat and sat down behind the table．</p>\n<p>‘Of course，’said Roger and left the room．</p>\n<p>Sergeant Foster waited by the door．He was a very tall young man with black hair and a nice smile．He was not very happy this morning because he usually played tennis on Sunday mornings．He was one of the best players at the Cambridge Tennis Club．</p>\n<p>Albert came in and sat down．</p>\n<p>‘I’m going to ask some questions，Mr King，’the Inspector said，’and Sergeant Foster is going to write it all down．’</p>\n<p>Albert looked at his feet．’Yes，yes．It’s your job．I know that．’</p>\n<p>‘Tell me about last night，’Inspector Walsh asked quietly．’You were angry with Mrs Clarkson．’</p>\n<p>Albert looked at Inspector Walsh for the first time．’Yes，I was．Everyone was angry．Roger was angry．Diane wanted money to go to America．Then there’s a man called Tom Brig-gs…He wants half the garden for his farm．Molly was a rich woman．I need money because my wife Annie—Molly’s sister—is very ill．I told Molly this．’</p>\n<p>‘What happened next？’</p>\n<p>‘Well，Molly was angry with everyone and went upstairs．We went into the kitchen for coffee．Jackie wanted everyone to go up and say good night to Molly．She lives here with Molly so she wanted Molly to be happy．At first Roger said no．He was angry and didn’t want to see his mother．’</p>\n<p>‘And did you see Molly in her room？’</p>\n<p>‘Yes．I was tired and I went upstairs first．I went to Molly’s room and asked her for money again．But no—there was no money for her sister．’Albert stopped and put his hand over his eyes．</p>\n<p>Inspector Walsh watched Albert for a minute．’Did you hear noises after you went to bed？’</p>\n<p>‘Everyone went into Molly’s room to say good night，I think．Later，I heard someone…He—or she—went down－stairs．That was about midnight．’</p>\n<p>‘Very well，Mr King．Thank you，you can go now．’Albert left the room．</p>\n<p>Inspector Walsh put his hands behind his head．’What time is it？I’m hungry．We’re learning a lot，but I need some coffee．’</p>\n<p>‘Shall I go to the kitchen？’Sergeant Foster asked．</p>\n<p>‘Oh，no．Later．Let’s see Jackie Clarkson next．’</p>\n<p>Jackie came in and sat down．She looked down at her hands and said nothing．</p>\n<p>‘We found the empty bottle of your mother’s sleeping tablets in Diane’s room，’the Inspector said suddenly．Then he waited．Jackie’s face did not change and she said nothing．</p>\n<p>‘Tell me，did your mother get her tablets from the shop in the village？’</p>\n<p>‘Yes．My mother usually took a sleeping tablet every night so she needed a lot of tablets．Sometimes she got them from the shop，sometimes I did．On Thursday，I asked Peter Hobbs to get them．He lives in the house across the road，and he of－ten goes to the village on his bicycle．’</p>\n<p>‘I see．Your mother wanted to stay in this house．How about you？Did you want to move？’</p>\n<p>Jackie looked up for a minute and then down at her hands a－gain．’This is Mother’s house．I loved my mother．She was good to me．’</p>\n<p>‘Did you see your mother in her room last night？’</p>\n<p>‘Yes，everyone did．Diane made hot milk and took it to Mother．She usually drank a cup of hot milk before she slept．’</p>\n<p>Inspector Walsh put his hands behind his head．Jackie was very quiet．’What did your mother say？’</p>\n<p>Jackie opened her bag and looked for a cigarette．’Can I smoke？’</p>\n<p>‘Of course．This is your house，’Inspector Walsh said．He watched Jackie．’What did your mother say？’he asked again．</p>\n<p>‘She wanted to go downstairs again．She remembered the dogs—she wanted to get some dinner for them． I went to my room and she went downstairs．’</p>\n<p>‘What time was this？’</p>\n<p>‘I don’t remember．About midnight，I think．’</p>\n<p>‘And the cup of hot milk？’</p>\n<p>‘It was on the table by her bed．’</p>\n<p>‘Did you need your mother’s money？’</p>\n<p>‘No，Inspector．Money is not important to me．There are more important things，’Jackie said quietly．</p>\n<p>‘Well，your uncle Albert wanted money．Tom Briggs wanted the garden．You wanted nothing？’</p>\n<p>Jackie finished her cigarette and looked up at the Inspector．Her eyes were suddenly angry．’Don’t forget Peter Hobbs．He lost his job because of my mother．He wanted to kill her，you know．And what about Diane？You found the empty bottle in her bag．’</p>\n<p>Inspector Walsh listened carefully．’We’re going to question everyone，Miss Clarkson．’</p>\n<p>Jackie said nothing for a minute．’Would you like some sandwiches and coffee，Inspector？’</p>\n<p>‘Ah！Yes，please！’Inspector Walsh said warmly．’I would like sandwiches and coffee very much．’</p>\n<p>Jackie left the room．Inspector Walsh thought about her．Why was she suddenly angry？The room was quiet．</p>\n"},{"title":"Belief in a Just World","url":"http://yoursite.com/2016/12/08/世界公正信念/","content":"<p><div align=\"center\"><br><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/embrace-01.jpg\" alt=\"Embrace the world\"></div></p>\n<p>前几天微信朋友圈被一篇名为《罗一笑：你给我站住》刷屏，文章讲述了一个身患白血病的女孩子，名为罗一笑，文章的封面就是她，一个脸上挂着天真可爱的笑容的女孩。其父罗某为了给女儿筹集医药费，在网上发布了一篇饱含父爱的文章。文章的内容就不赘述了，毕竟这已经不是我这篇博客论述的重点所在，何况在网上随便搜索这个有点新意的文章名就能轻易找到原文或者转载的文章。</p>\n<p>我是在微信朋友圈看到这篇文章的，对于这类带有“乞讨性质”的文章，我一般都是持怀疑态度并习惯性忽略。但是这次我却被这个文章名以及封面上小女孩的笑容所吸引，卸下来了防备，看完全文并转发了朋友圈，以此表达自己的爱心与祝福。</p>\n<p>然后，今天在微信朋友圈看到了另外一篇文章，这篇文章戳穿了“罗一笑事件”的骗局，揭露其中的内幕。我这才意识到这可能又是一场网络营销的经典案例，而且估计自己和很多富有同情心的民众一样已经成为炮灰。</p>\n<p>讲真，世上最让人感到愤怒的情况可能莫过于三种：一是被利用；二是被欺骗；三是被迫承认自己的愚蠢。当着三种情况同时在一件事情发生，我相信内心的那种怒火的不言而喻的。伤害最深的就是那些满怀善意转发朋友圈的人。</p>\n<p>截止目前，这件事的后续报道仍是接二连三，一度占领着各种媒体的头条。报道的内容也是各执一词，标题也是博人眼球，这个很China。只是，我觉得事情是真是假已经不很重要的，重要的是它对社会造成的伤害已经成事实。聊聊群众为什么会一次又一次的被欺骗似乎更有意义点。</p>\n<p>不过，我仅从个人的角度来分析。毕竟我没有做广泛的群众调查，也就无法知晓广大群众的真实想法。但是，我自己作为一个普通群众中的一员且同样是炮灰之一，说说自己的想法，也许能找到与我产生共鸣的人？</p>\n<p>言归正传，撇开个人主观方面的差异，我觉得有两个客观的原因是此次我“沦陷”的主要推手。下面具体说说我的个人的理论依据。</p>\n<p><strong> 公正世界信念 </strong></p>\n<p>第一个是公正世界信念，我一直相信这个理论是真实存在的。这个理论是在1965年，由美国心理学家Lerner首次提出的“公正世界信念(Belief in a Just World，BJW )”的概念：个体有一种需要：相信他们生活在一个公正的世界里，在这个世界里人们得其所应得，所得即应得。</p>\n<p>美国心理学家Lerner及其同事研究了美国五六十年代的种种社会现象，比如说人们在没有细究事情的原委之前，就会贸然地认为高空作业摔伤的工人一定是因为工作马虎不认真、严重车祸的受害者一定是因为不遵守交通规则或飙车、流浪汉流落街头就是因为他们好吃懒做不愿意去工作等等。基于此，Lerner提出了著名的公正世界信念的概念：“个体有这样一种需要：相信他们生活在一个公正的世界里。在这样一个世界里，人们得其所应得。这种世界是公正的信念，可使个体相信他们所处的物理和社会环境是稳定有序的，从而有利于个体适应这些环境。如果这种信念缺失，个体就很难使自己致力于长远目标的追求，难以遵循社会规范行事。由于公正世界信念在个体适应方面具有重要的功能，所以人们极不情愿放弃这种信念，并且一旦遇到例证表明世界是不公正的、无秩序的，他就会陷入忧虑烦恼之中。”</p>\n<p>反观“罗一笑事件”，这个事件里面有几个关键因素，分别是小女孩，白血病，父爱。一个天真可爱的小女孩遭遇命运的不公平，承受白血病这种不可控的天灾带来的痛苦。更何况主角是一个小女孩，一个无辜的孩子，还没来得及理解死亡的意义就要面对死亡威胁。这显然不是我们愿意看到的，我们希望自己生活在一个有爱的世界里，同时也希望未来某个时刻如果自己的孩子在遇到困境的时候能得到社会援助。因此，我们会很容易同情心泛滥，献出自己的爱心，为筑建一个心中期望的世界添砖加瓦。也许如果主角不是儿童或未成年人，而是一个成年人，我想也许会有一部分将他/她的不幸遭遇归责于其个人不良的生活习惯，认为一定是他/她不注意个人卫生或是缺乏自控力才染上重病，比如吸烟、酗酒等。因此，我们心里很可能不会去同情他/她，甚至觉得他/她罪有应得。大多数人相信一个自控力强且生活习惯好的人得到的应该更好的生活，不愿意接受病魔不期而至的事实。此外，这个事件还要一个不能忽视的因素：父爱。正所谓父爱如山，母爱似海。这两种世间最伟大也是最无私的爱，它们无疑是这个社会的道德基石。除去有童年阴影的少数人，大多数人都是在父爱和母爱的沐浴下长大的。因此，我们几乎丝毫不会怀疑它们的真实性，内心也期望它们是普遍存在的。这也是为什么我的心理防线会被攻破的原因所在。然而，当事件的内幕被曝光之后，大家发现自己的善意被愚弄了，纷纷开始将矛头指向罗父还有相关的媒体人，网上瞬间谴责声一片，此时已经没多少人再将注意力放在罗一笑的病情上了，而是急于发泄心中的怒火。这也正是公正世界信念的体现，大家都倾向于相信自己所处的物理和社会环境是稳定有序的，因为这样才有助于我们长期目标的发展。</p>\n<p>再次声明，我仅仅是结合“罗一笑事件”分析这种心理现象，我个人为罗一笑小盆友的遭遇感到同情，也不怀疑罗父爱女心切的心情。我要批判的不是他们父女，而是怒斥那些利用群众心理软肋进行网络营销，谋求个人利益的媒体人。</p>\n<p><strong> 心理阈值效应 </strong></p>\n<p>第二个是心理阈值效应。阈值效应是一个普遍存在于社会各个领域的现象，包括经济、心理、学习等。在经济学中经常提及一个概念，叫做“边际递减效应”。何为“边际递减效应”？我记得一个文革时期的经济学家给出的解释最为恰当和接地气，故事大概内容是：在大跃进之后和文革之前的这段时间，国内经济不景气，生产力低下，粮食产量低。于是，村委会鼓励群众去收割完的稻田里捡稻穗，减少粮食的浪费。刚开始大家都在距离家近的稻田里捡稻穗，并且每天都能满载而归。过了一段时间，附近稻田的稻穗都被捡完了，人们不得不去离家更远的稻田捡稻穗，捡满一箩筐之后再背回家。随着时间的推移，人们离家的距离越来越远，稻穗也越捡越少，渐渐地人们每天在捡稻穗的过程中消耗的能量等于或大于捡到的稻穗的能提供的能量，常常饿着肚子都捡不满一筐，这时候如果继续捡稻穗则得不偿失。这就是边际递减效应，而这个节点就是阈值点。小于这个阈值时则收获大于消耗，超过这个值则收获小于消耗，且二者的比值呈递减趋势。</p>\n<p>心理阈值效应也是类似。当某件事情触发了心理的阈值，则会适得其反。当年轰动一时的“郭美美炫富事件”爆出红十字会的腐败内幕，让整个社会的信任基础遭受重创，此后多数人都不再愿意捐钱给红十字会。然而，这个阈值是动态的。经过一段时间的冷却或者其他事件转移注意力，加上期间被一些正能量的事迹所影响，愿意再次相信社会是和谐美好的，因此人们的心理情绪也会慢慢回归阈值以下，但是也许再也回不到之前的水平了，也就意味人们比之前更容易达到阈值点。假设社会上频繁的出现一些破坏社会信任的负面事件，会导致人们越来越冷漠，最终对所处的社会彻底失去信任。</p>\n<p>我想“罗一笑事件”背后的策划者毋容置疑地再次挑战了人们的阈值限度，造成了不可逆的伤害。Double Kill! Nice!</p>\n<p><strong> 小结 </strong></p>\n<p>罗曼·罗兰说过，世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它。虽然说我所处的社会一次又一次的面临信任危机，但是我还是选择去拥抱它，因为我看到了很多和我一样被欺骗的群众，让我知道身边的大多数人都是心存善意的。不过，我可能需要换一种更为理智的拥抱姿势罢了。</p>\n"},{"title":"书虫系列：爱情与金钱-第三章","url":"http://yoursite.com/2016/12/07/书虫系列：爱情与金钱-第三章/","content":"<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>第二天一大早，房子一切平静。突然，从罗格隔壁的房间里传来一阵哭声，那是他妈妈的房间。罗格睁开眼睛看了看时间，现在是将近7点钟。他走下床然后轻轻地的打开门。与此同时，她妈妈的房间也是打开了，戴安娜从里面走出来，她的脸色显得很苍白。</p>\n<p>“罗格!妈妈她！我刚给她送一杯咖啡过来然后发现她已经死了。她死了。。。死在床上。”她哭着说。</p>\n<p>罗格马上走到他妈妈的房间门口往里面看去。窗户是打开的但是房间是暖和的。莫莉躺在床上，一只手枕在头下。罗格径直走到床边，把手放在她妈妈的手臂上。莫莉的身体已经冷了。在床边的小桌上是一杯热咖啡和一个空杯子。</p>\n<p>“我去打电话给医生，”戴安娜说</p>\n<p>“她死了，”罗格缓慢地说道，他的脸也变得苍白。“妈妈死了！”</p>\n<p>戴安娜走到房间的门口。“我去打电话给医生，”她又说道</p>\n<p>“等一下！”罗格喊道，“我们先告诉其他家庭成员。”</p>\n<p>“其他人！没人爱妈妈！”戴安娜走出房间然后走下楼。</p>\n<p>罗格跟在后面慢慢地走下楼然后站在电话旁边。</p>\n<p>“普拉特医生，我是戴安娜·克拉克森。我的妈妈-她死了，你能马上过来吗？”</p>\n<p>戴安娜放下电话。“这不是真的，罗格！妈妈死了！爸爸去年冬天过世，现在妈妈也死了。”戴安娜开始哭了起来。</p>\n<p>“别哭了，戴安娜，”罗格说道。“我们上楼去告诉阿尔伯特姨父和杰基。”</p>\n<p>“不，你去告诉他们!没人是爱妈妈的。你们不必难过。看看你们，你们想要她的钱。不过如此。”</p>\n<p>罗格突然想揍戴安娜。“安静点！”他反驳道。“你呢？你不爱妈妈，你也只是惦记她的钱。别说风凉话！”</p>\n<p>“没错，”戴安娜说道。“哦，我不能再呆在这房里了。我要出去透透气。我要带狗去河边。”</p>\n<p>“不行，”罗格说道。“医生快到了，我想要你留在这里。”</p>\n<p>戴安娜一言不发。她走进厨房，狗也立刻跟了过去。“多漂亮的狗!爸爸爱你们，妈妈也爱你们。现在我会爱你们的。”她打开后门，带着狗一起出去了。</p>\n<p>罗格停留在原地，站在电话旁边。“没错，”他心想，“我喜欢钱。我需要钱，而且我现在富裕了。事情对我来说都变得容易。但是妈妈…我为什么不多疼爱她一点？可现在她死了。”罗格慢慢地走上楼，他想在普拉特医生到来之前穿好衣服。</p>\n<p>普拉特医生是一个发福的矮个子，头发比较少。他是这个家族的医生，他对所有克拉克森家族成员都很了解。他立刻上楼查看莫莉的尸体。他仔细端详床边上的那杯咖啡和空杯子。</p>\n<p>“抱歉，罗格，”他说道。“戴安娜人呢？是她打电话给我的。”</p>\n<p>“她带着狗出去了，”罗格回答说，“她冲我发火-冲每个人发火。”</p>\n<p>普拉特医生沉默片刻，“事情变得棘手，我得打电话给警察，罗格。”</p>\n<p>“报警！为什么？发生什么事了？”</p>\n<p>“我也不清楚。你妈妈之前没有生病。我周四见她的时候，她状态很好。她为什么会死？我无法理解。我要查明真相。”</p>\n<p>罗格走到窗前向花园望去。这是夏天一个美丽的早晨。天空蔚蓝，花园翠绿。一切都很平静。他的妈妈很喜爱这个花园。但是汤姆·布雷格想占为己有。然而罗格也想要这个花园。罗格觉得事情越来越糟。</p>\n<p>“你妈妈服用了安眠药，”普拉特医生说道。“你知道吗？她周四买了一瓶新的安眠药，但是在她房间没有找到”</p>\n<p>“我不知道，”罗格回答道。“好吧，我们下楼，你可以报警。”</p>\n<p>罗格走进厨房弄了点咖啡。恰好这时候戴安娜带着狗走进来。</p>\n<p>“罗格，”她说。“听我说，我很抱歉。我刚才因为生气说了一些气话。”</p>\n<p>“没事。”罗格回答道。“给，喝点咖啡。普拉特医生正在打电话给警察。你知道妈妈服用了安眠药吗？唷，药瓶没有在她房间。”</p>\n<p>“什么？我没搞明白。”戴安娜接过咖啡正准备喝。她的眼睛看起来又大又黑。</p>\n<p>刚好这时普拉特医生来的厨房，“警察马上就到，”他说，“戴安娜，我为你妈妈难过。”</p>\n<p>“普拉特医生，我想告诉你昨晚发生的事情。所有人都很生气。。。”</p>\n<p>“住口！”罗格急忙说。</p>\n<p>“戴安娜开口前从来不过大脑的，”他生气地想。</p>\n<p>戴安娜没有理罗格，“昨晚妈妈睡得很早，因为所有人。。。”</p>\n<p>“别告诉我，”普拉特医生说，“你可以告诉警察。”</p>\n<p>罗格的脸变得胀红。突然间他觉得有些害怕。“警察会找每一人谈话，然后问些问题，”他想。“他们想得到答案，这将会很棘手。”他喝完咖啡然后起身。</p>\n<p>“我去楼上，”他说。“我准备去告诉阿尔伯特姨夫和杰基关于妈妈。。。还有报警的事情。”</p>\n<p><strong>翻译要点</strong></p>\n<ol>\n<li>white ：可表示苍白，但是一般都是用pale</li>\n<li>that’s all : 不过如此</li>\n<li>well ：做感叹词，可用于表示惊讶，怀疑，接受；具体含义结合上下文判断</li>\n</ol>\n<h4 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h4><p>Chapter 3 </p>\n<p>Early next morning the house was quiet. Suddenly there was a cry from the room next to Roger’s, his mother’s room. Roger opened his eyes<br>and looked at the clock. It was nearly seven o’clock.</p>\n<p>He got out of bed and opened the door quietly. At the same time the door of his mother’s room opened and Diane came out. Her face was very white. </p>\n<p>‘Roger! It’s Mother! I brought a cup of coffee for her and I found her dead. She’s dead…dead in her bed,’ she cried.</p>\n<p>Roger went quickly to the door of his mother’s room and looked in. The window was open but the room was warm. Molly was on the bed, one hand under her head. Roger went across to the bed and put his hand on her arm. It was cold. On the little table next to the bed was a hot cup of coffee and an empty cup. </p>\n<p>‘I’m going to call the doctor,’ Diane said.</p>\n<p>‘She’s dead,’ Roger said slowly. His face, too, was white. ‘Mother is dead!’ </p>\n<p>Diane walked across the room to the door. ‘I’m going to phone the doctor,’ she said again.</p>\n<p>‘Wait a minute!’ Roger called. ‘Let’s tell the family first.’</p>\n<p>‘Family! Nobody loved Mother!’ Diane went out and ran downstairs.</p>\n<p> Roger slowly went downstairs after her and stood by the telephone. </p>\n<p> ‘Dr Pratt, this is Diane Clarkson. It’s my mother—she’s dead. Can you come quickly?’ </p>\n<p> Diane put the phone down. ‘It isn’t true, Roger! Mother dead! Daddy died last winter, and now Mother.’ Diane began to cry.</p>\n<p> ‘Don’t cry, Diane,’ Roger said. ‘Let’s go upstairs and tell Uncle Albert and Jackie.’</p>\n<p>‘No! You tell them! Nobody loved Mother. You aren’t sorry. Look at you! You want her money. That’s all.’ </p>\n<p>Roger suddenly wanted to hit Diane. ‘Be quiet!’ he said. ‘What about you? You didn’t love Mother. You wanted her money, too. Don’t forget that!’ </p>\n<p>‘It’s true,’ Diane said. ‘Oh, I can’t stay in this house. I’m going out. I’m going to the river with the dogs.’</p>\n<p>‘No,’ Roger said. ‘The doctor’s coming and I want you here.’ Diane said nothing. She went into the kitchen and at once the dogs got up and came to her. ‘Beautiful dogs! Daddy loved you and Mother loved you. Now I’m going to love you.’ She opened the back door and went out with the dogs. </p>\n<p>Roger did not move. He stood by the telephone. ‘It’s true,’ he thought. ‘I am happy about the money. I needed money, and now I’m rich. Things are going to be easier for me now. But Mother…why didn’t I love her more? And now she’s dead.’ Slowly, Roger went back upstairs. He wanted to dress before Dr Pratt arrived. </p>\n<p>Dr Pratt was a little fat man without much hair. He was the family doctor and he knew all the Clarkson family very well. He went upstairs at once and looked at Molly’s body. He looked carefully at the cup of coffee and the empty cup on the table next to her bed. </p>\n<p>‘I’m sorry, Roger,’ he said. ‘Where is Diane? She phoned me.’ </p>\n<p>‘She went out with the dogs,’ Roger said. ‘She was angry with me—angry with everyone.’ </p>\n<p>Dr Pratt said nothing for a minute. ‘This is going to be very difficult. I’m going to phone the police, Roger.’ ‘Police! Why? What’s wrong? ‘I don’t know. Your mother wasn’t ill. I saw her on Thursday and she was very well. Why did she die? I don’ t understand. I want to find out.’ </p>\n<p>Roger went across to the window and looked out at the garden. It was a beautiful summer  morning. The sky was blue and the garden was green. It was all very quiet. His mother loved this garden. But Tom Briggs wanted the garden. And Roger wanted the garden, too. Roger felt worse and worse. </p>\n<p>‘Your mother took sleeping tablets,’ Dr Pratt said. ‘Did you know? On Thursday she had a new bottle of tablets, but I can’t find it here in her room.’</p>\n<p>‘I didn’t know,’ Roger said. ‘Very well. Let’s go down-stairs and you can phone the police.’</p>\n<p>Roger went into the kitchen and made some coffee. Just then Diane came in with the dogs. </p>\n<p>‘Roger,’ she said. ‘Look, I’m sorry. I was angry and said some angry things.’ </p>\n<p>‘It doesn’t matter,’ Roger said. ‘Here you are, have some coffee. Dr Pratt is phoning the police. Did you know Mother took sleeping tablets? Well, the bottle is not in her room.’</p>\n<p>‘What? I don’t understand.’ Diane took the coffee and began to drink. Her eyes looked big and dark. </p>\n<p>Just then Dr Pratt came into the kitchen. ‘They’re coming at once,’ he said. ‘Diane—I’m sorry about your mother.’</p>\n<p>‘Dr Pratt, I want to tell you about last night.Everyone was very angry…’</p>\n<p>‘Be quiet!’ Roger said quickly.</p>\n<p>‘Diane never thinks before she opens her mouth,’ he thought angrily. </p>\n<p>Diane did not look at Roger. ‘Last night Mother went to bed early because everyone…’ </p>\n<p>‘Don’t tell me,’ Dr Pratt said. ‘You can tell the police.’</p>\n<p>Roger’s face went red. Suddenly he felt afraid. ‘The police are going to talk to everyone, and ask questions,’ he thought. ‘And they’re going to want answers. It’s going to be very difficult.’ He finished his coffee and stood up.</p>\n<p>‘I’m going upstairs,’ he said. ‘I’m going to tell Uncle Albert and Jackie about Mother…and about the police.’</p>\n"},{"title":"书虫系列：爱情与金钱-第二章","url":"http://yoursite.com/2016/12/02/书虫系列：爱情与金钱-第二章/","content":"<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>在周四晚上7点钟，杰基站在窗前，一辆车缓慢地朝前门开去然后停了下来。一个高个子白头发的男人走下车，他叫阿尔伯特，莫莉妹妹的丈夫。</p>\n<p>“阿尔伯特叔叔到了，”杰基说道，“他总是迟到。”</p>\n<p>她走出房屋，打开前门。阿尔伯特进屋径直走向莫莉。</p>\n<p>“欧，亲爱的，我来太迟了，对不起，”阿尔伯特说道。“今天五十岁了！多么完美的打扮！”</p>\n<p>莫莉面无笑意，“谢谢，阿尔伯特，我们都变老了。”今天晚上她穿一身黑色衣服，两条黑狗依偎在她的脚上。“现在人都到齐了，让我们去吃晚饭吧，”她说道。</p>\n<p>所有人都站了起来走向餐桌。</p>\n<p>“餐桌看起来很棒，杰基，好美的花！”戴安娜说道，她是一个漂亮的女孩，有一头黑色长发和一双蓝色的眼睛。她穿着一条红色长裙。</p>\n<p>阿尔伯特坐在罗杰旁边，罗格是莫莉的儿子，次子。他住在康桥，有一栋豪华的房子。</p>\n<p>“一个名叫皮特的家伙在半路拦住我，”阿尔伯特说道。“这家伙是谁？他对你很生气，莫莉。”</p>\n<p>“他叫皮特·福布斯，住在马路对面的房子，”杰基马上答道。她看了一眼桌子对面的莫莉，继续说道：“他上个星期刚丢了工作而且对所有人心怀怨恨。”</p>\n<p>“他讨厌的人是莫莉，”阿尔伯特反驳道。</p>\n<p>莫莉默不作声。所有人开始用餐。</p>\n<p>“安妮姨妈最近怎么样？”杰基问道。</p>\n<p>“她现在情况很糟，”阿尔伯特说。“她一直躺在床上，并且需要一个护士24小时陪护。”</p>\n<p>“我对此表示同情，”莫莉说。</p>\n<p>阿尔伯特停止用餐，看着莫莉。说道：“你知道的，这一切很难并且开销很大。安妮因为你不去看望她而感到难过，莫莉。她很爱你。你是她的小妹妹，你心里清楚。”</p>\n<p>莫莉闭上眼睛沉思片刻，回答道：“这些我都知道，阿尔伯特。我虽然今年50岁了，但是我始终是她的小妹妹。好了，我们晚点再聊这个话题。”</p>\n<p>阿尔伯特听后笑了。“好吧，我们晚点再聊。你总是晚点再谈，莫莉。总是把问题留给明天，从不愿意今天解决。”</p>\n<p>杰基注视她的妈妈。她妈妈很是生气。莫莉从不想谈论她的姐姐安妮并且不愿意去探望她，因为她病的很严重。</p>\n<p>“裙子真漂亮，戴安娜。新买的吗？”杰基问道。</p>\n<p>“谢谢夸奖，杰基。是的，新买的而且很贵。我周三买的。”戴安娜笑着对杰基说。</p>\n<p>“你所有的东西都贵，”杰基说。她回想起周二那通戴安娜要钱买火车票的电话。</p>\n<p>“我不喜欢便宜货，”戴安娜说道。“而且过不久我可能需要更多钱，我想去美国。你能帮我一把吗，杰基？”</p>\n<p>“欧，不可能。”罗格回答道。“没人愿意帮你，戴安娜。你不喜欢工作，我们都知道，但是我们所有人都希望你找一份工作。”</p>\n<p>戴安娜呵呵一笑，回答道：“无所谓，罗格。我不需要你的帮助。妈妈会一直帮我。妈妈最爱我了。”她笑的有点突然，一个短暂且美丽的笑容。但是她的眼神很冷漠。</p>\n<p>杰基看着她的妈妈。莫莉的脸色苍白。杰基不理解为什么她妈妈会这样。难道她妈妈害怕戴安娜？杰基希望她妈妈今天过得开心点。</p>\n<p>“再来点肉吗？阿尔伯特姨父。”杰基问道。“罗格，你能给大家添点饮料吗？”</p>\n<p>罗格起身准备去取更多的葡萄酒给大家，说道：“这酒不错。”</p>\n<p>莫莉第一次笑了。“是的，你父亲爱喝这个酒，他经常喝。”</p>\n<p>“是的，”阿尔伯特附和道，并且看了莫莉一眼，说：“也不便宜。”</p>\n<p>“这个周末你想见布雷格先生吗。罗格？”杰基马上岔开话题，“他是农场新来的帮手。他想见你。”</p>\n<p>“布雷格？布雷格？”莫莉嘀咕了两句，突然变得愤怒，呵斥道：“不要在我面前讨论这个男人，我不喜欢他。他想将我半个农场占为己有。他说他需要更多的土地。我不想让他来我家。他成天脏兮兮的并且牙齿很丑。”</p>\n<p>杰基起身并拿起她的包，说道：“不好意思，我想抽根烟。”</p>\n<p>“抽烟！你总说烟不离口，”莫莉说道。“我不喜欢你这样，抽烟对你没有好处。”</p>\n<p>杰基开始抽了起来。她很生气但是没有反驳。她想要她妈妈今晚过得开心，尽管这很难实现。</p>\n<p>罗格喝了几口酒，“好了，妈，布雷格先生也许是对的。这个花园很大，你知道的，”他说道。“打理花园对你来说任务繁重。何况房间也很大。你现在已经50岁了，你需要注意自己的身体。”</p>\n<p>“罗格，我不需要一个护士，你知道的！我每天都在花园里劳作；在那里我很开心。”莫莉站起来说道。“我知道你们都觊觎我的钱。你们到这里来只是为了一顿免费的晚餐，而不是想见我才来。你们都不爱我。你们想要我的房间和我的钱。好啊，你们可以一直等下去。在我死之前，没人可以从我这得到更多的钱。”</p>\n<p>“别这么说，妈妈！”杰基哭着说。</p>\n<p>莫莉穿过房间走向门口，说道：“我现在有点不舒服，我上楼休息了。”</p>\n<p>莫莉离开了房间，其他人都坐在原地。</p>\n<p>“总有一天我要杀了那个女人，”戴安娜小声地说。</p>\n<p>罗格看了一眼戴安娜但是没说什么。</p>\n<p>阿尔伯特慢慢地上下摇头，“不舒服，她是生气了，一定是的，”他说道。“莫莉总是谈到钱就发火。她为什么就不能对她姐姐好点？安妮不久后就快死了，莫莉知道的。”</p>\n<p>杰基抽完烟然后站起来，说道：“大家想喝咖啡吗？去厨房吧，我们在那喝。”</p>\n<p><strong>翻译要点</strong></p>\n<p>无</p>\n<h4 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h4><p>2 Chapter</p>\n<p>It was seven o’clock on Saturday evening．Jackie stood at the window．A car drove slowly up to the front door and stopped．A tall man with white hair got out，It was Albert，the husband of Molly’s sister．</p>\n<p>‘Here’s Uncle Albert，’Jackie said．’Always late．’</p>\n<p>She went out of the room and opened the front door．Albert came in and went at once to Molly．</p>\n<p>‘Oh，dear．I’m very late．I am sorry，’Albert said．’Fifty years old today！What a wonderful dress！’</p>\n<p>Molly did not smile．’Thank you，Albert．We’re all getting older．’Tonight she wore a long black dress，and the two black dogs sat at her feet．’Everyone is here now．Let’s go in to dinner，’she said．<br>Everyone stood up and went to the table．</p>\n<p>‘The table looks nice，Jackie．What wonderful flowers！’Diane said．She was a beautiful girl，with long black hair and dark blue eyes．She wore a long red dress．</p>\n<p>Albert sat down next to Roger Roger was Molly’s son，her second child．He lived in Cambridge，in an expensive house．</p>\n<p>‘Someone called Peter stopped me down the road，’Albert said．’Who is he？ He’s very angry with you，Molly．’</p>\n<p>‘That’s Peter Hobbs，from the house across the road，’Jackie said quickly．She looked across the table at Molly．’He lost his job last week and he’s angry with everyone．’</p>\n<p>‘It’s Molly he doesn’t like，’Albert said．</p>\n<p>Molly said nothing．Everyone began to eat．</p>\n<p>‘How is Aunt Annie？’Jackie asked．</p>\n<p>‘She’s much worse now，’Albert said．’She stays in bed all the time．She needs a nurse twenty-four hours a day．’</p>\n<p>‘I am sorry，’Molly said．</p>\n<p>Albert stopped eating and looked at Molly．’It’s very difficult and very expensive，you know．Annie feels very unhappy because you don’t visit her，Molly．She loves you very much．You are her little sister；you know．’<br>Molly closed her eyes for a minute．’ I know that，Albert．I am fifty years old，but I am always her“little”sister．Well，we can talk about it later．’</p>\n<p>Albert laughed．’Oh yes，we can talk later．It’s always later with you，Molly．Always tomorrow．Never today．’</p>\n<p>Jackie watched her mother．Her mother was angry with Albert．Molly never liked talking about her sister Annie and she did not like visiting her because she was very ill．</p>\n<p>‘That’s a beautiful dress，Diane．Is it new？’Jackie asked．</p>\n<p>‘Thank you，Jackie．Yes，it’s new，and very expensive．I got it on Wednesday，’Diane said．She smiled at Jackie．</p>\n<p>‘All your things are expensive，’Jackie said．She remembered the phone call on Thursday about the train ticket．</p>\n<p>‘I don’t like cheap things，’Diane said．’And I’m going to need more money soon．I want to go to America．Can you help me，Roger？’</p>\n<p>‘Oh no，’Roger said．’Nobody wants to help you， Diane．You don’t like working，we all know that，but we all want you to get a job．’</p>\n<p>Diane laughed．’It doesn’t matter，Roger．I don’t need your help．Mother always helps me．Mother loves me best．’She suddenly smiled，a quick，beautiful smile．But her eyes were cold．</p>\n<p>Jackie looked at her mother．Molly’s face was white．Jackie did not understand．Was her mother afraid of Diane？Jackie wanted her mother to be happy today．</p>\n<p>‘Would you like some more meat，Uncle Albert？’Jackie asked．’Roger，can you give everyone some more to drink？</p>\n<p>Roger got up and began to give more wine to everyone．’This is good wine，’he said．</p>\n<p>Molly smiled for the first time．’Yes，your father loved this wine．He often drank it．’</p>\n<p>‘Yes，’Albert said，and looked at Molly．’Expensive，too．’</p>\n<p>‘Would you like to meet Mr Briggs this weekend，Roger？Jackie asked quickly．’He’s the new man at the farm．He wants to meet you．’</p>\n<p>‘Briggs？Briggs？’Molly said，suddenly angry．’Don’t talk to me about that man．I don’t like him．He wants half my garden for his farm．He needs more land，he says．I don’t want him in my house．He’s always dirty and he has bad teeth．’</p>\n<p>Jackie stood up and got her bag．’Excuse me，I want a cigarette．’</p>\n<p>‘Cigarettes！Always a cigarette in your mouth，’Molly said．’I don’t like it．Cigarettes aren’t good for you．’</p>\n<p>Jackie began to smoke．She felt angry but she said nothing．She wanted her mother to be happy this evening，but it was very difficult．</p>\n<p>Roger drank some more wine．’Well，Mother，perhaps Mr Briggs is right．The garden is very big，you know，’he said．’It’s a lot of work for you．The house is big，too．You’re fifty now．You need to be more careful．’</p>\n<p>‘Roger！I don’t need a nurse，you know！I work in the garden every day；I feel happy there．’Molly stood up．’I know you all want my money．You come here for a free dinner，you don’t want to see me．You don’t love me．You want my house，and my money．Well，you can all wait．No-body is getting more money from me，not before I die！’</p>\n<p>‘Don’t say that，Mother！’Jackie cried．</p>\n<p>Molly walked across the room to the door．’I feel ill now．I’m going upstairs to bed．’</p>\n<p>Molly left the room．Nobody moved．</p>\n<p>‘One day I’m going to kill that woman，’Diane said quietly．</p>\n<p>Roger looked at Diane but said nothing．Albert moved his head slowly up and down．’Ill！She’s angry，that’s all，’he said．’Molly always gets angry about money．Why can’t she be good to her sister？Annie’s going to die soon．Molly knows that．’</p>\n<p>Jackie finished her cigarette and stood up．’Would everyone like some coffee？Come into the kitchen and let’s drink it there．’</p>\n"},{"title":"书虫系列：爱情与金钱-第一章","url":"http://yoursite.com/2016/12/01/书虫系列：爱情与金钱-第一章/","content":"<h4 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h4><p>克拉克森一家居住在靠近剑桥的郊区，距离最近的村庄有半英里，距离康桥河有一英里。他们有一栋大面积的老房子，屋后是一个漂亮的花园，里面有很多花和大树。</p>\n<p>正值七月，在某个周四的早上，杰基从花园进入屋内。她是一个高个子的胖女人，今年三十岁。虽然现在是一年中最热的时候，但是她却穿了一条亮棕色的裙子和黄色衬衣。她刚要去厨房喝点水，这时候电话响了。</p>\n<p>“剑桥1379号”，杰基回应道。</p>\n<p>“你好，我是戴安娜，我想和老妈聊一句。”</p>\n<p>“老妈不在家”，杰基答复道，“她看医生去了。”</p>\n<p>“为什么去看医生？老妈怎么了？”</p>\n<p>“没什么大碍”，杰基说，“你为什么打电话回家？周末准备回来吗？老妈希望你们都回家。”</p>\n<p>“恩，我想回去，”迪恩说，“我打电话是因为我没有钱买回家的火车票了。”</p>\n<p>“没钱！老妈一直给你寄钱！”</p>\n<p>“不多说了，电话费很贵，”迪恩冷淡地辩解道，“告诉老妈，我需要钱买票。”</p>\n<p>杰基放下电话，从包里拿出一根烟然后抽了起来。她妹妹一直向家里要钱让她很生气。戴安娜今年二十岁，是家里最小的孩子，现在在伦敦生活，住在一个大房子的单间里。</p>\n<p>她想成为一名歌手。她歌唱得很好但是从不愿意找工作。</p>\n<p>杰基回到厨房准备做些三明治。这时候后门开了，她妈妈回来了。</p>\n<p>“真热！”茉莉说道。她脱下她的帽子放在桌上。她是一个高个子的黑人妇女，有一双美丽的眼睛。<br>两条大黑狗跟随茉莉来到厨房，径直跑到她身边围着她转。她坐了下来，摸着它们的头。</p>\n<p>杰基把做好的三明治放桌上。“老妈，”她说道，“戴安娜打了电话回来，她想要一些钱用来买火车票。”</p>\n<p>茉莉闭着眼睛沉思了一会，然后站了起来。“我希望你下午整理一下房子为周末的家庭聚会做准备，”她说道，“哦，还有麻烦你晚点去趟镇上帮我把药拿回来。”</p>\n<p>“好的，妈妈，”杰基答复道。</p>\n<p>茉莉走向厨房门口。</p>\n<p>“妈，稍等一下，”杰基喊道，“彼得.霍布斯早上来了一趟，他对你的那封信很生气，你知道的，他为此丢了工作。你为什么写信给他的上司？他想找你问清楚这个问题。”</p>\n<p>“好啦，我不想和他讨论这个。”茉莉说道，然后打开厨房门准备离开。</p>\n<p>“但是，老妈，你有所不知，他才17岁，那是它的第一份工作。他真的很生气，还说…要杀了你。”</p>\n<p>茉莉没有做声。她离开了这个房间并关上了门。</p>\n<p><strong>翻译要点</strong></p>\n<ol>\n<li>country：侧重指区别于城市的乡间；village：具体的村庄 ；countryside：泛指整个乡村区域，eg: the Chinese countryside 中国农村</li>\n<li>warm + 颜色 ：暖色调</li>\n<li>dark woman ：指肤色暗沉的女人，不是黑肤色的女人</li>\n</ol>\n<h4 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a>原文</h4><p>1 Chapter</p>\n<p>The Clarkson family lived in the country near Cambridge，about half a mile from the nearest village and about a mile from the river．They had a big，old house with a beautiful garden，a lot of flowers and many old．trees．</p>\n<p>One Thursday morning in July，Jackie came in from the garden．She was a tall，fat woman，thirty years old．It was the hottest day of the year，but she wore a warm brown skirt and yellow shirt．She went into the kitchen to get a drink of water．Just then the phone rang．</p>\n<p>‘Cambridge 1379，’Jackie said．</p>\n<p>‘Hello．This is Diane．I want to talk to Mother．’</p>\n<p>‘Mother isn’t here，’Jackie said．’She’s at the doctor’s．’</p>\n<p>‘Why？What’s Wrong？’</p>\n<p>‘Nothing’s wrong，’Jackie said．’Why are you telephoning？ You are going to come this weekend？ Mother wants everyone to be here．’</p>\n<p>‘Yes，I want to come，’Diane said．’I’m phoning because I have no money for the train ticket．’</p>\n<p>‘No money！Mother is always giving you money！’</p>\n<p>‘This phone call is very expensive，’Diane said coldly．’Tell Mother please．I need the money．’</p>\n<p>Jackie put the phone down．She took a cigarette from her bag and began to smoke．“her sister al-ways asked for money．Diane was twenty years old， the youngest in the family．She lived in London，in one room of a big house．</p>\n<p>She wanted to be a singer．She sang very well but she could never get work．</p>\n<p>Jackie went back into the kitchen and began to make some sandwiches．Just then the back door opened，and her mother came in．</p>\n<p>‘It’s very hot！’Molly said．She took off her hat and put it down on the table．She was a tall，dark woman with beautiful eyes．</p>\n<p>Two big，black dogs came into the kitchen after her and ran across to her．She sat down and put her hands on their heads．</p>\n<p>Jackie put the sandwiches on the table．’Mother，’she said，’Diane phoned．She wants money for her train ticket．’</p>\n<p>Molly closed her eyes for a minute．Then she stood up．’This afternoon I want you to get the house ready for the weekend，’she said．’Oh，and please go to the village later and get my tablets．’</p>\n<p>‘Yes，Mother，’Jackie said．</p>\n<p>Molly went to the door．</p>\n<p>‘Mother，please wait a minute，’Jackie said．’Peter Hobbs came here this morning．He’s very angry with you about that letter．He lost his job，you know．Why did you write to his office？He wants to talk to you about it．’</p>\n<p>‘Well，I don’t want to talk to him，’Molly said．She opened the door．</p>\n<p>‘But Mother，you don’t understand．He’s seventeen，and it was his first job．He’s very，very angry．He says… he says he’s going to kill you！’</p>\n<p>Molly did not answer．She went out of the room and closed the door．</p>\n"},{"title":"书虫系列-翻译序言","url":"http://yoursite.com/2016/11/30/书虫系列-翻译序/","content":"<p>记得在莫提默·艾德勒&amp;查尔斯·范多伦的著作《如何阅读一本书》一书中，除了四种由浅入深的阅读模式之外，里面引用了弗兰西斯•培根的一句话让我影响深刻，即：“有些书可以浅尝即止，有些书是要生吞活剥，只有少数的书是要咀嚼与消化的。”</p>\n<p>我选书的步骤是：</p>\n<ol>\n<li>看完一本书之后，在网上搜索与其类似主题的书籍。</li>\n<li>豆瓣&amp;评书：先去豆瓣读书看评论，如果上面评论很少或者评论不错，说明这本书或是暂时没有太多拥趸，尚未被挖掘；或是得到多数人的认可。因此也就有了继续探索的可行性。</li>\n<li>网上搜索：基于豆瓣评分，在网上.mobi或者.epub格式的电子书，如果实在没有上述两种格式才选择.pdf格式。</li>\n<li>浅尝&amp;阅读：拿到电子档的书籍，看完序言和目录，如果是叙事性或者连贯性强的书籍则初看几篇前面几个章节，否则就随意翻阅几个章节，如果觉得不错就继续读完，采用快速阅读的方式。</li>\n<li>收藏&amp;购买：读完了之后再对整本书做一个简短的总结，以确定是否有再次阅读和收藏的必要。如果有，则会买回纸质档书籍用于后续的分析阅读。</li>\n</ol>\n<p>之前在知乎上在“有哪些适合初学者的英语原著？”提问的答案中与《书虫系列》不期而遇。看完答题者的初步介绍之后，按照上述步骤进行筛选，目前处于第3步。在初步阅读之后，觉得这套书值得继续关注。</p>\n<p>这本由英语母语编著同时也是面向英语母语读者的读物，内容虽浅显易读，但涉及大量的英语日常用语和省略句式，觉得很有学习意义。民国时期的通才王云五先生曾在《我怎样读书：王云五对青年谈求学与生活》一书中回顾了他青年时期自学英语的经历，里面提及了一种学习英语的方法，大致步骤是：“阅读英文原著，再翻译成中文与现有译文做比较并改善，然后根据中文再反译成英文并与原文比较并改善。”对于这种学习方式，我深以为然，于是决定试试。</p>\n<p>由于学习英语是一件长周期低回报的事情，如何保持主观能动性和维持一定的兴趣决定着学习效率和连续性。关于非母语且成年人士如何学习英语这个话题在国内外的研究文献和争执观点已经有很多。个人觉得伍君仪&amp;恶魔的奶爸所编著的《把你的英语用起来》一书中的分析和总结比较客观和中肯，并且提供了一套可行性很强的方案，值得一读。</p>\n<p>以上废话这么多，无非就是想说明一件事情：我找了一套适合我目前水平的英语教材《书虫-牛津英汉双语读物》，并决定按照一周两篇的节奏辅以“阅读-翻译-反翻译”的方式学完这套教材。</p>\n<p>此文为序，多么“无耻”的一句话！</p>\n"},{"title":"StartFucks Coffee - 操蛋的咖啡","url":"http://yoursite.com/2016/11/23/StartFucks Coffee - 操蛋的咖啡/","content":"<blockquote>\n<p>写了一天的代码，看着桌上冒着热气的白开水，想到第一次去星巴克的情景：傻傻地在柜台面子，看着各种咖啡名词，踌躇许久，最终点了一份中杯柠檬茶。那位服务员小胖妞无语中掺杂点鄙视的眼神，至今记忆犹新…</p>\n</blockquote>\n<p>身边的朋友喝咖啡的不少，咖啡这个词汇也经常萦绕耳旁：美剧中，喝咖啡已是日常；朋友聚会，问及他（她）们最爱的饮料，也是拿铁和卡布奇诺居多；特别的大学期间的坐我对面的师姐，感觉她对于喝咖啡跟喝水已经没多大区别，每一次浓浓的咖啡香从她的书桌散发出来，很难说我没有一丝要来一杯的冲动，不过，最终还是忍住了。</p>\n<p>究其原因，一是我个人对咖啡的印象并不好，普遍观点认为长期喝咖啡对于身体健康和健身有不良影响，这种观点是否属实尚不能下定论。在此之前，我选择敬而远之。二是我狭隘的以为咖啡只有一种：苦咖啡，殊不知咖啡也是大有学问。其实我早该想到西方的咖啡应该和东方的茶一样，种类繁多，口味各异。只是先入为主的观念让我对咖啡已经失去了进一步了解的兴趣。</p>\n<p>如今，终究是因为自尊心受到了伤害，决定整理一下关于咖啡的基本知识。更何况即便是不喝咖啡，也至少对它有一个基本的认识，这样才算得上公平。</p>\n<p>网上已经有很多接受咖啡种类的文章，我只是顺手牵羊，秉着拿来主义，自己总结一下，加深印象。</p>\n<p>咖啡大体上可以分为12种，其中浓缩咖啡（Espresso）最为根本，其他11种都是在Espresso的基础上添加其他的配料演变而成的花式咖啡。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-0.jpg\" alt=\"12种咖啡的恩怨情仇\"></p>\n<p>通过上图，可以比较直观地感受这12种咖啡直接的关联。以下分别介绍：</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-1.jpg\" alt=\"浓缩咖啡-玛奇朵-美式咖啡\"></p>\n<h3 id=\"浓缩咖啡（Espresso）\"><a href=\"#浓缩咖啡（Espresso）\" class=\"headerlink\" title=\"浓缩咖啡（Espresso）\"></a>浓缩咖啡（Espresso）</h3><p>浓缩咖啡，英文名为Espresso，Espresso是一个意大利单词，所以也叫意式浓缩咖啡，指的是一种用咖啡机在短时间内急速萃取的浓烈咖啡，几乎称得上是所有花式咖啡的基础，也是全世界咖啡馆的必备。Espresso很小杯，通常只有30毫升左右，味道很苦，表面浮着一层厚厚的油脂，会与一杯清水同上，可以选择加糖。这款是真正的咖啡爱好者和急需提神者的首选。</p>\n<h3 id=\"玛奇朵（Espresso-Macchiato）\"><a href=\"#玛奇朵（Espresso-Macchiato）\" class=\"headerlink\" title=\"玛奇朵（Espresso Macchiato）\"></a>玛奇朵（Espresso Macchiato）</h3><p>Macchiato原文为意大利语，代表“印记、烙印”的意思，发音为“玛奇雅朵”，习惯称呼为玛奇朵。玛奇朵是在浓咖啡上加上薄薄一层热奶泡以保持咖啡温度，细腻香甜的奶泡能缓冲浓缩咖啡带来的苦涩冲击，想喝咖啡但又无法舍弃甜味的你，可以选择玛奇朵。经常会听到“焦糖玛奇朵”，据说这是星巴克的独创，其做法是在牛奶中加入香草糖浆，与Espresso咖啡混合，再于奶泡上覆盖一层焦糖，口味层次很丰富。</p>\n<h3 id=\"美式咖啡（Americano）\"><a href=\"#美式咖啡（Americano）\" class=\"headerlink\" title=\"美式咖啡（Americano）\"></a>美式咖啡（Americano）</h3><p>很多咖啡馆的“当日咖啡”其实就是美式咖啡，这通常也是咖啡馆菜单上最便宜的一种。美式咖啡说白了，就是小半杯Esprssso兑上大半杯白开水，也有咖啡馆会使用滴滤式咖啡壶冲泡。美式咖啡味道淡、颜色浅，微酸微苦，但因为萃取时间长，所以咖啡因含量高。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-2.jpg\" alt=\"拿铁-白咖啡-康宝蓝\"></p>\n<h3 id=\"拿铁（Caffe-Latte）\"><a href=\"#拿铁（Caffe-Latte）\" class=\"headerlink\" title=\"拿铁（Caffè Latte）\"></a>拿铁（Caffè Latte）</h3><p>拿铁是Espresso与牛奶的经典混合，杯底先倒入少量Espresso，然后加入大量牛奶，顶端是浓密的一层泡沫，可以在奶泡上拉出各种各样的图案。经典的拿铁是70%牛奶+20%奶沫+10%咖啡，受法国人喜爱的欧蕾咖啡，是将牛奶和咖啡同时倒入杯中，两者在第一时间碰撞、混合，上加两勺打成泡沫的奶油，这在法国人的早餐中十分常见，几乎是国民饮料。</p>\n<h3 id=\"白咖啡（Flat-White）\"><a href=\"#白咖啡（Flat-White）\" class=\"headerlink\" title=\"白咖啡（Flat White）\"></a>白咖啡（Flat White）</h3><p>关于白咖啡网上有两种说法：</p>\n<ol>\n<li><p>白咖啡并不是马来西亚的那个特产，而是没有奶泡的拿铁。</p>\n</li>\n<li><p>马来西亚土特产，约有100多年的历史。白咖啡并不是指咖啡的颜色是白色的，而是采用特等咖啡豆及特级脱脂奶精原料，经特殊工艺加工后得到的咖啡，甘醇芳香不伤肠胃，保留了咖啡原有的色泽和香味，颜色比普通咖啡更清淡柔和，故得名为白咖啡。</p>\n</li>\n</ol>\n<h3 id=\"康宝蓝（Espresso-Con-Panna）\"><a href=\"#康宝蓝（Espresso-Con-Panna）\" class=\"headerlink\" title=\"康宝蓝（Espresso Con Panna）\"></a>康宝蓝（Espresso Con Panna）</h3><p>意大利语中，Con是搅拌，Panna是生奶油，康宝蓝即意式浓缩咖啡加上鲜奶油。有一种说法是，正宗的康宝蓝要配一颗巧克力或太妃糖，先将巧克力或太妃糖含在嘴里，再喝咖啡，让美味一起在口中绽放。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-3.jpg\" alt=\"布雷维-卡布奇诺-摩卡\"></p>\n<h3 id=\"布雷维-半拿铁（Cafe-Breve）\"><a href=\"#布雷维-半拿铁（Cafe-Breve）\" class=\"headerlink\" title=\"布雷维/半拿铁（Cafe Breve）\"></a>布雷维/半拿铁（Cafe Breve）</h3><p>很像拿铁，不同是加入了的不是牛奶，而是半牛奶、半奶油的混合物，有时会再加少许奶泡。公认的配方是：1份浓缩咖啡+0.75份热牛奶+0.75份鲜奶油+0.5份奶泡。</p>\n<h3 id=\"卡布奇诺（Cappuccino）\"><a href=\"#卡布奇诺（Cappuccino）\" class=\"headerlink\" title=\"卡布奇诺（Cappuccino）\"></a>卡布奇诺（Cappuccino）</h3><p>卡布奇诺和拿铁咖啡的成分一样，都是Espresso+牛奶+奶泡，不同之处仅在于卡布奇诺奶泡比牛奶多，拿铁则是牛奶比奶泡多。传统的卡布奇诺咖啡是三分之一浓缩咖啡，三分之一蒸汽牛奶和三分之一泡沫牛奶。同等价位的卡布奇诺，通常比拿铁要小杯，但咖啡味更浓郁。<br>卡布奇诺是意大利咖啡与牛奶的经典之作，咖啡的颜色就像卡布奇诺教会修士深褐色外衣上覆的头巾一样，咖啡因此得名。可根据自己口味调整牛奶与咖啡的比例，牛奶味重称为湿卡布奇诺，咖啡味重称为干卡布奇诺。</p>\n<h3 id=\"摩卡（Caffe-Mocha）\"><a href=\"#摩卡（Caffe-Mocha）\" class=\"headerlink\" title=\"摩卡（Caffè Mocha）\"></a>摩卡（Caffè Mocha）</h3><p>一种最古老的咖啡，得名于著名的摩卡港。摩卡的配方成分就相对比较复杂，在Espresso和牛奶的基础上，还有巧克力酱，顶端不是奶泡，而是打发的鲜奶油，还往往会挤上巧克力酱，或者撒上可可粉、肉桂粉，别有一番风味。由于“内容丰富”，通常售价较高，也比较大杯。巧克力和奶油都有甜味，因此摩卡咖啡是苦甜结合的典范。</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/daily/coffee-4.jpg\" alt=\"焦糖玛奇朵-爱尔兰咖啡-维也纳咖啡\"></p>\n<h3 id=\"焦糖玛奇朵（Caramel-Macchiato）\"><a href=\"#焦糖玛奇朵（Caramel-Macchiato）\" class=\"headerlink\" title=\"焦糖玛奇朵（Caramel Macchiato）\"></a>焦糖玛奇朵（Caramel Macchiato）</h3><p>即加了焦糖的玛奇朵，是在香浓热牛奶上加入浓缩咖啡、香草，最后淋上纯正焦糖而制成的饮品，特点是在一杯饮品里可以喝到三种不同的口味。</p>\n<h3 id=\"爱尔兰咖啡（Irish-Coffee）\"><a href=\"#爱尔兰咖啡（Irish-Coffee）\" class=\"headerlink\" title=\"爱尔兰咖啡（Irish Coffee）\"></a>爱尔兰咖啡（Irish Coffee）</h3><p>爱尔兰咖啡（Irish Coffee）是一款鸡尾酒，是以爱尔兰威士忌为基酒，配以咖啡为辅料，调制而成的一款鸡尾酒。据说爱尔兰咖啡背后还有一段浪漫的爱情故事，不过我觉得就像卡农背后的爱情故事一样，不必较真。</p>\n<h3 id=\"维也纳咖啡（Viennese-Coffee）\"><a href=\"#维也纳咖啡（Viennese-Coffee）\" class=\"headerlink\" title=\"维也纳咖啡（Viennese Coffee）\"></a>维也纳咖啡（Viennese Coffee）</h3><p>奥地利最著名的咖啡，是一个名叫爱因·舒伯纳的马车夫发明的，也许是由于这个原因，今天，人们偶尔也会称维也纳咖啡为“单头马车”。在温热的咖啡杯底部撒上薄薄一层砂糖或细冰糖，接着向杯中倒入滚烫而且偏浓的黑咖啡，最后在咖啡表面装饰两勺冷的新鲜奶油，一杯维也纳咖啡就做好了。</p>\n<p>综上，发现除了浓缩咖啡和美式咖啡之外，其他咖啡的含糖量都不低。公司附近就有一家星巴克，实践是检验真理的唯一标准。一个星期上一种咖啡，也够我玩三个月了。</p>\n"},{"title":"副词能否修辞名词？","url":"http://yoursite.com/2016/09/24/副词能否修辞名词/","content":"<blockquote>\n<p>之前知乎上看到一提问，大意是：The Lamb Astray中的Astray是形容词还是副词？副词是否能修辞名词？最近恰好在旋元佑先生的《文法俱乐部》一书中找到了合理的解释，借此机会梳理一下这个知识点。</p>\n</blockquote>\n<p>结合上述问题：The Lamb Astray中的Astray是形容词还是副词？副词是否能修辞名词？，可以从两个方面进行解答：</p>\n<ol>\n<li><p>The Lamb Astray中的Astray是形容词词性，属于形容词后置的情况</p>\n</li>\n<li><p>副词可以修辞名词</p>\n</li>\n</ol>\n<h3 id=\"形容词后置\"><a href=\"#形容词后置\" class=\"headerlink\" title=\"形容词后置\"></a>形容词后置</h3><p>形容词常见的所处位置包括名词片语、表语、主【宾】语补语，此外还有一个位置：名词后面，属于形容词后置的情况。</p>\n<p>在以下三种情况，形容词需要后置：</p>\n<ol>\n<li><p>复合名词后面：</p>\n<p> 类似someone这样的符合名词，因为限定词 some 和 名词 one 组合成一个词，原本名词片语中在限定词和名词之间存放形容的位置被挤压掉了，因此只能把形容词置于名词之后。</p>\n<p> 比如：</p>\n<ul>\n<li>someone else //其他人</li>\n<li>someone important //某些重要的人</li>\n</ul>\n</li>\n<li><p>一部分a-开头的形容词：</p>\n<p> 有一部分a-开头的形容词通常放在补语或者表语的位置，也可以放在名词片语后面。</p>\n<p> 比如：</p>\n<ul>\n<li>Jane and her mother alike are teather. //珍和她妈妈一样是老师</li>\n<li>Tom alone is coming. //只有汤姆要来</li>\n<li>wood adrift //漂流的木头</li>\n</ul>\n</li>\n<li><p>外来词或者惯用法：</p>\n<p> 英语中习惯把形容词放在名词前面，但是有些语言中例如法文，形容词是放在名词后面的。因此一些外来语或者惯用语，都要把形容词放在名词后面。</p>\n<p> 比如：</p>\n<ul>\n<li>Secretary General //秘书长</li>\n<li>Poet Laureate //桂冠诗人</li>\n<li>Aisa Minor //小亚细亚</li>\n<li>heir apparent //合法继承人</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"副词修辞名词\"><a href=\"#副词修辞名词\" class=\"headerlink\" title=\"副词修辞名词\"></a>副词修辞名词</h3><p>正如一般文法书上所说，一般情况下形容词修辞名词而副词则用于修辞除了名词以外的其他词类，包括形容词、动词和副词。这种说法基本上成立，但是也有特殊情况。</p>\n<p>存在一类表示强调功能的副词，可以修辞名词、动词、形容词和副词，修辞范围很广。也正因为如此，所以这类副词只能放在修饰词前面，确保修辞对象在其后面，以免出现歧义。</p>\n<p>这一类副词又可以细分为三种：</p>\n<ol>\n<li><p>强调范围的副词</p>\n<p> 典型代表：only, merely, also, especially, particularly, even等</p>\n<p> 以Only举例：</p>\n<ul>\n<li>I heard about the accident yesterday.  //我昨天听说了这件意外</li>\n<li>Only I heard about the accident yesterday. //只有我听说了…</li>\n<li>I only herad about the accident yesterday. //只是听说，并没有看到</li>\n<li>I heard about only the accident yesterday. //昨天全在听人在谈论这件意外</li>\n<li><p>I heard about the accident only yesterday. //直到昨天才听说</p>\n<p>这几个句子里only分别修饰了代名词I、动词heard、名词the accident和时间副词yesterday，都是当副词使用。</p>\n</li>\n</ul>\n</li>\n<li><p>强调语气的副词</p>\n<p> 这是最典型的副词，同样也可以修饰名词在内的四种主要词类。</p>\n<p> 举例如下：</p>\n<ul>\n<li>He is very much his father’s son.  //他和他爸爸一个调调</li>\n<li>You’re utterly insane! //你是完完全全疯了</li>\n<li>I badly need a drink.  //我急需来一杯</li>\n</ul>\n</li>\n<li><p>程度副词</p>\n<p> 这一类副词和加强语气的副词很像，但是程度副词是用来做有几成的表示，而非加强语气。所以，如果把加强语气的副词，只是语气变弱，意思不会变。但是如果拿掉程度副词，意思就可能发生改变。</p>\n<p> 举例：</p>\n<ul>\n<li>The project is almost finished. //项目已经完成的差不多了。<br>ps:上面的句子如果去掉almost，这句话的意思完全变了</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>旋元佑先生的《文法俱乐部》是一本不可多得的文法书，它区别于传统文法书的教条式+填鸭式的讲解方式，而是追本溯源，从理解本质和语言使用的角度为读者拨开文法的迷雾。    </p>\n"},{"title":"Objective-C Category 深入浅出系列之+load方法& +initialize方法","url":"http://yoursite.com/2015/04/01/Objective-C Category 深入浅出系列之+Load方法& +initialize方法/","content":"<p>在上一篇博客<a href=\"\">Objective-C Category 深入浅出系列-实现原理</a></p>\n"},{"title":"Objective-C Category 深入浅出系列之实现原理","url":"http://yoursite.com/2015/03/25/Objective-C Category 深入浅出系列之实现原理/","content":"<p>Objective-C Category（分类）之于我而言有种神秘感，虽然自己已经在实际开发过程中已经多次使用它，且感受到了它带来的便利与高效。但是我却仅仅是停留在对它的基本使用层面，除此之外一无所知。我能感觉它的强大，心中也一直有种对它内部实现一探究竟的冲动，奈何迟迟没有行动。时间愈久，这种情绪愈发浓烈，今天终究是按耐不住了…</p>\n<h3 id=\"知其然\"><a href=\"#知其然\" class=\"headerlink\" title=\"知其然\"></a>知其然</h3><p>对于苹果应用开发者来说，开发者想要快速地了解或是回顾某个知识点，<a href=\"https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html#//apple_ref/doc/uid/TP40008195-CH5-SW1\" target=\"_blank\" rel=\"external\">Apple开发者文档</a>往往是不二首选。</p>\n<p>文档上如是说：你可以使用Category为一个已经存在的类添加额外的方法，比如Cocoa库中的类，即便是这个类的源代码是不可见的-不能子类化。使用Category给类添加的方法能被其子类继承，且在Runtime下其与类原有的方法是无差别的。</p>\n<p>分类的使用场景：</p>\n<ul>\n<li>在不改变某个类源文件和不使用继承的前提下，为该类添加先的方法</li>\n<li>声明类的私有方法</li>\n<li>将一个类的实现拆分为多个独立的源文件</li>\n</ul>\n<p>很明显，Category其实就是设计模式之一的装饰者模式的具体实现。</p>\n<p> <em>注意，Category是一个类的拓展，为不是一个新类。</em></p>\n<p>借助Apple开发者文档了解到Category的“知其然”，然后就是基于<a href=\"https://opensource.apple.com/tarballs/objc4/\" target=\"_blank\" rel=\"external\">Apple Opensource</a>来解决“知其所以然”的问题？</p>\n<h3 id=\"知其然所以然\"><a href=\"#知其然所以然\" class=\"headerlink\" title=\"知其然所以然\"></a>知其然所以然</h3><p> 此处使用的源码版本是objc4-532.2。与本文相关的代码都在源文件objc-runtime-new.mm中，接下来就结合关键的代码与注释进行分析。</p>\n<p> Catrgory的定义</p>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> category_t &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</div><div class=\"line\">    classref_t cls;</div><div class=\"line\">    <span class=\"keyword\">struct</span> method_list_t *instanceMethods;</div><div class=\"line\">    <span class=\"keyword\">struct</span> method_list_t *classMethods;</div><div class=\"line\">    <span class=\"keyword\">struct</span> protocol_list_t *protocols;</div><div class=\"line\">    <span class=\"keyword\">struct</span> property_list_t *instanceProperties;</div><div class=\"line\">&#125; category_t;</div></pre></td></tr></table></figure>\n<p> 通过Category的定义可以看出，Category与Class的结构很相似。不过Category没有isa指针，结合OC中对类的定义，说明Category不是一个类，只能作为一个类的拓展存在。</p>\n<p> 关键Method-1: _read_images()</p>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">void</span> _read_images(header_info **hList, uint32_t hCount)</div><div class=\"line\">&#123;</div><div class=\"line\">    ...</div><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">#define EACH_HEADER \\</span></div><div class=\"line\">hIndex = <span class=\"number\">0</span>;         \\</div><div class=\"line\">crashlog_header_name(<span class=\"literal\">NULL</span>) &amp;&amp; hIndex &lt; hCount &amp;&amp; (hi = hList[hIndex]) &amp;&amp; crashlog_header_name(hi); \\</div><div class=\"line\">hIndex++</div><div class=\"line\">   </div><div class=\"line\">    ...</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Discover categories.</span></div><div class=\"line\">    <span class=\"comment\">//遍历工程中所有的头文件</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (EACH_HEADER) &#123;</div><div class=\"line\">        <span class=\"comment\">//Category列表</span></div><div class=\"line\">        category_t **catlist =</div><div class=\"line\">        _getObjc2CategoryList(hi, &amp;count);</div><div class=\"line\">        <span class=\"comment\">//遍历Category列表</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</div><div class=\"line\">            category_t *cat = catlist[i];</div><div class=\"line\">            <span class=\"comment\">//Category拓展的类的指针</span></div><div class=\"line\">            class_t *cls = remapClass(cat-&gt;cls);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (!cls) &#123;</div><div class=\"line\">                <span class=\"comment\">// Category's target class is missing (probably weak-linked).</span></div><div class=\"line\">                <span class=\"comment\">// Disavow any knowledge of this category.</span></div><div class=\"line\">                catlist[i] = <span class=\"literal\">NULL</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">                    _objc_inform(<span class=\"string\">\"CLASS: IGNORING category \\?\\?\\?(%s) %p with \"</span></div><div class=\"line\">                                 <span class=\"string\">\"missing weak-linked target class\"</span>,</div><div class=\"line\">                                 cat-&gt;name, cat);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// Process this category.</span></div><div class=\"line\">            <span class=\"comment\">// First, register the category with its target class.</span></div><div class=\"line\">            <span class=\"comment\">// Then, rebuild the class's method lists (etc) if</span></div><div class=\"line\">            <span class=\"comment\">// the class is realized.</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">BOOL</span> classExists = <span class=\"literal\">NO</span>;</div><div class=\"line\">            <span class=\"comment\">//将分类中的实例方法添加在类的实例方法列表</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (cat-&gt;instanceMethods ||  cat-&gt;protocols</div><div class=\"line\">                ||  cat-&gt;instanceProperties)</div><div class=\"line\">            &#123;</div><div class=\"line\">                addUnattachedCategoryForClass(cat, cls, hi);</div><div class=\"line\">                <span class=\"keyword\">if</span> (isRealized(cls)) &#123;</div><div class=\"line\">                    remethodizeClass(cls);</div><div class=\"line\">                    classExists = <span class=\"literal\">YES</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">                    _objc_inform(<span class=\"string\">\"CLASS: found category -%s(%s) %s\"</span>,</div><div class=\"line\">                                 getName(cls), cat-&gt;name,</div><div class=\"line\">                                 classExists ? <span class=\"string\">\"on existing class\"</span> : <span class=\"string\">\"\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">//将分类中的类方法添加到类的类方法列表中</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (cat-&gt;classMethods  ||  cat-&gt;protocols</div><div class=\"line\">                <span class=\"comment\">/* ||  cat-&gt;classProperties */</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"comment\">//关键函数块</span></div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">//添加Category到目标类</span></div><div class=\"line\">                addUnattachedCategoryForClass(cat, cls-&gt;isa, hi);</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">//重构目标类的方法列表</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (isRealized(cls-&gt;isa)) &#123;</div><div class=\"line\">                \t<span class=\"comment\">//关键函数！</span></div><div class=\"line\">                    remethodizeClass(cls-&gt;isa);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">                    _objc_inform(<span class=\"string\">\"CLASS: found category +%s(%s)\"</span>,</div><div class=\"line\">                                 getName(cls), cat-&gt;name);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Category discovery MUST BE LAST to avoid potential races</span></div><div class=\"line\">    <span class=\"comment\">// when other threads call the new category code before</span></div><div class=\"line\">    <span class=\"comment\">// this thread finishes its fixups.</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// +load handled by prepare_load_methods()</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#undef EACH_HEADER</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> _read_images()是赋值读取镜像文件的函数，函数末尾就是处理Category的代码块。其中将工程中所有的Category分别与其目标类建立关联，然后调用了remethodizeClass()对目标类的进行重构。</p>\n<p> 关键Method-2: remethodizeClass()</p>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> remethodizeClass(class_t *cls)</div><div class=\"line\">&#123;</div><div class=\"line\">    category_list *cats;</div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isMeta;</div><div class=\"line\">    </div><div class=\"line\">    rwlock_assert_writing(&amp;runtimeLock);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//识别目标类是否为元类</span></div><div class=\"line\">    isMeta = isMetaClass(cls);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Re-methodizing: check for more categories</span></div><div class=\"line\">    <span class=\"comment\">//重构目标类的方法列表</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((cats = unattachedCategoriesForClass(cls))) &#123;</div><div class=\"line\">        chained_property_list *newproperties;</div><div class=\"line\">        <span class=\"keyword\">const</span> protocol_list_t **newprotos;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (PrintConnecting) &#123;</div><div class=\"line\">            _objc_inform(<span class=\"string\">\"CLASS: attaching categories to class '%s' %s\"</span>,</div><div class=\"line\">                         getName(cls), isMeta ? <span class=\"string\">\"(meta)\"</span> : <span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Update methods, properties, protocols</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> vtableAffected = <span class=\"literal\">NO</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//添加Category中的方法到目标类</span></div><div class=\"line\">        <span class=\"comment\">//关键函数！</span></div><div class=\"line\">        attachCategoryMethods(cls, cats, &amp;vtableAffected);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//将Category中的属性插入属性链表的头部，只有匿名Category才能额外添加属性</span></div><div class=\"line\">        newproperties = buildPropertyList(<span class=\"literal\">NULL</span>, cats, isMeta);</div><div class=\"line\">        <span class=\"keyword\">if</span> (newproperties) &#123;</div><div class=\"line\">            newproperties-&gt;next = cls-&gt;data()-&gt;properties;</div><div class=\"line\">            cls-&gt;data()-&gt;properties = newproperties;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//将Category中的协议加入目标类</span></div><div class=\"line\">        <span class=\"comment\">//查看buildProtocolList函数得知，新的协议的加入目标类原有协议的尾部</span></div><div class=\"line\">        newprotos = buildProtocolList(cats, <span class=\"literal\">NULL</span>, cls-&gt;data()-&gt;protocols);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cls-&gt;data()-&gt;protocols  &amp;&amp;  cls-&gt;data()-&gt;protocols != newprotos) &#123;</div><div class=\"line\">            _free_internal(cls-&gt;data()-&gt;protocols);</div><div class=\"line\">        &#125;</div><div class=\"line\">        cls-&gt;data()-&gt;protocols = newprotos;</div><div class=\"line\">        </div><div class=\"line\">        _free_internal(cats);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Update method caches and vtables</span></div><div class=\"line\">        flushCaches(cls);</div><div class=\"line\">        <span class=\"keyword\">if</span> (vtableAffected) flushVtables(cls);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> remethodizeClass()函数的功能比较简单，进一步细化了对Category中的方法列表、协议列表和属性列表的处理。其中，属性列表的处理则是直接插入原属性链表头部，协议列表则是附加到原协议列表的尾部。接下来，重点分析处理Category方法列表的attachCategoryMethods函数。</p>\n<p>关键Method-3: attachCategoryMethods()</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> attachCategoryMethods(class_t *cls, category_list *cats,</div><div class=\"line\">                      <span class=\"built_in\">BOOL</span> *inoutVtablesAffected)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!cats) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (PrintReplacedMethods) printReplacements(cls, cats);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isMeta = isMetaClass(cls);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//为每个Category分配函数列表</span></div><div class=\"line\">    method_list_t **mlists = (method_list_t **)</div><div class=\"line\">    _malloc_internal(cats-&gt;count * <span class=\"keyword\">sizeof</span>(*mlists));</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Count backwards through cats to get newest categories first</span></div><div class=\"line\">    <span class=\"keyword\">int</span> mcount = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = cats-&gt;count;</div><div class=\"line\">    <span class=\"built_in\">BOOL</span> fromBundle = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"comment\">//汇总所有Category的拓展方法</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">        method_list_t *mlist = cat_method_list(cats-&gt;list[i].cat, isMeta);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mlist) &#123;</div><div class=\"line\">            mlists[mcount++] = mlist;</div><div class=\"line\">            fromBundle |= cats-&gt;list[i].fromBundle;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//关键函数!</span></div><div class=\"line\">    <span class=\"comment\">//将Category中的拓展方法加入到目标类</span></div><div class=\"line\">    attachMethodLists(cls, mlists, mcount, <span class=\"literal\">NO</span>, fromBundle, inoutVtablesAffected);</div><div class=\"line\">    </div><div class=\"line\">    _free_internal(mlists);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>attachCategoryMethods()函数的功能也比较简单，对与目标类的Category中所有方法进行汇总，然后调用attachMethodLists函数进行处理。</p>\n<p>关键Method-4: attachMethodLists()</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> attachMethodLists(class_t *cls, method_list_t **addedLists, <span class=\"keyword\">int</span> addedCount,</div><div class=\"line\">                  <span class=\"built_in\">BOOL</span> baseMethods, <span class=\"built_in\">BOOL</span> methodsFromBundle,</div><div class=\"line\">                  <span class=\"built_in\">BOOL</span> *inoutVtablesAffected)</div><div class=\"line\">&#123;</div><div class=\"line\">    rwlock_assert_writing(&amp;runtimeLock);</div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Method list array is NULL-terminated.</span></div><div class=\"line\">    <span class=\"comment\">// Some elements of lists are NULL; we must filter them out.</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//方法列表以NULL作为结束符，因此需要过滤掉目标类中的NULL函数</span></div><div class=\"line\">    method_list_t *oldBuf[<span class=\"number\">2</span>];</div><div class=\"line\">    method_list_t **oldLists;</div><div class=\"line\">    <span class=\"keyword\">int</span> oldCount = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cls-&gt;data()-&gt;flags &amp; RW_METHOD_ARRAY) &#123;</div><div class=\"line\">        oldLists = cls-&gt;data()-&gt;method_lists;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        oldBuf[<span class=\"number\">0</span>] = cls-&gt;data()-&gt;method_list;</div><div class=\"line\">        oldBuf[<span class=\"number\">1</span>] = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        oldLists = oldBuf;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (oldLists) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (oldLists[oldCount]) oldCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> newCount = oldCount;</div><div class=\"line\">    <span class=\"comment\">//同上，过滤掉Category方法列表中的NULL函数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; addedCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (addedLists[i]) newCount++;  <span class=\"comment\">// only non-NULL entries get added</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建新的方法列表</span></div><div class=\"line\">    method_list_t *newBuf[<span class=\"number\">2</span>];</div><div class=\"line\">    method_list_t **newLists;</div><div class=\"line\">    <span class=\"keyword\">if</span> (newCount &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        newLists = (method_list_t **)</div><div class=\"line\">        _malloc_internal((<span class=\"number\">1</span> + newCount) * <span class=\"keyword\">sizeof</span>(*newLists));</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        newLists = newBuf;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Add method lists to array.</span></div><div class=\"line\">    <span class=\"comment\">// Reallocate un-fixed method lists.</span></div><div class=\"line\">    <span class=\"comment\">// The new methods are PREPENDED to the method list array.</span></div><div class=\"line\">    </div><div class=\"line\">    newCount = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//先将Category加入到新的方法列表</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; addedCount; i++) &#123;</div><div class=\"line\">        method_list_t *mlist = addedLists[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mlist) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Fixup selectors if necessary</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!isMethodListFixedUp(mlist)) &#123;</div><div class=\"line\">            mlist = fixupMethodList(mlist, methodsFromBundle, <span class=\"literal\">true</span><span class=\"comment\">/*sort*/</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        ...</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Fill method list array</span></div><div class=\"line\">        newLists[newCount++] = mlist;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Copy old methods to the method list array、</span></div><div class=\"line\">    <span class=\"comment\">//再将目标类原方法加入新的方法列表</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; oldCount; i++) &#123;</div><div class=\"line\">        newLists[newCount++] = oldLists[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (oldLists  &amp;&amp;  oldLists != oldBuf) free(oldLists);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// NULL-terminate</span></div><div class=\"line\">    newLists[newCount] = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//更新目标类的方法列表</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newCount &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        assert(newLists != newBuf);</div><div class=\"line\">        cls-&gt;data()-&gt;method_lists = newLists;</div><div class=\"line\">        changeInfo(cls, RW_METHOD_ARRAY, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        assert(newLists == newBuf);</div><div class=\"line\">        cls-&gt;data()-&gt;method_list = newLists[<span class=\"number\">0</span>];</div><div class=\"line\">        assert(!(cls-&gt;data()-&gt;flags &amp; RW_METHOD_ARRAY));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>attachMethodLists才是最关键的函数。函数中为目标类分配了一个新的函数列表，先加入Category中的方法，再加入目标类原有方法。这也就是为什么如果Category中的函数与目标类中的函数重名，那么目标类的函数会被覆盖的原因，因为Runtime在遍历方法列表时会先发现Category中的函数。另外，这也是为什么即便不导入category的头文件也可以通过-performSelector：方式调用category中的方法的原因。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这篇博客基于源代码对Category与目标类的组合过程进行了分析，明白了Category中的方法、协议和属性的处理流程。因此，我们可以更加高效和准确地使用Category，甚至利用其中存在的“漏洞”实现一些小魔法。</p>\n"},{"title":"揭开ARC的神秘面纱系列-第3话","url":"http://yoursite.com/2015/02/25/揭开ARC的神秘面纱系列-第3话/","content":"<p><a href=\"http://www.galloway.me.uk/2012/02/a-look-under-arcs-hood-episode-3/\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>“揭开ARC的神秘面纱系列”的这篇续集全都是关于@autoreleasepool这一新指令的。<a href=\"http://clang.llvm.org/docs/AutomaticReferenceCounting.html#autoreleasepool\" target=\"_blank\" rel=\"external\">LLVM提及到</a>autorelease pools（自动释放池）的语义已经在LLVM3.0版本中发生变化，尤其是，我觉得探究ARC模式更新之后是如何实现的会很有意思。</p>\n<p>因此，思考一下下面的函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> foo() &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">NSNumber</span> *number = [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"number = %p\"</span>, number);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>显然，这完全是不和谐的代码段，但是它能让我看到发生什么。在非ARC模式下，我们可能会假设：number将会在numberWithInt:函数中被分配内存，并返回的是一个自动释放的对象。因此当自动释放池随后被销毁时，number对象将会被释放。所以让我们看看是否如上所述（一如往常，使用的是ARMv7指令集）：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.globl</span>  _foo</div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     _foo</div><div class=\"line\"><span class=\"symbol\">_foo</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span>, <span class=\"number\">#4</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPush</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#0</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r4</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC0_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC0_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L__unnamed_cfstring_-(LPC0_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L__unnamed_cfstring_-(LPC0_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _NSLog</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r4</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPop</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>不错，答案是肯定的。正是这样的。我们可以看到函数先将自动释放池入栈，然后调用numberWithInt:函数，然后将自动释放池出栈。正如我们所预料的。现在我们看看完全相同的代码在ARC模式编译出来是怎么样的：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.globl</span>  _foo</div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     _foo</div><div class=\"line\"><span class=\"symbol\">_foo</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span>, <span class=\"number\">#8</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPush</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#0</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r4</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC0_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC0_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"comment\">@ InlineAsm Start</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">r7</span>          <span class=\"comment\">@ marker for objc_retainAutoreleaseReturnValue</span></div><div class=\"line\">    <span class=\"comment\">@ InlineAsm End</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_retainAutoreleasedReturnValue</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r5</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L__unnamed_cfstring_-(LPC0_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L__unnamed_cfstring_-(LPC0_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r5</span></div><div class=\"line\"><span class=\"symbol\">LPC0_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _NSLog</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r5</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_release</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r4</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPop</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>留意上述代码中objc_retainAutoreleasedReturnValue函数和objc_release的调用。ARC已经为我们做了决定，完全不必担心自动释放池，因为ARC可以直接不然自动释放池生效，通过调用objc_retainAutoreleasedReturnValue函数对number对象进行retain一次，然后在后面在调用objc_release函数释放它。这意味着自动释放池的逻辑不一定执行，让人满意的结果。</p>\n<p>注意到自动释放池一直需要入栈和出栈，是因为ARC无法知晓numberWithInt函数和NSLog函数中会发生什么，不知道在函数中是否有对象会被加入释放池。如果说ARC知道这两个函数不会自动释放任何东西则实际上可以移除自动释放池的入栈和出栈操作。也许这种逻辑在ARC未来的版本中出现，尽管我不是很确定那时候ARC的语义会如何实现。</p>\n<p>现在让我思考另外一个例子，在这个例子中我们想要在自动释放池的作用域之外使用number对象。这应该告诉我们为什么ARC是一个神奇的工具。思考下面的代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> bar() &#123;</div><div class=\"line\">    <span class=\"built_in\">NSNumber</span> *number;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        number = [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"number = %p\"</span>, number);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"number = %p\"</span>, number);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可能会认为上述这段看似很和谐的代码会出问题。问题在于number对象将在自动释放池中创建，在自动释放池初衷时被释放，但是却在释放之后继续使用。噢！让我们通过在非ARC模式下编译上述代码来看看我们的猜想是否是正确的：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.globl</span>  _bar</div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     _bar</div><div class=\"line\"><span class=\"symbol\">_bar</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span>, <span class=\"number\">#12</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPush</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#0</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r4</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC1_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC1_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r6</span>, :lower16:(L__unnamed_cfstring_-(LPC1_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r6</span>, :upper16:(L__unnamed_cfstring_-(LPC1_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r6</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r5</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r5</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r6</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _NSLog</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r4</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPop</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r6</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r5</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _NSLog</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>很明显，正如我们所期望的那样没有调用retain,release或者autorelease，因为我们没有显式调用这些函数以及使用ARC。编译的结果也正如我们之前推理的那样。接下来让我们在ARC的帮助下会是什么样：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.globl</span>  _bar</div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     _bar</div><div class=\"line\"><span class=\"symbol\">_bar</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span>, <span class=\"number\">#12</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPush</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#0</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r4</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC1_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC1_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"comment\">@ InlineAsm Start</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">r7</span>          <span class=\"comment\">@ marker for objc_retainAutoreleaseReturnValue</span></div><div class=\"line\">    <span class=\"comment\">@ InlineAsm End</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_retainAutoreleasedReturnValue</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r6</span>, :lower16:(L__unnamed_cfstring_-(LPC1_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r6</span>, :upper16:(L__unnamed_cfstring_-(LPC1_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r6</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r5</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r5</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r6</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _NSLog</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r4</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleasePoolPop</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r6</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r5</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _NSLog</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r5</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_release</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>此处应该有掌声！ARC识别出我们在自动释放池作用域之外使用了number对象，因此它如上一段代码一样对numberWithInt:函数的返回值进行了retain，但是这一次它将release操作放在了bar函数末尾而不是自动释放池出栈的时候。这一举措避免在一些代码中出现崩溃，我们可能会认为这些代码是正确的，但实际上却潜在着内存管理的bug。</p>\n"},{"title":"揭开ARC的神秘面纱系列-第2话","url":"http://yoursite.com/2015/02/20/揭开ARC的神秘面纱系列-第2话/","content":"<p><a href=\"http://www.galloway.me.uk/2012/01/a-look-under-arcs-hood-episode-2/\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>以下是正文：</p>\n<p>写完第一篇关于<a href=\"http://icebergcwp.com/2015/02/05/%E6%8F%AD%E5%BC%80ARC%E7%9A%84%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1%E7%B3%BB%E5%88%97-%E7%AC%AC1%E8%AF%9D/\" target=\"_blank\" rel=\"external\">揭开ARC神秘面纱</a>的博客，我想和大家分享另外一些有趣的片段。这一次我好奇当你通过函数返回一个存在数组中的对象时会发生什么。非ARC模式，你可能会对这个对象retain一次再返回一个自动释放的对象。ARC模式下，我们虽然可以免去这些内存管理的操作，但还是不放心，觉得别扭。因此，我决定检测一下ARC是否做到位了。</p>\n<p>考虑一下这个类：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ClassA</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableArray</span> *array;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ClassA</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@synthesize</span> array;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)popObject &#123;</div><div class=\"line\">    <span class=\"keyword\">id</span> lastObject = [array lastObject];</div><div class=\"line\">    <span class=\"keyword\">if</span> (lastObject) &#123;</div><div class=\"line\">        [array removeLastObject];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> lastObject;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>在非ARC模式下，调用函数removeLastObject将会释放数组对对象的持有，如果这是对象的最后一个引用则对象的内存将会被释放，意味着返回的对象是一个已经被回收的对象。所以，我们应当retain一次lastObject并在返回前添加autorelease属性（加入自动释放池）。</p>\n<p>尽管我完全明白ARC应该会完成这些工作，但是我还是担忧没有自己添加这些操作。我天真地以为ARC会一行行地解析函数中的代码。如果是这样，我觉得ARC也许没必要在我们引用lastObject对象的时候为它添加一次引用计数，此时ARC并不知道lastObject需要进行retain，所以ARC没必要非得做这些操作。</p>\n<p>这就是我错误所在。显然，ARC在我们引用lastObject对象的时候为其添加一次引用计数，并在对象立刻作用域的时候进行了一次release操作，在我们这个例子中，由于我们是通过函数返回这个对象且函数名不是已关键字new或者copy开头，因此需要将对象加入自动释放池。</p>\n<p>让我们看看上述代码编译之后的样子：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.thumb_func</span>     <span class=\"string\">\"-[ClassA popObject]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA popObject]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r6</span>, :lower16:(_OBJC_IVAR_$_ClassA.array-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r4</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r6</span>, :upper16:(_OBJC_IVAR_$_ClassA.array-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC0_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r6</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC0_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span>, <span class=\"number\">#12</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r6</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r4</span>, <span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"comment\">@ InlineAsm Start</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">r7</span>          <span class=\"comment\">@ marker for objc_retainAutoreleaseReturnValue</span></div><div class=\"line\">    <span class=\"comment\">@ InlineAsm End</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_retainAutoreleasedReturnValue</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r5</span>, <span class=\"built_in\">r0</span></div><div class=\"line\">    <span class=\"keyword\">cbz </span>    <span class=\"built_in\">r5</span>, LBB0_2</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC0_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC0_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r6</span>]</div><div class=\"line\"><span class=\"symbol\">LPC0_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r4</span>, <span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\"><span class=\"symbol\">LBB0_2</span>:</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r5</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autoreleaseReturnValue</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r4</span>, <span class=\"built_in\">r5</span>, <span class=\"built_in\">r6</span>, <span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>好吧，事实如此。ARC已经为我们考虑周全了。ARC在代码中插入了objc_retainAutoreleaseReturnValue调用，这意味着ARC已经觉察到需要给一个已经加入自动释放池的返回值增加引用计数，这个操作属于ARC的一种优化处理，它仅仅是把对象从自动释放池中移除而并非真的添加一次引用计数。接下来在函数结尾处，ARC调用了objc_autoreleaseReturnValue，这个函数将即将返回的对象加入自动释放池。</p>\n<p>这仅仅是关于揭开ARC神秘面纱系列的另外一个例子。随着使用ARC的次数增多，我愈发意识它的实用性。ARC减少代码中内存管理相关的错误，并将上述的代码片段进行最佳优化处理。</p>\n"},{"title":"揭开ARC的神秘面纱系列-第1话","url":"http://yoursite.com/2015/02/05/揭开ARC的神秘面纱系列-第1话/","content":"<p>这个系列一共有四篇博客，是Matt Galloway大神关于ARC的内部实现的一些探索，看完之后觉得收获不少。因此尝试着翻译出来和大家分享，一定会翻译不当之处，希望大家及时指正。<br><a href=\"http://www.galloway.me.uk/2012/01/a-look-under-arcs-hood-episode-1/\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>以下是正文：</p>\n<p>在Twitter上和<a href=\"https://twitter.com/jacobrelkin\" target=\"_blank\" rel=\"external\">@jacobrelkin</a>进行了一次<a href=\"https://twitter.com/mattjgalloway/status/154478264537194496\" target=\"_blank\" rel=\"external\">交流</a>之后，我决定写几篇博客关于ARC在神秘的面纱之下是如何运转和如何窥视其内部机制的方法。这篇博客我将解释ARC如何处理retain、release和autorelease这三个关键字对应的内部实现。</p>\n<p>我们通过定义一个类作为开始，如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ClassA</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">\t<span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">retain</span>) <span class=\"built_in\">NSNumber</span> *foo;</div><div class=\"line\">\t<span class=\"keyword\">@end</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ClassA</span></span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">@synthesize</span> foo;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"keyword\">void</span>)changeFooDirect:(<span class=\"built_in\">NSNumber</span>*)inFoo &#123;</div><div class=\"line\">\t    foo = inFoo;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"keyword\">void</span>)changeFooSetter:(<span class=\"built_in\">NSNumber</span>*)inFoo &#123;</div><div class=\"line\">\t    <span class=\"keyword\">self</span>.foo = inFoo;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"built_in\">NSNumber</span>*)newNumber &#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSNumber</span> alloc] initWithInt:<span class=\"number\">10</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t- (<span class=\"built_in\">NSNumber</span>*)getNumber &#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSNumber</span> alloc] initWithInt:<span class=\"number\">10</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">@end</span>\t</div><div class=\"line\">\t\t</div><div class=\"line\">```</div></pre></td></tr></table></figure>\n<p>上述代码覆盖了ARC的几个重要的方面，包括直接访问成员变量与通过setter访问这两种方式的比较，以及当不同的函数名的函数返回某个对象时ARC将会如何添加autorelease属性。</p>\n<p>让我们首先关注直接访问成员变量与通过setter访问这两种方式的比较。如果我们编译上述代码并查看其汇编代码将会洞悉其中的奥秘。我决定使用ARMv7指令集而非x86指令集是因为前者更容易理解（纯属个人见解！）。我们可以使用编译参数-fobjc-arc和-fno-objc-arc来开启或关闭ARC。在这些实例中我使用的是优化等级是第3级，也就意味着编译器将会移除多余的代码，这些代码我们既不感兴趣同时还会阻碍我们理解核心代码（读者做一个练习，在不设置优化等级的前提下编译上述代码，看看结果是怎样的）。</p>\n<p>在非ARC的模式下采用如下指令进行编译上述代码：</p>\n<pre><code>$ /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/clang -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk -arch armv7 -fno-objc-arc -O3 -S -o - test-arc.m\n</code></pre><p>然后，查看changeFooDirect:和changeFooDirect:这个两个函数的汇编码：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooDirect:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooDirect:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">str </span>    <span class=\"built_in\">r2</span>, [<span class=\"built_in\">r0</span>, <span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">bx </span>     <span class=\"built_in\">lr</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooSetter:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooSetter:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>继续向前，看看在ARC模式下又是怎样的一副景象。采用如下所示的指令进行编译：</p>\n<pre><code>$ /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/clang -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk -arch armv7 -fobjc-arc -O3 -S -o - test-arc.m\n</code></pre><p>同样，此刻我们只关注changeFooDirect:和changeFooDirect:这两个函数：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooDirect:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooDirect:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(_OBJC_IVAR_$_ClassA.foo-(LPC0_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC0_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">r1</span></div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">r2</span></div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_storeStrong</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA changeFooSetter:]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA changeFooSetter:]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_-(LPC1_0+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC1_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>我们可以一目了然地看到两段汇编代码的不同之处。函数changeFooSetter:完全一样，而函数changeFooDirect:已经发生了变化：调用了一次objc_storeStrong函数。有意思的地方就是这里。如果我们查阅<a href=\"http://clang.llvm.org/docs/AutomaticReferenceCounting.html#runtime.objc_storeStrong\" target=\"_blank\" rel=\"external\">LLVM文档中objc_storeStrong函数的说明</a>将会看到objc_storeStrong函数里完成一个典型的变量交换，释放旧变量然后持有新变量。然而在非ARC模式下，这个变量仅仅是赋值，并没有任何释放或者持有操作。这就是我们期望的结果，感谢ARC！</p>\n<p>接下来是更有趣的地方，newNumber函数对比getNumber函数。这两个函数在非ARC模式下都返回一个引用计数为1的NSNumber对象，也就是说函数调用者持有返回对象。根据Cocoa的命名约定，这个结果似乎符合函数newNumber而不符合函数getNumber。我们期望看到函数getNumber中有调用autorelease。因此，让我们查看非ARC模式下的代码是怎样的：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA newNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA newNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC2_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA getNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA getNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC3_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>然后是ARC模式下：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA newNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA newNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC2_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC2_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC2_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC2_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC2_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">.align</span>  <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"meta\">.code</span>   <span class=\"number\">16</span></div><div class=\"line\">    <span class=\"meta\">.thumb_func</span>     <span class=\"string\">\"-[ClassA getNumber]\"</span></div><div class=\"line\"><span class=\"string\">\"-[ClassA getNumber]\"</span>:</div><div class=\"line\">    <span class=\"keyword\">push </span>   &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">lr</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">mov </span>    <span class=\"built_in\">r7</span>, <span class=\"built_in\">sp</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_2-(LPC3_0+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r0</span>, :lower16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r0</span>, :upper16:(L_OBJC_CLASSLIST_REFERENCES_$_-(LPC3_1+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_0</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\"><span class=\"symbol\">LPC3_1</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r0</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r0</span>, [<span class=\"built_in\">r0</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">movw </span>   <span class=\"built_in\">r1</span>, :lower16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\">    <span class=\"keyword\">movs </span>   <span class=\"built_in\">r2</span>, <span class=\"number\">#10</span></div><div class=\"line\">    <span class=\"keyword\">movt </span>   <span class=\"built_in\">r1</span>, :upper16:(L_OBJC_SELECTOR_REFERENCES_4-(LPC3_2+<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"symbol\">LPC3_2</span>:</div><div class=\"line\">    <span class=\"keyword\">add </span>    <span class=\"built_in\">r1</span>, <span class=\"built_in\">pc</span></div><div class=\"line\">    <span class=\"keyword\">ldr </span>    <span class=\"built_in\">r1</span>, [<span class=\"built_in\">r1</span>]</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_msgSend</div><div class=\"line\">    <span class=\"keyword\">blx </span>    _objc_autorelease</div><div class=\"line\">    <span class=\"keyword\">pop </span>    &#123;<span class=\"built_in\">r7</span>, <span class=\"built_in\">pc</span>&#125;</div></pre></td></tr></table></figure>\n<p>查看上述两段代码唯一不同点：ARC模式下getNumber:函数中调用了objc_autorelease。这也是我们所期望的，因为ARC模式能自动觉察到函数名是以关键字new还是关键字copy开头的，并为不属于这两种的情况的Get类函数的返回对象自动添加一次autorelease调用。棒极了！</p>\n<p>这里仅仅只展示了关于ARC在两种模式下如何工作的一小部分奥秘，与此同时，我希望这能激励读者能自己去探索ARC的内部实现而不是理所当然的接受现有的知识点。作为一个程序员，理解自己使用的工具的内部实现是很重要的。</p>\n"},{"title":"Cocoa RunLoop 系列之Configure Custom InputSource","url":"http://yoursite.com/2015/01/10/Cocoa RunLoop系列之配置自定义输入源/","content":"<p>在上一篇博客<a href=\"http://icebergcwp.com/2015/01/05/Cocoa%20RunLoop%20%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/\" target=\"_blank\" rel=\"external\">Cocoa RunLoop 系列之基础知识</a>介绍了RunLoop的InpuSource有两种：一种是基于Mach端口且由内核触发的source1，另外一种就是自定义且需要手动触发的source0。</p>\n<p>其中source0包括两种自定义形式：一种是Apple实现的自定义InputSource，提供了一系列接口，直接调用即可；另外一种就是由用户根据开发需要完全自定义实现。本文要介绍的就是后者。</p>\n<p>自定义InputSource在实际开发过程的中，可用于在子线程实现周期性且长时间的任务，通过自定义InputSource控制任务的执行。</p>\n<p>然而，实际开发中，大部分需要处理的InputSource都属于source1,少数需要自定义InputSource的情况也可以借助Apple的自定义InputSource函数接口来满足需求。因此，实际开发中几乎不需要用户配置自定义InputSource。既然如此，是否还有探索配置自定义InputSource的必要？我个人的答案是肯定的。通过配置自定InputSource可以窥探RunLoop的整个Routine的具体流程，而不是只停留在理论层面，有助于更深刻地理解RunLoop运行机制。</p>\n<p>下面进入正文，结合理论和源代码阐述配置自定义InputSource的全过程。</p>\n<h3 id=\"理论概述\"><a href=\"#理论概述\" class=\"headerlink\" title=\"理论概述\"></a>理论概述</h3><p>下图是Apple开发文档中介绍自定义InputSource运行流程图：</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Art/custominputsource.jpg\" alt=\"自定义InputSource流程图\"></p>\n<p>结合上图，总结一下几点：</p>\n<ol>\n<li>在工作线程创建一个自定义InputSource并部署到RunLoop中</li>\n<li>主线程中对线程的InputSource和RunLoop进行引用，用于后续操作</li>\n<li>主线程与工作线程共享一个指令集合，以保证指令同步</li>\n<li>通过主线程向InputSource中添加指令和数据</li>\n<li>指令添加结束后，主线程发送一个通知给InputSource，随后唤醒工作线程中的RunLoop</li>\n<li>工作线程的InputSource在接受到通知后，传送指令到RunLoop中等待处理</li>\n<li>RunLoop处理完成，进入休眠，等待下一次唤醒</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>以上述理论为基础，结合Apple文档提供的代码片段，实现了一个配置自定义InputSource的Demo,完整实例可以查看<a href=\"https://github.com/icebergcwp1990/CustomRunLoopInputSourceDemo\" target=\"_blank\" rel=\"external\">GitHub源码</a>。</p>\n<h4 id=\"创建并配置InputSource对象\"><a href=\"#创建并配置InputSource对象\" class=\"headerlink\" title=\"创建并配置InputSource对象\"></a>创建并配置InputSource对象</h4><p>IBRunLoopInputSource类用于管理和配置CFRunLoopSourceRef对象，以及包含一个指令集合。</p>\n<p>以下是初始化函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">IBRunLoopInputSource</span> ()</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">//InputSource对象</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopSourceRef</span> _runLoopSource;</div><div class=\"line\">    <span class=\"comment\">//当前指令</span></div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> _currCommand;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//指令集合</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span> , <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span> * commandInfo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">IBRunLoopInputSource</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark - Init</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> <span class=\"keyword\">self</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//InputSource上下文 ，共有8个回调函数，目前只实现3个</span></div><div class=\"line\">        <span class=\"built_in\">CFRunLoopSourceContext</span> context = &#123;<span class=\"number\">0</span>, (__bridge <span class=\"keyword\">void</span> *)(<span class=\"keyword\">self</span>), <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>,</div><div class=\"line\">            &amp;RunLoopSourceScheduleRoutine,</div><div class=\"line\">            &amp;RunLoopSourceCancelRoutine,</div><div class=\"line\">            &amp;RunLoopSourcePerformRoutine&#125;;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//初始化自定义InputSource</span></div><div class=\"line\">        _runLoopSource = <span class=\"built_in\">CFRunLoopSourceCreate</span>(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, &amp;context);</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码中可看的一共有8个与InputSource相关的回调函数，此处只配置了3个，分别是RunLoopSourceScheduleRoutine、RunLoopSourceCancelRoutine和RunLoopSourcePerformRoutine。这3个回调函数的实现会在后面进行介绍。</p>\n<p>对InputSource的基本操作：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//添加自定义InputSource到当前RunLoop</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addToCurrentRunLoop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CFRunLoopRef</span> runLoop = <span class=\"built_in\">CFRunLoopGetCurrent</span>();</div><div class=\"line\">    <span class=\"comment\">//添加到当前RunLoop的kCFRunLoopDefaultMode模式下</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopAddSource</span>(runLoop, _runLoopSource, kCFRunLoopDefaultMode);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//从指定RunLoop移除自定义InputSource</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)invalidateFromRunLoop:(<span class=\"built_in\">CFRunLoopRef</span> )runLoop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">CFRunLoopRemoveSource</span>(runLoop, _runLoopSource, kCFRunLoopDefaultMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对指令集合的基本操作：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//添加指令到InputSource</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)addCommand:(<span class=\"built_in\">NSInteger</span>)command withData:(<span class=\"keyword\">id</span>)data</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (data)</div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.commandInfo setObject:data forKey:@(command)];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//触发InputSource指令</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)fireCommand:(<span class=\"built_in\">NSInteger</span>)command onRunLoop:(<span class=\"built_in\">CFRunLoopRef</span>)runloop</div><div class=\"line\">&#123;</div><div class=\"line\">    _currCommand = command;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//通知InputSource准备触发指令</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopSourceSignal</span>(_runLoopSource);</div><div class=\"line\">    <span class=\"comment\">//唤醒InputSource所在的RunLoop，该RunLoop必须有的InputSource所在的RunLoop</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopWakeUp</span>(runloop);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的代码可看的，正如之前理论概述总讲的顺序：发出指令之后，先通知InputSource，再唤醒其所在的RunLoop。</p>\n<p>指令通过RunLoop循环，触发相关的回调函数，最终派发给IBRunLoopInputSource对象，然后再处理。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//执行InputSource指令</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)performSourceCommands</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//根据指令获得对应的数据</span></div><div class=\"line\">    <span class=\"keyword\">id</span> data = [<span class=\"keyword\">self</span>.commandInfo objectForKey:@(_currCommand)];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!data) &#123;</div><div class=\"line\">        data = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"Empty data for command : %ld\"</span> , _currCommand ];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//通过代理进行指令数据处理</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.delegate &amp;&amp; [<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(inputSourceForTest:)]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.delegate inputSourceForTest:data];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里，也许有同学感到困惑：为什么绕了一大圈，最终指令执行的代码还是由IBRunLoopInputSource对象来处理，不如直接把指令处理的函数接口公开，直接调用好了？我之前也有类似的困惑，后面仔细一想才想通。可以从两个角度来解答这个困惑：</p>\n<ol>\n<li>自定义InputSource的一个主要目的在于在子线程中进行周期性的任务</li>\n<li>假设在主线程中直接调用，那么执行的代码也是在主线程，背离了初衷。而通过子线程的RunLoop派发之后，指令对应的处理执行是在子线程</li>\n<li>RunLoop的智能休眠配合自定义InputSource能将子线程长时间执行的情况下的资源开销降到最低</li>\n</ol>\n<p>上述3点恰恰的自定义InputSource的精华所在。</p>\n<h4 id=\"创建并配置InputSourceContext对象\"><a href=\"#创建并配置InputSourceContext对象\" class=\"headerlink\" title=\"创建并配置InputSourceContext对象\"></a>创建并配置InputSourceContext对象</h4><p>IBRunLoopContext类是一个容器类，用于管理InputSource与RunLoop之间的关系。Demo中的代码实现的最简单的一对一的关系，也可以实现一对多的关系，即一个InputSource关联多个RunLoop。</p>\n<p>初始化如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithSource:(IBRunLoopInputSource *)runLoopSource andLoop:(<span class=\"built_in\">CFRunLoopRef</span> )runLoop</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//强引用InputSource和InputSource所在的RunLoop</span></div><div class=\"line\">        _runLoopInputSource = runLoopSource;</div><div class=\"line\">        </div><div class=\"line\">        _runLoop = runLoop;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当InputSource加入RunLoop中之后，会触发相关的回调函数。在前文中提到，在创建InputSource的时候Demo中配置了3个与InputSource相关的回调函数，具体实现如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//inputsource部署回调</span></div><div class=\"line\"><span class=\"keyword\">void</span> RunLoopSourceScheduleRoutine (<span class=\"keyword\">void</span> *info, <span class=\"built_in\">CFRunLoopRef</span> rl, <span class=\"built_in\">CFStringRef</span> mode)</div><div class=\"line\">&#123;</div><div class=\"line\">    IBRunLoopInputSource* inputSource = (__bridge IBRunLoopInputSource*)info;</div><div class=\"line\">    <span class=\"comment\">//创建一个context，包含当前输入源和RunLoop</span></div><div class=\"line\">    IBRunLoopContext * theContext = [[IBRunLoopContext alloc] initWithSource:inputSource andLoop:rl];</div><div class=\"line\">    <span class=\"comment\">//将context传入主线程建立强引用，用于后续操作</span></div><div class=\"line\">    [(AppDelegate *)[<span class=\"built_in\">NSApp</span> delegate] performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(registerSource:)</div><div class=\"line\">                          withObject:theContext waitUntilDone:<span class=\"literal\">NO</span>];</div><div class=\"line\">    <span class=\"comment\">//InputSource弱引用context，因为context已经强引用InputSource，避免循环引用，用于后续移除操作</span></div><div class=\"line\">    inputSource.context = theContext;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//inputsource执行任务回调</span></div><div class=\"line\"><span class=\"keyword\">void</span> RunLoopSourcePerformRoutine (<span class=\"keyword\">void</span> *info)</div><div class=\"line\">&#123;</div><div class=\"line\">    IBRunLoopInputSource*  inputSource = (__bridge IBRunLoopInputSource*)info;</div><div class=\"line\">    <span class=\"comment\">//执行InputSource相关的处理</span></div><div class=\"line\">    [inputSource performSourceCommands];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//inputsource移除回调</span></div><div class=\"line\"><span class=\"keyword\">void</span> RunLoopSourceCancelRoutine (<span class=\"keyword\">void</span> *info, <span class=\"built_in\">CFRunLoopRef</span> rl, <span class=\"built_in\">CFStringRef</span> mode)</div><div class=\"line\">&#123;</div><div class=\"line\">    IBRunLoopInputSource* inputSource = (__bridge IBRunLoopInputSource*)info;</div><div class=\"line\">    <span class=\"comment\">//移除主线程中InputSource对应的Context引用</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (inputSource.context)</div><div class=\"line\">    &#123;</div><div class=\"line\">        [(AppDelegate *)[<span class=\"built_in\">NSApp</span> delegate] performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(removeSource:)</div><div class=\"line\">                                                          withObject:inputSource.context waitUntilDone:<span class=\"literal\">YES</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码分别是InputSource部署、执行和移除相关的回调函数：</p>\n<ol>\n<li>部署：在InputSource部署到RunLoop之后，触发回调函数RunLoopSourceScheduleRoutine，将inputSource对象和RunLoop打包成一个context，通过Apple实现的自定义InputSource函数，发送给主线程，用于发送指令</li>\n<li>执行：执行对应的指令</li>\n<li>移除：在主线程中的context引用</li>\n</ol>\n<h4 id=\"创建并配置工作线程\"><a href=\"#创建并配置工作线程\" class=\"headerlink\" title=\"创建并配置工作线程\"></a>创建并配置工作线程</h4><p>IBRunLoopInputSourceThread类用于配置RunLoop和InputSource。</p>\n<p>线程入口函数实现如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)main</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">      </div><div class=\"line\">        <span class=\"comment\">//创建InputSource</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.inputSource = [[IBRunLoopInputSource alloc] init];</div><div class=\"line\">        [<span class=\"keyword\">self</span>.inputSource setDelegate:<span class=\"keyword\">self</span>];</div><div class=\"line\">        <span class=\"comment\">//添加InputSource到当前线程RunLoop</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.inputSource addToCurrentRunLoop];</div><div class=\"line\">        <span class=\"comment\">//配置RunLoop监听器</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> configureRunLoopObserver];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"keyword\">self</span>.cancelled) &#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">//作为对照，执行线程其他非InputSource任务</span></div><div class=\"line\">            [<span class=\"keyword\">self</span> doOtherTask];</div><div class=\"line\">            <span class=\"comment\">//切入指定模式RunLoop，且只执行一次</span></div><div class=\"line\">            [[<span class=\"built_in\">NSRunLoop</span> currentRunLoop] runMode:<span class=\"built_in\">NSDefaultRunLoopMode</span> beforeDate:[<span class=\"built_in\">NSDate</span> distantFuture]];</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在子线程中的入口函数中，创建InputSource并加入RunLoop，随后启动RunLoop。这里一定要在while循环中切换RunLoop，否则RunLoop只会执行一次便退出。原因在于[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]函数只会执行一次RunLoop，如果InputSource未添加或者已处理完或者超时会立即退出RunLoop。</p>\n<h4 id=\"完善主线程配置\"><a href=\"#完善主线程配置\" class=\"headerlink\" title=\"完善主线程配置\"></a>完善主线程配置</h4><p>主线程的配置在AppDelegate类中实现，包括创建工作线程、管理InputSource引用以及添加指令和发送通知。</p>\n<p>管理InputSource引用：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册子线程中InputSource对应的context,用于后续通信</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)registerSource:(IBRunLoopContext*)sourceInfo</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.sourcesToPing addObject:sourceInfo];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//移除子线程中InputSource对应的context</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)removeSource:(IBRunLoopContext*)sourceInfo</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span>.sourcesToPing enumerateObjectsUsingBlock:^(<span class=\"keyword\">id</span> obj, <span class=\"built_in\">NSUInteger</span> idx, <span class=\"built_in\">BOOL</span> *stop) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> ([obj isEqual:sourceInfo])</div><div class=\"line\">        &#123;</div><div class=\"line\">           [<span class=\"keyword\">self</span>.sourcesToPing removeObject:obj];</div><div class=\"line\">            *stop = <span class=\"literal\">YES</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;];</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加指令和发送通知</p>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> - (<span class=\"keyword\">void</span>)addCommand:(<span class=\"built_in\">NSInteger</span>)command withData:(<span class=\"keyword\">id</span>)data</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSAssert</span>([<span class=\"keyword\">self</span>.sourcesToPing count] !=  <span class=\"number\">0</span>, <span class=\"string\">@\"Empty Input Source...\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.sourcesToPing.count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//此处默认取第一个用于测试，可优化</span></div><div class=\"line\">        IBRunLoopContext *runLoopContext = [<span class=\"keyword\">self</span>.sourcesToPing objectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">        IBRunLoopInputSource *inputSource = runLoopContext.runLoopInputSource;</div><div class=\"line\">        <span class=\"comment\">//向数据源添加指令</span></div><div class=\"line\">        [inputSource addCommand:command withData:data];</div><div class=\"line\">        <span class=\"comment\">//添加后并非要立刻触发，此处仅用于测试</span></div><div class=\"line\">        [inputSource fireCommand:command onRunLoop:runLoopContext.runLoop];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在写上一篇博客的时候，对与配置自定义InputSource还尚不了解。利用碎片时间和工作间隙仔细阅读了Apple开发文档的相关资料，并且在网上查阅了同行的一些博客之后，决定自己动手写了一个Demo。写Demo的过程的遇到一些新的困惑，随着Demo的完成，大部分困惑也随之而解。</p>\n"},{"title":"Cocoa RunLoop 系列之基础知识","url":"http://yoursite.com/2015/01/05/Cocoa RunLoop 系列之基础知识/","content":"<p>这篇博客主要结合Apple开发者文档和个人的理解，写的一篇关于Cocoa RunLoop基本知识点的文章。在文档的基础上，概况和梳理了RunLoop相关的知识点。</p>\n<h3 id=\"一、Event-Loop-amp-Cocoa-RunLoop\"><a href=\"#一、Event-Loop-amp-Cocoa-RunLoop\" class=\"headerlink\" title=\"一、Event Loop &amp; Cocoa RunLoop\"></a>一、Event Loop &amp; Cocoa RunLoop</h3><h4 id=\"宏观上：Event-Loop\"><a href=\"#宏观上：Event-Loop\" class=\"headerlink\" title=\"宏观上：Event Loop\"></a>宏观上：Event Loop</h4><ol>\n<li>RunLoop是一个用于循环监听和处理事件或者消息的模型，接收请求，然后派发给相关的处理模块，wikipedia上有更为全面的介绍：<a href=\"https://en.wikipedia.org/wiki/Event_loop\" target=\"_blank\" rel=\"external\">Event_loop</a></li>\n<li>Cocoa RunLoop属于Event Loop模型在Mac平台的具体实现</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Event_loop#Implementations\" target=\"_blank\" rel=\"external\">其他平台的类似实现</a>：X Window程序，Windows程序 ，Glib库等</li>\n</ol>\n<h4 id=\"微观上-Cocoa-RunLoop\"><a href=\"#微观上-Cocoa-RunLoop\" class=\"headerlink\" title=\"微观上: Cocoa RunLoop\"></a>微观上: Cocoa RunLoop</h4><ol>\n<li>Cocoa RunLoop本质上就是一个对象，提供一个入口函数启动事件循环，在满足特点条件后才会退出。</li>\n<li>Cocoa RunLoop与普通while/for循环不同的是它能监听处理事件和消息，能智能休眠和被唤醒，这些功能的其实现依赖于Mac Port。</li>\n</ol>\n<h3 id=\"二、-Cocoa-RunLoop的内部结构\"><a href=\"#二、-Cocoa-RunLoop的内部结构\" class=\"headerlink\" title=\"二、 Cocoa RunLoop的内部结构\"></a>二、 Cocoa RunLoop的内部结构</h3><p>但凡说到Cocoa RunLoop内部结构，都离不开下面这张图，来源于Apple开发者文档</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Art/runloop.jpg\" alt=\"图1-1 RunLoop结构图\"></p>\n<p>结合上图，可将RunLoop架构划分为四个部分：</p>\n<ol>\n<li>事件源</li>\n<li>运行模式</li>\n<li>循环机制</li>\n<li>执行反馈</li>\n</ol>\n<h4 id=\"1-事件源\"><a href=\"#1-事件源\" class=\"headerlink\" title=\"1. 事件源\"></a>1. 事件源</h4><p>Cocoa RunLoop接受的事件源分为两种类型：Input Sources 和 Timer Sources</p>\n<h5 id=\"1-1-Input-Sources\"><a href=\"#1-1-Input-Sources\" class=\"headerlink\" title=\"1.1. Input Sources\"></a>1.1. Input Sources</h5><p>Input Sources通过异步派发的方式将事件转送到目标线程，事件类别分为两大块：</p>\n<ul>\n<li><p>Port-Based Sources ：</p>\n<p>  基于Mach端口的事件源，Cocoa和Core Foundation这两个框架已经提供了内部支持，只需要调用端口相关的对象或者函数就能提供端口进行通信。比如：将NSPort对象部署到RunLoop中，实现两个线程的循环通信。</p>\n</li>\n<li><p>Custom Input Sources ：</p>\n<ul>\n<li>用户自定义的输入源：使用Core Foundation框架中CFRunLoopSourceRef对象的相关函数实现。具体实现可以查看另外一篇博客：<a href=\"http://icebergcwp.com/2015/01/10/Cocoa%20RunLoop%E7%B3%BB%E5%88%97%E4%B9%8B%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E6%BA%90/\" target=\"_blank\" rel=\"external\">Cocoa RunLoop 系列之Configure Custom InputSource</a></li>\n<li><p>Cocoa Perform Selector Sources：Cocoa框架内部实现的自定义输入源，可以跨线程调用，实现线程见通信，有点类似于Port-Based事件源，不同的是这种事件源只在RunLoop上部署一次，执行结束后便会自动移除。如果目标线程中没有启动RunLoop也就意味着无法部署这类事件源，因此不会得到预期的结果。</p>\n<p>  使用Cocoa自定义事件源的函数接口，如下：</p>\n</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//部署在主线程</span></div><div class=\"line\">\t<span class=\"comment\">//参数列表：Selector:事件源处理函数,Selector参数,是否阻塞当前线程,指定RunLoop模式</span></div><div class=\"line\">\tperformSelectorOnMainThread:withObject:waitUntilDone:</div><div class=\"line\">performSelectorOnMainThread:withObject:waitUntilDone:modes:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//部署在指定线程</span></div><div class=\"line\"><span class=\"comment\">//参数列表：Selector:事件源处理函数,指定线程,Selector参数,是否阻塞当前线程,指定RunLoop模式</span></div><div class=\"line\">permSelector:onThread:withObject:waitUntilDone:</div><div class=\"line\">performSelector:onThread:withObject:waitUntilDone:modes:</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//部署在当前线程</span></div><div class=\"line\"><span class=\"comment\">//参数列表：Selector:事件源处理函数,Selector参数,延时执行时间,指定RunLoop模式</span></div><div class=\"line\">performSelector:withObject:afterDelay:</div><div class=\"line\">performSelector:withObject:afterDelay:inModes:</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//撤销某个对象通过函数performSelector:withObject:afterDelay:部署在当前线程的全部或者指定事件源</span></div><div class=\"line\">cancelPreviousPerformRequestsWithTarget:</div><div class=\"line\">cancelPreviousPerformRequestsWithTarget:selector:object:</div></pre></td></tr></table></figure>\n<p>综上，Input Sources包括基于Mach端口的事件源和自定义的事件源，二者的唯一区别在于被触发的方式：前者是由内核自动触发，后者则需要在其他线程中手动触发。</p>\n</li>\n</ul>\n<h5 id=\"1-2-Timer-Sources\"><a href=\"#1-2-Timer-Sources\" class=\"headerlink\" title=\"1.2. Timer Sources\"></a>1.2. Timer Sources</h5><p> 不同于Input Sources的异步派发，Timer Source是通过同步派发的方式，在预设时间到达时将事件转送到目标线程。这种事件源可用于线程的自我提醒功能，实现周期性的任务。</p>\n<ul>\n<li>如果RunLoop当前运行模式没有添加Time Sources，则在RunLoop中部署的定时器不会被执行。</li>\n<li>设定的间隔时间与真实的触发时间之间没有必然联系，定时器会根据设定的间隔时间周期性的派发消息到RunLoop，但是真实的触发时间由RunLoop决定，假设RunLoop当前正在处理其一个长时间的任务，则触发时间会被延迟，如果在最终触发之前Timer已经派发了N个消息，RunLoop也只会当做一次派发对待，触发一次对应的处理函数。</li>\n</ul>\n<h4 id=\"2-运行模式\"><a href=\"#2-运行模式\" class=\"headerlink\" title=\"2. 运行模式\"></a>2. 运行模式</h4><p>运行模式类似于一个过滤器，用于屏蔽那些不关心的事件源，让RunLoop专注于监听和处理指定的事件源和RunLoop Observer。</p>\n<p>CFRunLoopMode 和 CFRunLoop 的数据结构大致如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> __CFRunLoop &#123;</div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _commonModes;     <span class=\"comment\">// Set</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _commonModeItems; <span class=\"comment\">// Set&lt;Source/Observer/Timer&gt;</span></div><div class=\"line\">    <span class=\"built_in\">CFRunLoopModeRef</span> _currentMode;    <span class=\"comment\">// Current Runloop Mode</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _modes;           <span class=\"comment\">// Set</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> __CFRunLoopMode &#123;</div><div class=\"line\">    <span class=\"built_in\">CFStringRef</span> _name;            <span class=\"comment\">// Mode Name, 例如 @\"kCFRunLoopDefaultMode\"</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _sources0;    <span class=\"comment\">// Set</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableSetRef</span> _sources1;    <span class=\"comment\">// Set</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableArrayRef</span> _observers; <span class=\"comment\">// Array</span></div><div class=\"line\">    <span class=\"built_in\">CFMutableArrayRef</span> _timers;    <span class=\"comment\">// Array</span></div><div class=\"line\">    ...</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>结合以上源码，总结以下几点：</p>\n<ul>\n<li>每种模式通过name属性作为标识。</li>\n<li>一种运行模式（Run Loop Mode）就是一个集合，包含需要监听的事件源Input Sources和Timer Soueces以及需要触发的RunLoop observers。</li>\n<li>Cocoa RunLoop包含若干个Mode，调用RunLoop是指定的Mode称之为CurrentMode。RunLoop可以在不同的Mode下切换，切换时退出CurrentMode,并保存相关上下文，再进入新的Mode。</li>\n<li>在启动Cocoa RunLoop是必须指定一种的运行模式，且如果指定的运行模式没有包含事件源或者observers，RunLoop会立刻退出。</li>\n<li>CFRunLoop结构中的commonModes是Mode集合,将某个Mode的name添加到commonModes集合中，表示这个Mode具有“common”属性。</li>\n<li>CFRunLoop结构中的commonModeItems则是共用源的集合，包括事件源和执行反馈。这些共用源会被自动添加到具有“common”属性的Mode中。</li>\n</ul>\n<p><strong> Note </strong> : 不同的运行模式区别在于事件源的不同，比如来源于不同端口的事件和端口事件与Timer事件。不能用于区分不同的事件类型，比如鼠标消息事件和键盘消息事件，因为这两种事件都属于基于端口的事件源。</p>\n<p>以下是苹果预定义好的一些运行模式：</p>\n<ul>\n<li>NSDefaultRunLoopMode //默认的运行模式，适用于大部分情况</li>\n<li>NSConnectionReplyMode //Cocoa库用于监听NSConnection对象响应，开发者很少使用</li>\n<li>NSModalPanelRunLoopMode //模态窗口相关事件源</li>\n<li>NSEventTrackingRunLoopMode  //鼠标拖拽或者屏幕滚动时的事件源</li>\n<li>NSRunLoopCommonModes //用于操作RunLoop结构中commonModes和commonModeItems两个属性</li>\n</ul>\n<h4 id=\"3-循环机制\"><a href=\"#3-循环机制\" class=\"headerlink\" title=\"3. 循环机制\"></a>3. 循环机制</h4><p>循环机制涉及两方面：</p>\n<h5 id=\"3-1-RunLoop与线程之间的关系\"><a href=\"#3-1-RunLoop与线程之间的关系\" class=\"headerlink\" title=\"3.1. RunLoop与线程之间的关系\"></a>3.1. RunLoop与线程之间的关系</h5><p>Apple文档中提到:开发者不需要手动创建RunLoop对象，每个线程包括主线程都关联了一个RunLoop对象。除了主线程的RunLoop在程序启动时被开启，其他线程的RunLoop都需要手动开启。</p>\n<p>待解决的疑问：</p>\n<ul>\n<li>线程中的RunLoop是一直存在还是需要时再创建？</li>\n<li>线程与RunLoop的是如何建立联系的？</li>\n<li>线程与RunLoop对象是否是一一对应的关系？</li>\n</ul>\n<h5 id=\"3-2-RunLoop事件处理流程\"><a href=\"#3-2-RunLoop事件处理流程\" class=\"headerlink\" title=\"3.2. RunLoop事件处理流程\"></a>3.2. RunLoop事件处理流程</h5><p>弄清楚RunLoop内部处理逻辑是理解RunLoop的关键，将单独写一篇博客进行分析。</p>\n<p>待解决的疑问：</p>\n<ul>\n<li>RunLoop如何处理不同事件源？</li>\n<li>RunLoop不同模式切换是如何实现的？</li>\n</ul>\n<p>以上两方面，将在下一篇博客<a href=\"\">Cocoa RunLoop 系列之源码解析</a>中结合源代码来找到答案。</p>\n<h4 id=\"4-执行反馈\"><a href=\"#4-执行反馈\" class=\"headerlink\" title=\"4. 执行反馈\"></a>4. 执行反馈</h4><p>RunLoop Observers机制属于RunLoop一个反馈机制，将RunLoop一次循环划分成若干个节点，当执行到对应的节点调用相应的回调函数，将RunLoop当前的执行状态反馈给用户。</p>\n<ul>\n<li>用户可以通过Core Foundation框架中的CFRunLoopObserverRef注册 observers。</li>\n<li><p>监听节点：</p>\n<ul>\n<li>The entrance to the run loop. //RunLoop启动</li>\n<li>When the run loop is about to process a timer. //即将处理Timer事件源</li>\n<li>When the run loop is about to process an input source. //即将处理Input事件源</li>\n<li>When the run loop is about to go to sleep. //即将进入休眠</li>\n<li>When the run loop has woken up, but before it has processed the event that woke it up. //重新被唤醒，且在处理唤醒事件之前</li>\n<li>The exit from the run loop. //退出RunLoop</li>\n</ul>\n</li>\n<li><p>监听类别分为两种：一次性和重复监听。</p>\n</li>\n</ul>\n<h3 id=\"三、何时使用RunLoop\"><a href=\"#三、何时使用RunLoop\" class=\"headerlink\" title=\"三、何时使用RunLoop\"></a>三、何时使用RunLoop</h3><p>由于主线程的RunLoop在程序启动时被自动创建并执行，因此只有在其他线程中才需要手动启动RunLoop。很多情况下，对于RunLoop的使用多数情况是在主线程中，包括进行RunLoop模式切换，设置RunLoop Observer等。</p>\n<p>在非主线程中，以下几种情况适用于RunLoop:</p>\n<ul>\n<li>使用基于端口或者自定义的事件源与其他线程进行通信。</li>\n<li>需要在当前线程中使用Timer，必须部署才RunLoop中才有效。</li>\n<li>在目标线程中调用performSelector… 函数，因为本质上使用了Cocoa自定义的事件源，依赖于RunLoop才能被触发。</li>\n<li>线程需要进行周期性的任务，需要长时间存在，而非执行一次。</li>\n</ul>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>一直以来，RunLoop对我来说都属于一个比较模糊的概念，在实际编程中也有用到RunLoop的一些功能，确实感觉到很强大，但是仅仅停留在应用层面，并不是很理解具体含义。因此，为了更好的使用RunLoop，有必要研究和梳理RunLoop相关的知识点。</p>\n"},{"title":"Objective-C Runtime 解析","url":"http://yoursite.com/2015/01/01/objective-c_runtime_解析/","content":"<p>这是一篇译文，作为一个英语水平处于半吊子的理科男，因此一定存在不尽原意的地方，翻译此文纯属个人喜好，希望能得到大家的指点和反馈，读者如有兴趣的话可以<a href=\"http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html\" target=\"_blank\" rel=\"external\">查看原文</a>。</p>\n<p><strong>以下是正文：</strong></p>\n<p>一般而言，当人们刚接触Cocoa/Objective-C的时候，运行时机制（Objective-C Runtime）是最容易被忽视的特征之一。究其原因在于Objective-C是一门简单的语言，花费几个小时便能入门，此后，新手们通常会将大部分的时间和精力用于研究Cocoa Framework以及如何使用它。然而，每一个人至少应该清楚运行时是如何运转的，而不仅仅停留在编译方式的认知层面，如：[target doMethodWith:var];编译之后变成object_msgSend(target,@selector(doMethodWith:),var1)。了解运行时机制的工作原理可以帮助你进一步理解Objective-C这门语言以及你编写的App的运转流程。我相信各个水平层次的Mac/iPhone开发者都会在研究运行时机制的过程中有所收获。</p>\n<h3 id=\"Objective-C-Runtime库是开源的\"><a href=\"#Objective-C-Runtime库是开源的\" class=\"headerlink\" title=\"Objective-C Runtime库是开源的\"></a>Objective-C Runtime库是开源的</h3><p>Objective-C Runtime库是开源的，你随时可以在<a href=\"http://opensource.apple.com\" target=\"_blank\" rel=\"external\">源代码</a>上查阅。事实上，查阅源代码是弄清楚Objective-C原理的首选途径之一，胜过阅读苹果开发文档。下载最新版本的源代码<a href=\"http://opensource.apple.com/source/objc4/objc4-680/\" target=\"_blank\" rel=\"external\">点击我</a>。</p>\n<h3 id=\"动态-amp-静态-语言\"><a href=\"#动态-amp-静态-语言\" class=\"headerlink\" title=\"动态 &amp; 静态 语言\"></a>动态 &amp; 静态 语言</h3><p>Objective-C是基于运行时的语言，意味着它会尽可能地将决定代码执行逻辑的操作从编译&amp;链接阶段延迟到代码被执行的阶段。这将给你带来很大的灵活性，因此如果有必要的话你可以将消息重定向到合适的对象，或者你甚至可以交换两个方法实现，等等。实现上述功能需要运行时具备审查对象可以响应哪些请求和不能响应哪些请求然后准确地派发消息的能力。如果我们将Objective-C这一特性对比C语言。C语言程序运行始于main()函数，基于至上而下的设计执行你的逻辑和调用你实现的函数。C结构体不能通过发送请求到其他的结构体来执行某个函数。很可能你会编写一段C语言代码，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt; stdio.h &gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码经过编译器编译、优化，然后将优化后的代码转化成汇编语言：</p>\n<figure class=\"highlight arm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">.text</span></div><div class=\"line\"> <span class=\"meta\">.align</span> <span class=\"number\">4</span>,<span class=\"number\">0x90</span></div><div class=\"line\"> .globl _main</div><div class=\"line\"><span class=\"symbol\">_main</span>:</div><div class=\"line\"><span class=\"symbol\">Leh_func_begin1</span>:</div><div class=\"line\">\t<span class=\"keyword\">pushq </span>%rbp</div><div class=\"line\"><span class=\"symbol\">Llabel1</span>:</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rsp, %rbp</div><div class=\"line\"><span class=\"symbol\">Llabel2</span>:</div><div class=\"line\"> <span class=\"keyword\">subq </span><span class=\"number\">$16</span>, %rsp</div><div class=\"line\"><span class=\"symbol\">Llabel3</span>:</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rsi, %rax</div><div class=\"line\"> <span class=\"keyword\">movl </span>%edi, %ecx</div><div class=\"line\"> <span class=\"keyword\">movl </span>%ecx, -<span class=\"number\">8</span>(%rbp)</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rax, -<span class=\"number\">16</span>(%rbp)</div><div class=\"line\"> xorb %al, %al</div><div class=\"line\"> leaq LC(%rip), %rcx</div><div class=\"line\"> <span class=\"keyword\">movq </span>%rcx, %rdi</div><div class=\"line\"> call _printf</div><div class=\"line\"> <span class=\"keyword\">movl </span><span class=\"number\">$0</span>, -<span class=\"number\">4</span>(%rbp)</div><div class=\"line\"> <span class=\"keyword\">movl </span>-<span class=\"number\">4</span>(%rbp), %eax</div><div class=\"line\"> <span class=\"keyword\">addq </span><span class=\"number\">$16</span>, %rsp</div><div class=\"line\"> <span class=\"keyword\">popq </span>%rbp</div><div class=\"line\"> ret</div><div class=\"line\"><span class=\"symbol\">Leh_func_end1</span>:</div><div class=\"line\"> .cstring</div><div class=\"line\"><span class=\"symbol\">LC</span>:</div><div class=\"line\"> <span class=\"meta\">.asciz</span> <span class=\"string\">\"Hello World!\"</span></div></pre></td></tr></table></figure>\n<p>随后链接相关的库生成一个可执行文件。对比于Objective-C，虽然代码处理过程很相似，但是编译后的代码取决于Objective-C Runtime库。当我们最初学习Objective-C时被告知中括号里面的代码是如何被处理的，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> doSomethingWithVar:var1];</div></pre></td></tr></table></figure>\n<p>被转变成</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(doSomethingWithVar:),var1);</div></pre></td></tr></table></figure>\n<p>除此之外我们并不真的知道运行时机制是如何工作的，也许很久以后会知道。</p>\n<h3 id=\"何为Runtime-运行时\"><a href=\"#何为Runtime-运行时\" class=\"headerlink\" title=\"何为Runtime(运行时)\"></a>何为Runtime(运行时)</h3><p>Objective-C Runtime就是一个Runtime库，主要有C语言&amp;汇编语言编写而成，在C语言的基础上加上面向对象的功能之后就成为了Objective-C语言。这意味着运行时机制负责加载类，方法派发，方法传达等操作。本质上而言，运行时机制提供了所有的需要的结构用以支持Objective-C的面向对象编程。</p>\n<h3 id=\"Objective-C-运行时术语\"><a href=\"#Objective-C-运行时术语\" class=\"headerlink\" title=\"Objective-C 运行时术语\"></a>Objective-C 运行时术语</h3><p>在进一步深入之前，让我们扫清一些术语的障碍，这样使我们处于同一立场。就MacOS X App &amp; iPhone OS App开发者所关心而言，这里有两种运行时机制: Modern Runtime和Legacy Runtime。Modern Runtime适用于所有64位MacOS应用和所有iPhone应用，Legacy Runtime适用于所有的32位MacOS应用。运行时机制中有两种类型的函数：实例函数（以‘-’符号开头如-(void)doFoo）;类函数（以‘+’开头如+(id)alloc）。两种函数都与C函数很像，包含一组实现某个任务的代码，如下所示</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">NSString</span> *)movieTitle</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@\"Futurama: Into the Wild Green Yonder\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>选择器：在Objective-C中，选择器本质上是一个C数据结构体用以标识一个对象将要执行的函数。在运行时机制中的定义如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_selector  *SEL;</div></pre></td></tr></table></figure>\n<p>使用方式</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SEL aSel = <span class=\"keyword\">@selector</span>(movieTitle);</div></pre></td></tr></table></figure>\n<p>消息调用：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[target getMovieTitleForObject:obj];</div></pre></td></tr></table></figure>\n<p>Objective-C消息就是中括号[]里面的所有东西，包括消息的接受者target，调用的函数getMovieTileForObject以及所有发送的参数obj。消息调用虽然样式上类似于c函数调用但是实现却不同。实际上，当你发送一个消息给一个对象并意味着函数会被执行。对象可能会检测谁是消息的发送者，基于此再决定执行一个不同的函数或者转送消息给其他不同的目标对象。如果你查看运行时机制里的类定义，你将会看到如下所示的内容：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object &#123;</div><div class=\"line\">    Class isa;</div><div class=\"line\">&#125; *<span class=\"keyword\">id</span>;</div></pre></td></tr></table></figure>\n<p>这里有几个要点。首先是类Class和对象Object都有一个对应的结构体。所有的objc_object结构体都有一个类指针isa，这就是我们所说的“<strong>isa指针</strong>”。运行时机制需要通过检测一个对象的isa指针去查看对象的类别，然后查看该对象是否能响应你当前发送过来的消息。接下来是id指针，id指针默认不属于任何类别只表明指向的是一个Objective-C对象。对于id指针指向的对象，你可以获知对象的类别，查看对象是否能响应某个函数等等，然后当你具体了解了id指针指向的对象之后便可以更好的使用该对象。你同样可以查看LLVM/Clang文档中Blocks的定义：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Block_literal_1 &#123;</div><div class=\"line\">    <span class=\"keyword\">void</span> *isa; <span class=\"comment\">// initialized to &amp;_NSConcreteStackBlock or &amp;_NSConcreteGlobalBlock</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flags;</div><div class=\"line\">    <span class=\"keyword\">int</span> reserved; </div><div class=\"line\">    <span class=\"keyword\">void</span> (*invoke)(<span class=\"keyword\">void</span> *, ...);</div><div class=\"line\">    <span class=\"keyword\">struct</span> Block_descriptor_1 &#123;</div><div class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> reserved; <span class=\"comment\">// NULL</span></div><div class=\"line\">     <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">// sizeof(struct Block_literal_1)</span></div><div class=\"line\"> <span class=\"comment\">// optional helper functions</span></div><div class=\"line\">     <span class=\"keyword\">void</span> (*copy_helper)(<span class=\"keyword\">void</span> *dst, <span class=\"keyword\">void</span> *src);</div><div class=\"line\">     <span class=\"keyword\">void</span> (*dispose_helper)(<span class=\"keyword\">void</span> *src); </div><div class=\"line\">    &#125; *descriptor;</div><div class=\"line\">    <span class=\"comment\">// imported variables</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Block结构的设计兼容于运行时机制。因此Block被视为一个Objective-C对象，所有也就可以响应消息如-retain,-release,-copy等等。</p>\n<p>IMP:Method Implementations</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">id</span> (*IMP)(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>,SEL _cmd,...);</div></pre></td></tr></table></figure>\n<p>IMP是一个函数指针，由编译器生成且指向函数的实现内容。如果你目前是一个Objective-C新手则浅尝辄止，但是我们随后会了解运行时机制是如何调用你的函数的。</p>\n<p>Objective-C类：类里面是什么？在Objective-C中，类实现基本上类似于：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyClass</span> : <span class=\"title\">NSObject</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//vars</span></div><div class=\"line\"><span class=\"built_in\">NSInteger</span> counter;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//methods</span></div><div class=\"line\">-(<span class=\"keyword\">void</span>)doFoo;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>但是类在运行时机制中定义远不如此，如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div></pre></td></tr></table></figure>\n<p>我们可以看到一个类中声明了一个父类的引用，类名，实例变量列表，方法列表，缓存以及协议列表。当响应发送给类或对象的消息时，运行时机制需要用到这些信息。</p>\n<h3 id=\"类定义对象同时类本身也是对象？何解？\"><a href=\"#类定义对象同时类本身也是对象？何解？\" class=\"headerlink\" title=\"类定义对象同时类本身也是对象？何解？\"></a>类定义对象同时类本身也是对象？何解？</h3><p>之前我提到过在Objective-C中类本身也是对象，运行时机制通过引入元类（Meta Class）来处理类对象。当你发送一个类似于[NSObject alloc]消息的时候，实际上是发送一个消息给类对象，此时将类对象视为元类的实例对待，而元类本身也是一个根元类（Root Meta Class）的实例。While if you say subclass from NSObject, your class points to NSObject as it’s superclass. However all meta classes point to the root metaclass as their superclass. (原文似乎表达观点有误，暂不翻译)。所有的元类仅有一个类函数列表（不同于类处理实例函数列表，还有变量列表和协议列表等等）。因此，当你发送一个消息给类对象时，如[NSObject alloc]，objc_megSend()实际上是搜索元类的函数列表查看是否有响应的函数，如果存在则在该类对象上执行该函数。</p>\n<h3 id=\"为什么继承Apple的原生类？\"><a href=\"#为什么继承Apple的原生类？\" class=\"headerlink\" title=\"为什么继承Apple的原生类？\"></a>为什么继承Apple的原生类？</h3><p>在你刚开始Cocoa编程时，相关教程都是说创建一个类继承于NSObject然后开始编写自己的代码，简单地继承Apple的原生类会让你获益匪浅。其中一个你甚至意识不到的好处就是让你创建的类运行于运行时机制之上。当我们新建一个实例对象，如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyObject *object = [[MyObject alloc] init];</div></pre></td></tr></table></figure>\n<p>最先被执行的消息是+alloc。如果你<a href=\"https://developer.apple.com/library/content/#documentation/cocoa/reference/Foundation/Classes/NSObject_Class/Reference/Reference.html\" target=\"_blank\" rel=\"external\">查阅这个文档</a>会发现：“isa这一实例变量被初始化指向一个描述对于类的数据结构体，其他所有的实例变量都被初始化为0”。所以，通过继承Apple原始类不仅仅继承一些不错的属性，而且还能让我们轻易地创建符合于运行时机制要求的对象（包含一个指向类的isa指针）。</p>\n<h3 id=\"类缓存机制\"><a href=\"#类缓存机制\" class=\"headerlink\" title=\"类缓存机制\"></a>类缓存机制</h3><p>当OC的运行时机制机制通过检视一个对象的isa指针指向的类时会发现该对象实现了很多函数。然而，你可能仅仅调用其中的一小部分也就意味没必要每一次查找某个函数时都去搜索一遍类中的函数列表。因此，类创建了缓存，将你每次搜索函数列表后找到的相应函数存入缓存中。所以，当objc_msgSend()在类中搜寻某个函数是首先会遍历缓存列表。这样做的理论依据在于如果你发送过某个消息给一个对象，你很可能回再次发送同样的消息。因此如果我们将该理论考虑在内意味着如果你有一个NSObject的子类MyObject,并运行以下代码：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">MyObject *obj = [[MyObject alloc] init];</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyObject</span></span></div><div class=\"line\">-(<span class=\"keyword\">id</span>)init &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])&#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> setVarA:@”blah”];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>接下来发生：</p>\n<ol>\n<li>[MyObject alloc]最先被执行。因为MyObject类没有实现alloc函数所以在该类自然找不到对应的函数，随后进入父类指针指向的NSObject类。</li>\n<li>询问NSObject类是否响应+alloc，发现其实现了alloc函数。+alloc检测到接收类是MyObject然后分配一块响应大小的内存并在其中初始化一个isa指针指向MyObject类。现在，我们获得了一个实例对象，随后运行时机制将NSObject类的+alloc函数指针存入NSObject对象对应的类中的缓存列表中。</li>\n<li>截至目前，我们发送了一个类消息，现在我们发送一个实例消息：调用-init函数或者自定义的初始化函数。显然，MyObject的实例对象能响应这个消息，因此-(id)init会被存入缓存列表中。</li>\n<li>随后self=[super init]被调用。super作为一个魔法关键字指向父类对象，因此转向NSObjct类中，调用init函数。这样做是为了确保面向对象继承体系（OOP inheritance）正常运转，因为所以的父类都将会正确地初始化它们的变量，然后作为子类对象可以正确地初始化自身的变量和必要时重载父类。</li>\n</ol>\n<p>在这个NSObject类的例子中，没有特别的要点出现。但是事实并不总是如此，有时候初始化很重要，如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt; Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MyObject</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"built_in\">NSString</span> *aString;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">retain</span>) <span class=\"built_in\">NSString</span> *aString;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MyObject</span></span></div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">id</span>)init</div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">  [<span class=\"keyword\">self</span> setAString:<span class=\"literal\">nil</span>];</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@synthesize</span> aString;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">int</span> main (<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"built_in\">NSAutoreleasePool</span> * pool = [[<span class=\"built_in\">NSAutoreleasePool</span> alloc] init];</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">id</span> obj1 = [<span class=\"built_in\">NSMutableArray</span> alloc];</div><div class=\"line\"> <span class=\"keyword\">id</span> obj2 = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"keyword\">id</span> obj3 = [<span class=\"built_in\">NSArray</span> alloc];</div><div class=\"line\"> <span class=\"keyword\">id</span> obj4 = [[<span class=\"built_in\">NSArray</span> alloc] initWithObjects:<span class=\"string\">@\"Hello\"</span>,<span class=\"literal\">nil</span>];</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj1 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj1 <span class=\"keyword\">class</span>]));</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj2 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj2 <span class=\"keyword\">class</span>]));</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj3 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj3 <span class=\"keyword\">class</span>]));</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj4 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj4 <span class=\"keyword\">class</span>]));</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"keyword\">id</span> obj5 = [MyObject alloc];</div><div class=\"line\"> <span class=\"keyword\">id</span> obj6 = [[MyObject alloc] init];</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj5 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj5 <span class=\"keyword\">class</span>]));</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"obj6 class is %@\"</span>,<span class=\"built_in\">NSStringFromClass</span>([obj6 <span class=\"keyword\">class</span>]));</div><div class=\"line\">  </div><div class=\"line\"> [pool drain];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你是Cocoa初学者，然后我问你上述代码的打印结果，你的回答可能如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSMutableArray</span></div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span> </div><div class=\"line\"><span class=\"built_in\">NSArray</span></div><div class=\"line\"><span class=\"built_in\">NSArray</span></div><div class=\"line\">MyObject</div><div class=\"line\">MyObject</div></pre></td></tr></table></figure>\n<p>但是运行结果却是：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj1 <span class=\"keyword\">class</span> is __NSPlaceholderArray</div><div class=\"line\">obj2 <span class=\"keyword\">class</span> is <span class=\"built_in\">NSCFArray</span></div><div class=\"line\">obj3 <span class=\"keyword\">class</span> is __NSPlaceholderArray</div><div class=\"line\">obj4 <span class=\"keyword\">class</span> is <span class=\"built_in\">NSCFArray</span></div><div class=\"line\">obj5 <span class=\"keyword\">class</span> is MyObject</div><div class=\"line\">obj6 <span class=\"keyword\">class</span> is MyObject</div></pre></td></tr></table></figure>\n<p>这是因为在Objective-C中，调用+alloc会隐性地返回一个类的实例对象而调用-init会返回另外一个类的实例对象。</p>\n<h3 id=\"objc-msgSend的工作流程是什么？\"><a href=\"#objc-msgSend的工作流程是什么？\" class=\"headerlink\" title=\"objc_msgSend的工作流程是什么？\"></a>objc_msgSend的工作流程是什么？</h3><p>objc_msgSend函数实现比较复杂。比如我们写了如下代码…</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> printMessageWithString:<span class=\"string\">@\"Hello World!\"</span>];</div></pre></td></tr></table></figure>\n<p>上述代码实际上会被编译器转化成：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objc_msgSend(<span class=\"keyword\">self</span>,<span class=\"keyword\">@selector</span>(printMessageWithString:),<span class=\"string\">@\"Hello World!\"</span>);</div></pre></td></tr></table></figure>\n<p>随后，objc_msgSend函数根据目标对象的isa指针去查询对应的类（或者任一父类）看是否响应选择器@selector(printMessageWithString:)。假设在类的函数派发列表或者缓存中找到了对应的函数实现，那么执行该函数。如此看来，objc_msgSend函数没有返回值，它开始执行然后找到对应的目标函数并执行，因此目标函数的返回值被视为objc_msgSend函数的返回值。</p>\n<p>Bill Bumgarner对于objc_msgSend的研究比我要表达的更为深入（<a href=\"http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html\" target=\"_blank\" rel=\"external\">part 1</a>,<a href=\"http://www.friday.com/bbum/2009/12/18/objc_msgsend-tour-part-2-setting-the-stage/\" target=\"_blank\" rel=\"external\">part 2</a>,<a href=\"http://www.friday.com/bbum/2009/12/18/objc_msgsend-tour-part-3-the-fast-path/\" target=\"_blank\" rel=\"external\">part 3</a>）。总结一下他所要表达的以及你在查阅运行时机制源代码时可能发现的内容：</p>\n<ol>\n<li>检测屏蔽的函数和死循环，很显然如果代码运行在垃圾回收的环境下，我们可以忽略-retain,-release的调用，诸如此类。</li>\n<li>检测空对象。 不同于其他编程语言，在Objective-C中发送一个消息给空对象是完全合法的。[there are some valid reasons you’d want to. Assuming we have a non nil target we go on… ]</li>\n<li>然后在一个类中查找函数指针，首先是搜索缓存列表，如果找到了对应的函数指针就跳转对其实现代码段，即执行函数。</li>\n<li>如果在缓存列表中没有找到对应的函数指针，便搜索类中的函数派发列表。如果找到了对应的函数指针即跳转到其实现代码段。</li>\n<li>如果在缓存列表和函数列表都没有找到对应的函数，随即跳转到消息转发机制，意味着代码会被编译成c语言代码。所以一个函数如下所示：</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">int</span>)doComputeWithNum:(<span class=\"keyword\">int</span>)aNum</div></pre></td></tr></table></figure>\n<p>将会被编译成：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> aClass_doComputeWithNum(aClass *<span class=\"keyword\">self</span>,SEL _cmd,<span class=\"keyword\">int</span> aNum)</div></pre></td></tr></table></figure>\n<p>此时，运行时机制通过这些函数的指针来调用这些转化后的函数，现在你已经不能直接调用这些函数，但是Cocoa库提供了一个方法来获得这些函数的函数指针。。。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//declare C function pointer</span></div><div class=\"line\"><span class=\"keyword\">int</span> (computeNum *)(<span class=\"keyword\">id</span>,SEL,<span class=\"keyword\">int</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//methodForSelector is COCOA &amp; not ObjC Runtime</span></div><div class=\"line\"><span class=\"comment\">//gets the same function pointer objc_msgSend gets</span></div><div class=\"line\">computeNum = (<span class=\"keyword\">int</span> (*)(<span class=\"keyword\">id</span>,SEL,<span class=\"keyword\">int</span>))[target methodForSelector:<span class=\"keyword\">@selector</span>(doComputeWithNum:)];</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//execute the C function pointer returned by the runtime</span></div><div class=\"line\">computeNum(obj,<span class=\"keyword\">@selector</span>(doComputeWithNum:),aNum);</div></pre></td></tr></table></figure>\n<p>这样，你可以知道访问这些函数并在运行时中直接调用，甚至利用这种方法来绕开运行时的动态调用来确保一个指定的函数被执行。运行时机制同样可以调用你的函数，只不过是通过objc_msgSend()。</p>\n<h3 id=\"Objective-C消息传送\"><a href=\"#Objective-C消息传送\" class=\"headerlink\" title=\"Objective-C消息传送\"></a>Objective-C消息传送</h3><p>在Objective-C中，发送一个消息给一个不会做出响应的对象是合法的，甚至可能是有意这样设计的。苹果在其开发文档中给出的原因之一是为了模拟Objective-C不支持的多继承，或者你只是想抽象化你的设计，隐藏能处理这些消息的实例对象或类。这是运行时机制必要的功能之一。<br>消息传送工作流程：</p>\n<ol>\n<li>运行时机制搜寻了对象的类和它所有父类中的缓存列表和函数列表，但是并没有找到指定的方法。</li>\n<li>随后运行时机制将会调用你类中的 +(BOOL)resolveInstanceMethod:(SEL)aSEL方法给你一次机会为指定的函数提供函数实现，并告诉运行时机制你已经实现了这个方法。如果运行时机制再次搜索这个函数就能找到对应的函数实现。你可以如下所示，实现这个功能：</li>\n</ol>\n<p>定义一个函数</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> fooMethod(<span class=\"keyword\">id</span> obj, SEL _cmd)</div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Doing Foo\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如下所示，使用class_addMethod()来实现</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">+(<span class=\"built_in\">BOOL</span>)resolveInstanceMethod:(SEL)aSEL</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(aSEL == <span class=\"keyword\">@selector</span>(doFoo:))&#123;</div><div class=\"line\">        class_addMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>],aSEL,(IMP)fooMethod,<span class=\"string\">\"v@:\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> resolveInstanceMethod];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>class_addMethod()最后一个参数“v@:”表示函数fooMethod的返回值和参数，你可以在运行时机制指南中类型编码<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html\" target=\"_blank\" rel=\"external\">Type Encodings</a>了解你可以具体的规则。</p>\n<ol>\n<li>运行时机制随后会调用- (id)forwardingTargetForSelector:(SEL)aSelector函数，给你一次机会将运行时指向另外一个能响应目标函数的对象。这样做比触发消耗更大的函数：-(void)forwardInvocation:(NSInvocation *)anInvocation更划算。你的具体实现可能如下所示：</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(aSelector == <span class=\"keyword\">@selector</span>(mysteriousMethod:))&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> alternateObject;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> forwardingTargetForSelector:aSelector];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>很显然你不想返回self指针，否则可能导致死循环。</p>\n<ol>\n<li>此时，运行时机制尝试最后一次去获取消息的预期目标，并调用- (void)forwardInvocation:(NSInvocation *)anInvocation。如果你未曾了解NSInvocation<a href=\"https://developer.apple.com/reference/foundation/nsinvocation\" target=\"_blank\" rel=\"external\">点击查看</a>,这是Objective-C消息中很重要的构成部分。一旦你持有一个NSInvocation对象，你基本上可以更改消息的任何内容，包括目标对象，选择器和函数参数。你可能操作如下：</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)invocation</div><div class=\"line\">&#123;</div><div class=\"line\">    SEL invSEL = invocation.selector;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span>([altObject respondsToSelector:invSEL]) &#123;</div><div class=\"line\">        [invocation invokeWithTarget:altObject];</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doesNotRecognizeSelector:invSEL];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果类是继承自NSObjct，- (void)forwardInvocation:(NSInvocation *)anInvocation函数的默认实现是调用-doesNotRecognizeSelector函数，如果你还想做点什么来响应这次消息转送，重载这个函数将是最后一次机会。</p>\n<h3 id=\"实例变量的无碎片化（Modern-Runtime）\"><a href=\"#实例变量的无碎片化（Modern-Runtime）\" class=\"headerlink\" title=\"实例变量的无碎片化（Modern Runtime）\"></a>实例变量的无碎片化（Modern Runtime）</h3><p>目前我们所了解到关于Modern Runtime的概念之一是实例变量无碎片化（Non Fragile ivars）。编译器在编译类的时候确定了实例变量的布局，决定了某个实例变量的访问位置。这属于底层细节，关乎于获得一个对象的指针，查找某个实例变量相对于对象起始位置的偏移，根据实例变量的类型读取相应数量的字节。因此，实例变量的布局可能如下所示，左侧的数字表示实例变量的字节偏移量</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/translation/runtime-f-1.png\" alt=\"\"></p>\n<p>如上所示，NSObject对象的实例变量布局以及继承NSObject后添加了自己的变量之后的布局。这样的布局在苹果发布更新之前都能正常运行，但是苹果发布了Mac OS X 10.6之后，布局就会变成如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/translation/runtime-f-2.png\" alt=\"\"></p>\n<p>因为与父类的实例变量重叠，自定义的对象的实例变量被抹掉。防止这样的情况发生唯一的可能是苹果能保持更新之前的布局。但是如果苹果这样做的话，那么苹果的框架将不可能得到改进，因为这些框架的实例变量布局已经写死了。处于实例变量碎片化的情况下只能通过重新编译所有继承于苹果类的类来保证兼容新的框架。那么实例变量无碎片化的情况下会是如何处理？</p>\n<p><img src=\"https://raw.githubusercontent.com/icebergcwp1990/MarkDownPhotos/master/cocoa/translation/runtime-f-3.png\" alt=\"\"></p>\n<p>实例变量无碎片化的前提下，编译器创建同实例变量碎片化情况下一样的实例变量布局。但是当运行时检测到一个重叠的父类时会调整自定义变量的偏移量，因此子类中自定义的变量得以保留。</p>\n<h3 id=\"Objective-C-关联对象\"><a href=\"#Objective-C-关联对象\" class=\"headerlink\" title=\"Objective-C 关联对象\"></a>Objective-C 关联对象</h3><p>最近Mac OS X 10.6 Snow Leopard推出了一个新特性，称之为关联引用。不同于其他一些语言，Objective-C不支持动态添加实例变量到某个对象的类中。所以在此之前你不得不耗尽脑力去构建一个特定的基础架构，营造一个可以给某个对象动态添加变量的假象。现在在Mac OS X 10.6中，运行时已经支持这一功能。如果想添加一个变量到任一个已经存在的苹果原生类中，比如NSView，我们可以做如下操作：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt; Cocoa/Cocoa.h&gt;</span> //Cocoa</span></div><div class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">&lt; objc/runtime.h&gt;</span> //objc runtime api’s</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSView</span> (<span class=\"title\">CustomAdditions</span>)</span></div><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">retain</span>) <span class=\"built_in\">NSImage</span> *customImage;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSView</span> (<span class=\"title\">CustomAdditions</span>)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> img_key; <span class=\"comment\">//has a unique address (identifier)</span></div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"built_in\">NSImage</span> *)customImage</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>,&amp;img_key);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">-(<span class=\"keyword\">void</span>)setCustomImage:(<span class=\"built_in\">NSImage</span> *)image</div><div class=\"line\">&#123;</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>,&amp;img_key,image,</div><div class=\"line\">                             OBJC_ASSOCIATION_RETAIN);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>在runtime.h头文件中可以看到存储关联对象方式的可选项，作为objc_setAssociatedObject()函数的参数传入。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* Associated Object support. */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* objc_setAssociatedObject() options */</span></div><div class=\"line\"><span class=\"keyword\">enum</span> &#123;</div><div class=\"line\">    OBJC_ASSOCIATION_ASSIGN = <span class=\"number\">0</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class=\"number\">1</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class=\"number\">3</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_RETAIN = <span class=\"number\">01401</span>,</div><div class=\"line\">    OBJC_ASSOCIATION_COPY = <span class=\"number\">01403</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这些可选值与@property语法的可选值相匹配。</p>\n<h3 id=\"混合虚函数表派发（Hybrid-vTable-Dispatch）\"><a href=\"#混合虚函数表派发（Hybrid-vTable-Dispatch）\" class=\"headerlink\" title=\"混合虚函数表派发（Hybrid vTable Dispatch）\"></a>混合虚函数表派发（Hybrid vTable Dispatch）</h3><p>如果你查阅现代版运行时的源代码，你会看到以下内容（<a href=\"http://opensource.apple.com/source/objc4/objc4-437/runtime/objc-runtime-new.m\" target=\"_blank\" rel=\"external\">位于objc-runtime-new.m</a>）:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***********************************************************************</span></div><div class=\"line\">* vtable dispatch</div><div class=\"line\">* </div><div class=\"line\">* Every class gets a vtable pointer. The vtable is an array of IMPs.</div><div class=\"line\">* The selectors represented in the vtable are the same for all classes</div><div class=\"line\">*   (i.e. no class has a bigger or smaller vtable).</div><div class=\"line\">* Each vtable index has an associated trampoline which dispatches to </div><div class=\"line\">*   the IMP at that index for the receiver class's vtable (after </div><div class=\"line\">*   checking for NULL). Dispatch fixup uses these trampolines instead </div><div class=\"line\">*   of objc_msgSend.</div><div class=\"line\">* Fragility: The vtable size and list of selectors is chosen at launch </div><div class=\"line\">*   time. No compiler-generated code depends on any particular vtable </div><div class=\"line\">*   configuration, or even the use of vtable dispatch at all.</div><div class=\"line\">* Memory size: If a class's vtable is identical to its superclass's </div><div class=\"line\">*   (i.e. the class overrides none of the vtable selectors), then </div><div class=\"line\">*   the class points directly to its superclass's vtable. This means </div><div class=\"line\">*   selectors to be included in the vtable should be chosen so they are </div><div class=\"line\">*   (1) frequently called, but (2) not too frequently overridden. In </div><div class=\"line\">*   particular, -dealloc is a bad choice.</div><div class=\"line\">* Forwarding: If a class doesn't implement some vtable selector, that </div><div class=\"line\">*   selector's IMP is set to objc_msgSend in that class's vtable.</div><div class=\"line\">* +initialize: Each class keeps the default vtable (which always </div><div class=\"line\">*   redirects to objc_msgSend) until its +initialize is completed.</div><div class=\"line\">*   Otherwise, the first message to a class could be a vtable dispatch, </div><div class=\"line\">*   and the vtable trampoline doesn't include +initialize checking.</div><div class=\"line\">* Changes: Categories, addMethod, and setImplementation all force vtable </div><div class=\"line\">*   reconstruction for the class and all of its subclasses, if the </div><div class=\"line\">*   vtable selectors are affected.</div><div class=\"line\">**********************************************************************/</div></pre></td></tr></table></figure>\n<p>上述内容阐述的要点就是运行时会尽量存储调用最频繁的函数以达到提高软件运行速度的目的，因为通过虚函数表查找比调用objc_msgSend函数使用的指令更少。虚函数表中的16个函数调用次数远多于其他所有函数。实际上，进一步深入研究代码你会发现垃圾回收机制和无垃圾回收机制下虚函数表中默认的函数：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> defaultVtable[] = &#123;</div><div class=\"line\">    <span class=\"string\">\"allocWithZone:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"alloc\"</span>, </div><div class=\"line\">    <span class=\"string\">\"class\"</span>, </div><div class=\"line\">    <span class=\"string\">\"self\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isKindOfClass:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"respondsToSelector:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isFlipped\"</span>, </div><div class=\"line\">    <span class=\"string\">\"length\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectForKey:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"count\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectAtIndex:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqualToString:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqual:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"retain\"</span>, </div><div class=\"line\">    <span class=\"string\">\"release\"</span>, </div><div class=\"line\">    <span class=\"string\">\"autorelease\"</span>, </div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"keyword\">const</span> defaultVtableGC[] = &#123;</div><div class=\"line\">    <span class=\"string\">\"allocWithZone:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"alloc\"</span>, </div><div class=\"line\">    <span class=\"string\">\"class\"</span>, </div><div class=\"line\">    <span class=\"string\">\"self\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isKindOfClass:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"respondsToSelector:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isFlipped\"</span>, </div><div class=\"line\">    <span class=\"string\">\"length\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectForKey:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"count\"</span>, </div><div class=\"line\">    <span class=\"string\">\"objectAtIndex:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqualToString:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"isEqual:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"hash\"</span>, </div><div class=\"line\">    <span class=\"string\">\"addObject:\"</span>, </div><div class=\"line\">    <span class=\"string\">\"countByEnumeratingWithState:objects:count:\"</span>, </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>那么你如何知道是否调用了这些函数？调试模式下，你将会在栈中看到以下函数中的某一个被调用，出于调试的目的，所有的这些方法都可以视为通过objc_msgSend函数调用的。</p>\n<ol>\n<li>objc_msgSend_fixup：是当运行时正在派发一个位于虚函数表的函数时触发，即用于派发虚函数表中的函数。</li>\n<li>objc_msgSend_fixedup：是当调用一个本应存在于虚函数表的函数但是现在已经不存在的函数时触发（个人觉得应该是调用在objc_msgSend_fixup函数之后，并且由前者触发的）。</li>\n<li>objc_msgSend_vtable[0-15]：调试模式下，也许会看到某个函数调用类似于objc_msgSend_vtable5意味着正在调用虚函数表中对应序号的某个函数。</li>\n</ol>\n<p>运行时可以决定是否派发这些函数，所以不要指望以下这种情况存在：objc_msgSend_vtable10在运行时的一次循环中对应的函数是-length,意味着后面任一次循环中也是同样情况。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>我希望你能喜欢这些内容，这篇文章基本上覆盖了我在<a href=\"http://cocoaheads.org/us/DesMoinesIowa/index.html\" target=\"_blank\" rel=\"external\">Des Moines Cocoaheads </a>上谈及的内容。Objective-C运行时是一个了不起的杰作，它为我们的Cocoa/Objective-C应用提供了一个强大的平台，让很多我们正在受用的功能都成为可能。如果你还没有查阅关于如何使用Objective-C运行时的Apple开发文档，我希望你马上行动，谢谢。附上：<a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html\" target=\"_blank\" rel=\"external\">运行时开发文档</a>，<a href=\"https://developer.apple.com/reference/objectivec/1657527-objective_c_runtime\" target=\"_blank\" rel=\"external\">运行时介绍文档</a></p>\n"},{"title":"Hello,World","url":"http://yoursite.com/2014/09/24/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"about","url":"http://yoursite.com/about/index.html","content":""},{"title":"category","url":"http://yoursite.com/category/index.html","content":""},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"\n@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\nhtml.page-home {\n\n\tbackground: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n\tbackground-blend-mode: screen;\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n\n}\n"},{"title":"link","url":"http://yoursite.com/link/index.html","content":""},{"title":"project","url":"http://yoursite.com/project/index.html","content":""},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":""},{"title":"search","url":"http://yoursite.com/search/index.html","content":""}]